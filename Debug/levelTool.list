
levelTool.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e74  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d84  0800400c  0800400c  0001400c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d90  08004d90  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08004d90  08004d90  00014d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d98  08004d98  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d98  08004d98  00014d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d9c  08004d9c  00014d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000580  20000080  08004e20  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  08004e20  00020600  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc68  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002018  00000000  00000000  0002cd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0002ed30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00016adb  00000000  00000000  0002f8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000d75f  00000000  00000000  000463b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008b50b  00000000  00000000  00053b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000df01d  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000ac0  00000000  00000000  000df070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ecc  00000000  00000000  000dfb30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003ff4 	.word	0x08003ff4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	08003ff4 	.word	0x08003ff4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <turnOnLed.8620>:
		int16_t ThresholdHigh = 1000;
		int16_t ThresholdLow = -1000;
		uint32_t delayMs = 10;

		void turnOnLed(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
		{
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	460b      	mov	r3, r1
 80004da:	817b      	strh	r3, [r7, #10]
 80004dc:	4664      	mov	r4, ip
 80004de:	f8c7 c004 	str.w	ip, [r7, #4]
			HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80004e2:	897b      	ldrh	r3, [r7, #10]
 80004e4:	2201      	movs	r2, #1
 80004e6:	4619      	mov	r1, r3
 80004e8:	68f8      	ldr	r0, [r7, #12]
 80004ea:	f002 f881 	bl	80025f0 <HAL_GPIO_WritePin>
			HAL_Delay(delayMs);
 80004ee:	6823      	ldr	r3, [r4, #0]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f001 fcdf 	bl	8001eb4 <HAL_Delay>
		}
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd90      	pop	{r4, r7, pc}
	...

08000500 <main>:
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0
int main(void)
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	60fb      	str	r3, [r7, #12]
  HAL_Init();
 800050c:	f001 fc60 	bl	8001dd0 <HAL_Init>
  SystemClock_Config();
 8000510:	f000 f8c4 	bl	800069c <SystemClock_Config>
  	  BSP_ACCELERO_Init();
 8000514:	f001 fb6e 	bl	8001bf4 <BSP_ACCELERO_Init>
  	  ssd1306_Init(&hi2c2);
 8000518:	4849      	ldr	r0, [pc, #292]	; (8000640 <main+0x140>)
 800051a:	f000 fa27 	bl	800096c <ssd1306_Init>
  MX_GPIO_Init();
 800051e:	f000 f9b7 	bl	8000890 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000522:	f000 f923 	bl	800076c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000526:	f000 f97d 	bl	8000824 <MX_SPI1_Init>
  MX_I2C2_Init();
 800052a:	f000 f94d 	bl	80007c8 <MX_I2C2_Init>
		int16_t axis[3] = {0};
 800052e:	463b      	mov	r3, r7
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	809a      	strh	r2, [r3, #4]
		int16_t xAxis, yAxis = 0x00;
 8000536:	2300      	movs	r3, #0
 8000538:	82fb      	strh	r3, [r7, #22]
		int16_t ThresholdHigh = 1000;
 800053a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053e:	82bb      	strh	r3, [r7, #20]
		int16_t ThresholdLow = -1000;
 8000540:	f64f 4318 	movw	r3, #64536	; 0xfc18
 8000544:	827b      	strh	r3, [r7, #18]
		uint32_t delayMs = 10;
 8000546:	230a      	movs	r3, #10
 8000548:	60bb      	str	r3, [r7, #8]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


		BSP_ACCELERO_GetXYZ(axis);
 800054a:	463b      	mov	r3, r7
 800054c:	4618      	mov	r0, r3
 800054e:	f001 fc13 	bl	8001d78 <BSP_ACCELERO_GetXYZ>

		ssd1306_Fill(Black);
 8000552:	2000      	movs	r0, #0
 8000554:	f000 fb2a 	bl	8000bac <ssd1306_Fill>

		xAxis = axis[0];
 8000558:	883b      	ldrh	r3, [r7, #0]
 800055a:	823b      	strh	r3, [r7, #16]
		yAxis = axis[1];
 800055c:	887b      	ldrh	r3, [r7, #2]
 800055e:	82fb      	strh	r3, [r7, #22]

		if(abs(xAxis) > abs(yAxis))
 8000560:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000564:	2b00      	cmp	r3, #0
 8000566:	bfb8      	it	lt
 8000568:	425b      	neglt	r3, r3
 800056a:	b29a      	uxth	r2, r3
 800056c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000570:	2b00      	cmp	r3, #0
 8000572:	bfb8      	it	lt
 8000574:	425b      	neglt	r3, r3
 8000576:	b29b      	uxth	r3, r3
 8000578:	429a      	cmp	r2, r3
 800057a:	d922      	bls.n	80005c2 <main+0xc2>
		{
			if(xAxis > ThresholdHigh)
 800057c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000580:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000584:	429a      	cmp	r2, r3
 8000586:	dd08      	ble.n	800059a <main+0x9a>
				turnOnLed(LED_Green_GPIO_Port, LED_Green_Pin);
 8000588:	f107 0308 	add.w	r3, r7, #8
 800058c:	469c      	mov	ip, r3
 800058e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000592:	482c      	ldr	r0, [pc, #176]	; (8000644 <main+0x144>)
 8000594:	f7ff ff9c 	bl	80004d0 <turnOnLed.8620>
 8000598:	e035      	b.n	8000606 <main+0x106>

			else if(xAxis < ThresholdLow)
 800059a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800059e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	da08      	bge.n	80005b8 <main+0xb8>
				turnOnLed(LED_Red_GPIO_Port, LED_Red_Pin);
 80005a6:	f107 0308 	add.w	r3, r7, #8
 80005aa:	469c      	mov	ip, r3
 80005ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b0:	4824      	ldr	r0, [pc, #144]	; (8000644 <main+0x144>)
 80005b2:	f7ff ff8d 	bl	80004d0 <turnOnLed.8620>
 80005b6:	e026      	b.n	8000606 <main+0x106>

			else { HAL_Delay(delayMs); }
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 fc7a 	bl	8001eb4 <HAL_Delay>
 80005c0:	e021      	b.n	8000606 <main+0x106>
		}

		else
		{
			if(yAxis  > ThresholdHigh)
 80005c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80005c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80005ca:	429a      	cmp	r2, r3
 80005cc:	dd08      	ble.n	80005e0 <main+0xe0>
				 turnOnLed(LED_Orange_GPIO_Port, LED_Orange_Pin);
 80005ce:	f107 0308 	add.w	r3, r7, #8
 80005d2:	469c      	mov	ip, r3
 80005d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d8:	481a      	ldr	r0, [pc, #104]	; (8000644 <main+0x144>)
 80005da:	f7ff ff79 	bl	80004d0 <turnOnLed.8620>
 80005de:	e012      	b.n	8000606 <main+0x106>

			else if(yAxis < ThresholdLow)
 80005e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80005e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	da08      	bge.n	80005fe <main+0xfe>
				turnOnLed(LED_Blue_GPIO_Port, LED_Blue_Pin);
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	469c      	mov	ip, r3
 80005f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f6:	4813      	ldr	r0, [pc, #76]	; (8000644 <main+0x144>)
 80005f8:	f7ff ff6a 	bl	80004d0 <turnOnLed.8620>
 80005fc:	e003      	b.n	8000606 <main+0x106>

			else { HAL_Delay(delayMs); }
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	4618      	mov	r0, r3
 8000602:	f001 fc57 	bl	8001eb4 <HAL_Delay>
		}

		ssd1306_SetCursor(10, 10);
 8000606:	210a      	movs	r1, #10
 8000608:	200a      	movs	r0, #10
 800060a:	f000 fc2b 	bl	8000e64 <ssd1306_SetCursor>
		//		sprintf(xText, "x: %.2f", xAxisDisplay);
		ssd1306_WriteString("Test1", Font_11x18, White);
 800060e:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <main+0x148>)
 8000610:	2301      	movs	r3, #1
 8000612:	ca06      	ldmia	r2, {r1, r2}
 8000614:	480d      	ldr	r0, [pc, #52]	; (800064c <main+0x14c>)
 8000616:	f000 fbff 	bl	8000e18 <ssd1306_WriteString>

		ssd1306_SetCursor(10, 40);
 800061a:	2128      	movs	r1, #40	; 0x28
 800061c:	200a      	movs	r0, #10
 800061e:	f000 fc21 	bl	8000e64 <ssd1306_SetCursor>
		//		sprintf(yText, "y: %.2f", Display);
		ssd1306_WriteString("Test2", Font_11x18, White);
 8000622:	4a09      	ldr	r2, [pc, #36]	; (8000648 <main+0x148>)
 8000624:	2301      	movs	r3, #1
 8000626:	ca06      	ldmia	r2, {r1, r2}
 8000628:	4809      	ldr	r0, [pc, #36]	; (8000650 <main+0x150>)
 800062a:	f000 fbf5 	bl	8000e18 <ssd1306_WriteString>

		ssd1306_UpdateScreen(&hi2c2);
 800062e:	4804      	ldr	r0, [pc, #16]	; (8000640 <main+0x140>)
 8000630:	f000 fae0 	bl	8000bf4 <ssd1306_UpdateScreen>

		turnOfLEDS();
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	469c      	mov	ip, r3
 800063a:	f000 f80b 	bl	8000654 <turnOfLEDS.8622>
		BSP_ACCELERO_GetXYZ(axis);
 800063e:	e784      	b.n	800054a <main+0x4a>
 8000640:	20000550 	.word	0x20000550
 8000644:	40020c00 	.word	0x40020c00
 8000648:	20000000 	.word	0x20000000
 800064c:	0800400c 	.word	0x0800400c
 8000650:	08004014 	.word	0x08004014

08000654 <turnOfLEDS.8622>:
		{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	f8c7 c004 	str.w	ip, [r7, #4]
			HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000664:	480c      	ldr	r0, [pc, #48]	; (8000698 <turnOfLEDS.8622+0x44>)
 8000666:	f001 ffc3 	bl	80025f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000670:	4809      	ldr	r0, [pc, #36]	; (8000698 <turnOfLEDS.8622+0x44>)
 8000672:	f001 ffbd 	bl	80025f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_Orange_GPIO_Port, LED_Orange_Pin, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800067c:	4806      	ldr	r0, [pc, #24]	; (8000698 <turnOfLEDS.8622+0x44>)
 800067e:	f001 ffb7 	bl	80025f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000688:	4803      	ldr	r0, [pc, #12]	; (8000698 <turnOfLEDS.8622+0x44>)
 800068a:	f001 ffb1 	bl	80025f0 <HAL_GPIO_WritePin>
		}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40020c00 	.word	0x40020c00

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	; 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	; 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 fc9a 	bl	8003fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	4b27      	ldr	r3, [pc, #156]	; (8000764 <SystemClock_Config+0xc8>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	4a26      	ldr	r2, [pc, #152]	; (8000764 <SystemClock_Config+0xc8>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	; 0x40
 80006d0:	4b24      	ldr	r3, [pc, #144]	; (8000764 <SystemClock_Config+0xc8>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b21      	ldr	r3, [pc, #132]	; (8000768 <SystemClock_Config+0xcc>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a20      	ldr	r2, [pc, #128]	; (8000768 <SystemClock_Config+0xcc>)
 80006e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <SystemClock_Config+0xcc>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	2310      	movs	r3, #16
 8000702:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000704:	2302      	movs	r3, #2
 8000706:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000708:	2300      	movs	r3, #0
 800070a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800070c:	2308      	movs	r3, #8
 800070e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000710:	2364      	movs	r3, #100	; 0x64
 8000712:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000714:	2302      	movs	r3, #2
 8000716:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000718:	2304      	movs	r3, #4
 800071a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 0320 	add.w	r3, r7, #32
 8000720:	4618      	mov	r0, r3
 8000722:	f002 ff7d 	bl	8003620 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800072c:	f000 f902 	bl	8000934 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000734:	2302      	movs	r3, #2
 8000736:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000740:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	2103      	movs	r1, #3
 800074c:	4618      	mov	r0, r3
 800074e:	f003 f9df 	bl	8003b10 <HAL_RCC_ClockConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000758:	f000 f8ec 	bl	8000934 <Error_Handler>
  }
}
 800075c:	bf00      	nop
 800075e:	3750      	adds	r7, #80	; 0x50
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_I2C1_Init+0x50>)
 8000772:	4a13      	ldr	r2, [pc, #76]	; (80007c0 <MX_I2C1_Init+0x54>)
 8000774:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_I2C1_Init+0x50>)
 8000778:	4a12      	ldr	r2, [pc, #72]	; (80007c4 <MX_I2C1_Init+0x58>)
 800077a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_I2C1_Init+0x50>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_I2C1_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_I2C1_Init+0x50>)
 800078a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800078e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <MX_I2C1_Init+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_I2C1_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <MX_I2C1_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_I2C1_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <MX_I2C1_Init+0x50>)
 80007aa:	f001 ff3b 	bl	8002624 <HAL_I2C_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007b4:	f000 f8be 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200004fc 	.word	0x200004fc
 80007c0:	40005400 	.word	0x40005400
 80007c4:	000186a0 	.word	0x000186a0

080007c8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_I2C2_Init+0x50>)
 80007ce:	4a13      	ldr	r2, [pc, #76]	; (800081c <MX_I2C2_Init+0x54>)
 80007d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_I2C2_Init+0x50>)
 80007d4:	4a12      	ldr	r2, [pc, #72]	; (8000820 <MX_I2C2_Init+0x58>)
 80007d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_I2C2_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_I2C2_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_I2C2_Init+0x50>)
 80007e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MX_I2C2_Init+0x50>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_I2C2_Init+0x50>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <MX_I2C2_Init+0x50>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_I2C2_Init+0x50>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_I2C2_Init+0x50>)
 8000806:	f001 ff0d 	bl	8002624 <HAL_I2C_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000810:	f000 f890 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000550 	.word	0x20000550
 800081c:	40005800 	.word	0x40005800
 8000820:	00061a80 	.word	0x00061a80

08000824 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000828:	4b17      	ldr	r3, [pc, #92]	; (8000888 <MX_SPI1_Init+0x64>)
 800082a:	4a18      	ldr	r2, [pc, #96]	; (800088c <MX_SPI1_Init+0x68>)
 800082c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800082e:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MX_SPI1_Init+0x64>)
 8000830:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000834:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000836:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_SPI1_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_SPI1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_SPI1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_SPI1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_SPI1_Init+0x64>)
 8000850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000854:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_SPI1_Init+0x64>)
 8000858:	2218      	movs	r2, #24
 800085a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MX_SPI1_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_SPI1_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <MX_SPI1_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_SPI1_Init+0x64>)
 8000870:	220a      	movs	r2, #10
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_SPI1_Init+0x64>)
 8000876:	f003 fb07 	bl	8003e88 <HAL_SPI_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000880:	f000 f858 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200005a4 	.word	0x200005a4
 800088c:	40013000 	.word	0x40013000

08000890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 030c 	add.w	r3, r7, #12
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	4b20      	ldr	r3, [pc, #128]	; (800092c <MX_GPIO_Init+0x9c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a1f      	ldr	r2, [pc, #124]	; (800092c <MX_GPIO_Init+0x9c>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b1d      	ldr	r3, [pc, #116]	; (800092c <MX_GPIO_Init+0x9c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <MX_GPIO_Init+0x9c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a18      	ldr	r2, [pc, #96]	; (800092c <MX_GPIO_Init+0x9c>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b16      	ldr	r3, [pc, #88]	; (800092c <MX_GPIO_Init+0x9c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_GPIO_Init+0x9c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a11      	ldr	r2, [pc, #68]	; (800092c <MX_GPIO_Init+0x9c>)
 80008e8:	f043 0308 	orr.w	r3, r3, #8
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_GPIO_Init+0x9c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0308 	and.w	r3, r3, #8
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_Green_Pin|LED_Orange_Pin|LED_Red_Pin|LED_Blue_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000900:	480b      	ldr	r0, [pc, #44]	; (8000930 <MX_GPIO_Init+0xa0>)
 8000902:	f001 fe75 	bl	80025f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Green_Pin LED_Orange_Pin LED_Red_Pin LED_Blue_Pin */
  GPIO_InitStruct.Pin = LED_Green_Pin|LED_Orange_Pin|LED_Red_Pin|LED_Blue_Pin;
 8000906:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800090a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	4619      	mov	r1, r3
 800091e:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_GPIO_Init+0xa0>)
 8000920:	f001 fbfe 	bl	8002120 <HAL_GPIO_Init>

}
 8000924:	bf00      	nop
 8000926:	3720      	adds	r7, #32
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40023800 	.word	0x40023800
 8000930:	40020c00 	.word	0x40020c00

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	e7fe      	b.n	800093c <Error_Handler+0x8>

0800093e <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b086      	sub	sp, #24
 8000942:	af04      	add	r7, sp, #16
 8000944:	6078      	str	r0, [r7, #4]
 8000946:	460b      	mov	r3, r1
 8000948:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 800094a:	230a      	movs	r3, #10
 800094c:	9302      	str	r3, [sp, #8]
 800094e:	2301      	movs	r3, #1
 8000950:	9301      	str	r3, [sp, #4]
 8000952:	1cfb      	adds	r3, r7, #3
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	2301      	movs	r3, #1
 8000958:	2200      	movs	r2, #0
 800095a:	2178      	movs	r1, #120	; 0x78
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f001 ffd5 	bl	800290c <HAL_I2C_Mem_Write>
 8000962:	4603      	mov	r3, r0
}
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8000974:	2064      	movs	r0, #100	; 0x64
 8000976:	f001 fa9d 	bl	8001eb4 <HAL_Delay>
    int status = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 800097e:	21ae      	movs	r1, #174	; 0xae
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f7ff ffdc 	bl	800093e <ssd1306_WriteCommand>
 8000986:	4603      	mov	r3, r0
 8000988:	461a      	mov	r2, r3
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	4413      	add	r3, r2
 800098e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8000990:	2120      	movs	r1, #32
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f7ff ffd3 	bl	800093e <ssd1306_WriteCommand>
 8000998:	4603      	mov	r3, r0
 800099a:	461a      	mov	r2, r3
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	4413      	add	r3, r2
 80009a0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80009a2:	2110      	movs	r1, #16
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff ffca 	bl	800093e <ssd1306_WriteCommand>
 80009aa:	4603      	mov	r3, r0
 80009ac:	461a      	mov	r2, r3
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	4413      	add	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 80009b4:	21b0      	movs	r1, #176	; 0xb0
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff ffc1 	bl	800093e <ssd1306_WriteCommand>
 80009bc:	4603      	mov	r3, r0
 80009be:	461a      	mov	r2, r3
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	4413      	add	r3, r2
 80009c4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 80009c6:	21c8      	movs	r1, #200	; 0xc8
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff ffb8 	bl	800093e <ssd1306_WriteCommand>
 80009ce:	4603      	mov	r3, r0
 80009d0:	461a      	mov	r2, r3
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	4413      	add	r3, r2
 80009d6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 80009d8:	2100      	movs	r1, #0
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff ffaf 	bl	800093e <ssd1306_WriteCommand>
 80009e0:	4603      	mov	r3, r0
 80009e2:	461a      	mov	r2, r3
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	4413      	add	r3, r2
 80009e8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 80009ea:	2110      	movs	r1, #16
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f7ff ffa6 	bl	800093e <ssd1306_WriteCommand>
 80009f2:	4603      	mov	r3, r0
 80009f4:	461a      	mov	r2, r3
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	4413      	add	r3, r2
 80009fa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 80009fc:	2140      	movs	r1, #64	; 0x40
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f7ff ff9d 	bl	800093e <ssd1306_WriteCommand>
 8000a04:	4603      	mov	r3, r0
 8000a06:	461a      	mov	r2, r3
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8000a0e:	2181      	movs	r1, #129	; 0x81
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff ff94 	bl	800093e <ssd1306_WriteCommand>
 8000a16:	4603      	mov	r3, r0
 8000a18:	461a      	mov	r2, r3
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8000a20:	21ff      	movs	r1, #255	; 0xff
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f7ff ff8b 	bl	800093e <ssd1306_WriteCommand>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4413      	add	r3, r2
 8000a30:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8000a32:	21a1      	movs	r1, #161	; 0xa1
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f7ff ff82 	bl	800093e <ssd1306_WriteCommand>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	4413      	add	r3, r2
 8000a42:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8000a44:	21a6      	movs	r1, #166	; 0xa6
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff ff79 	bl	800093e <ssd1306_WriteCommand>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	461a      	mov	r2, r3
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	4413      	add	r3, r2
 8000a54:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8000a56:	21a8      	movs	r1, #168	; 0xa8
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff ff70 	bl	800093e <ssd1306_WriteCommand>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	461a      	mov	r2, r3
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	4413      	add	r3, r2
 8000a66:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8000a68:	213f      	movs	r1, #63	; 0x3f
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff ff67 	bl	800093e <ssd1306_WriteCommand>
 8000a70:	4603      	mov	r3, r0
 8000a72:	461a      	mov	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4413      	add	r3, r2
 8000a78:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000a7a:	21a4      	movs	r1, #164	; 0xa4
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff ff5e 	bl	800093e <ssd1306_WriteCommand>
 8000a82:	4603      	mov	r3, r0
 8000a84:	461a      	mov	r2, r3
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	4413      	add	r3, r2
 8000a8a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8000a8c:	21d3      	movs	r1, #211	; 0xd3
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f7ff ff55 	bl	800093e <ssd1306_WriteCommand>
 8000a94:	4603      	mov	r3, r0
 8000a96:	461a      	mov	r2, r3
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff ff4c 	bl	800093e <ssd1306_WriteCommand>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	4413      	add	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8000ab0:	21d5      	movs	r1, #213	; 0xd5
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff ff43 	bl	800093e <ssd1306_WriteCommand>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	461a      	mov	r2, r3
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	4413      	add	r3, r2
 8000ac0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8000ac2:	21f0      	movs	r1, #240	; 0xf0
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff ff3a 	bl	800093e <ssd1306_WriteCommand>
 8000aca:	4603      	mov	r3, r0
 8000acc:	461a      	mov	r2, r3
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8000ad4:	21d9      	movs	r1, #217	; 0xd9
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff ff31 	bl	800093e <ssd1306_WriteCommand>
 8000adc:	4603      	mov	r3, r0
 8000ade:	461a      	mov	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8000ae6:	2122      	movs	r1, #34	; 0x22
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff ff28 	bl	800093e <ssd1306_WriteCommand>
 8000aee:	4603      	mov	r3, r0
 8000af0:	461a      	mov	r2, r3
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	4413      	add	r3, r2
 8000af6:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8000af8:	21da      	movs	r1, #218	; 0xda
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f7ff ff1f 	bl	800093e <ssd1306_WriteCommand>
 8000b00:	4603      	mov	r3, r0
 8000b02:	461a      	mov	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4413      	add	r3, r2
 8000b08:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 8000b0a:	2112      	movs	r1, #18
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff ff16 	bl	800093e <ssd1306_WriteCommand>
 8000b12:	4603      	mov	r3, r0
 8000b14:	461a      	mov	r2, r3
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	4413      	add	r3, r2
 8000b1a:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8000b1c:	21db      	movs	r1, #219	; 0xdb
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff ff0d 	bl	800093e <ssd1306_WriteCommand>
 8000b24:	4603      	mov	r3, r0
 8000b26:	461a      	mov	r2, r3
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8000b2e:	2120      	movs	r1, #32
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ff04 	bl	800093e <ssd1306_WriteCommand>
 8000b36:	4603      	mov	r3, r0
 8000b38:	461a      	mov	r2, r3
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8000b40:	218d      	movs	r1, #141	; 0x8d
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff fefb 	bl	800093e <ssd1306_WriteCommand>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4413      	add	r3, r2
 8000b50:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8000b52:	2114      	movs	r1, #20
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff fef2 	bl	800093e <ssd1306_WriteCommand>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	4413      	add	r3, r2
 8000b62:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8000b64:	21af      	movs	r1, #175	; 0xaf
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff fee9 	bl	800093e <ssd1306_WriteCommand>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	461a      	mov	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4413      	add	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <ssd1306_Init+0x214>
        return 1;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e00f      	b.n	8000ba0 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8000b80:	2000      	movs	r0, #0
 8000b82:	f000 f813 	bl	8000bac <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f000 f834 	bl	8000bf4 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <ssd1306_Init+0x23c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000b92:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <ssd1306_Init+0x23c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <ssd1306_Init+0x23c>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	715a      	strb	r2, [r3, #5]

    return 0;
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	2000049c 	.word	0x2000049c

08000bac <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	e00d      	b.n	8000bd8 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d101      	bne.n	8000bc6 <ssd1306_Fill+0x1a>
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	e000      	b.n	8000bc8 <ssd1306_Fill+0x1c>
 8000bc6:	21ff      	movs	r1, #255	; 0xff
 8000bc8:	4a09      	ldr	r2, [pc, #36]	; (8000bf0 <ssd1306_Fill+0x44>)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	4413      	add	r3, r2
 8000bce:	460a      	mov	r2, r1
 8000bd0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bde:	d3ed      	bcc.n	8000bbc <ssd1306_Fill+0x10>
    }
}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	2000009c 	.word	0x2000009c

08000bf4 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af04      	add	r7, sp, #16
 8000bfa:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	73fb      	strb	r3, [r7, #15]
 8000c00:	e020      	b.n	8000c44 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
 8000c04:	3b50      	subs	r3, #80	; 0x50
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	4619      	mov	r1, r3
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f7ff fe97 	bl	800093e <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8000c10:	2100      	movs	r1, #0
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f7ff fe93 	bl	800093e <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8000c18:	2110      	movs	r1, #16
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff fe8f 	bl	800093e <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	01db      	lsls	r3, r3, #7
 8000c24:	4a0b      	ldr	r2, [pc, #44]	; (8000c54 <ssd1306_UpdateScreen+0x60>)
 8000c26:	4413      	add	r3, r2
 8000c28:	2264      	movs	r2, #100	; 0x64
 8000c2a:	9202      	str	r2, [sp, #8]
 8000c2c:	2280      	movs	r2, #128	; 0x80
 8000c2e:	9201      	str	r2, [sp, #4]
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	2301      	movs	r3, #1
 8000c34:	2240      	movs	r2, #64	; 0x40
 8000c36:	2178      	movs	r1, #120	; 0x78
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f001 fe67 	bl	800290c <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
 8000c40:	3301      	adds	r3, #1
 8000c42:	73fb      	strb	r3, [r7, #15]
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	2b07      	cmp	r3, #7
 8000c48:	d9db      	bls.n	8000c02 <ssd1306_UpdateScreen+0xe>
    }
}
 8000c4a:	bf00      	nop
 8000c4c:	bf00      	nop
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	2000009c 	.word	0x2000009c

08000c58 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
 8000c62:	460b      	mov	r3, r1
 8000c64:	71bb      	strb	r3, [r7, #6]
 8000c66:	4613      	mov	r3, r2
 8000c68:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	db48      	blt.n	8000d04 <ssd1306_DrawPixel+0xac>
 8000c72:	79bb      	ldrb	r3, [r7, #6]
 8000c74:	2b3f      	cmp	r3, #63	; 0x3f
 8000c76:	d845      	bhi.n	8000d04 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8000c78:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <ssd1306_DrawPixel+0xb8>)
 8000c7a:	791b      	ldrb	r3, [r3, #4]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d006      	beq.n	8000c8e <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8000c80:	797b      	ldrb	r3, [r7, #5]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	bf0c      	ite	eq
 8000c86:	2301      	moveq	r3, #1
 8000c88:	2300      	movne	r3, #0
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8000c8e:	797b      	ldrb	r3, [r7, #5]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d11a      	bne.n	8000cca <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000c94:	79fa      	ldrb	r2, [r7, #7]
 8000c96:	79bb      	ldrb	r3, [r7, #6]
 8000c98:	08db      	lsrs	r3, r3, #3
 8000c9a:	b2d8      	uxtb	r0, r3
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	01db      	lsls	r3, r3, #7
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4a1c      	ldr	r2, [pc, #112]	; (8000d14 <ssd1306_DrawPixel+0xbc>)
 8000ca4:	5cd3      	ldrb	r3, [r2, r3]
 8000ca6:	b25a      	sxtb	r2, r3
 8000ca8:	79bb      	ldrb	r3, [r7, #6]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	2101      	movs	r1, #1
 8000cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb4:	b25b      	sxtb	r3, r3
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	b259      	sxtb	r1, r3
 8000cba:	79fa      	ldrb	r2, [r7, #7]
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	01db      	lsls	r3, r3, #7
 8000cc0:	4413      	add	r3, r2
 8000cc2:	b2c9      	uxtb	r1, r1
 8000cc4:	4a13      	ldr	r2, [pc, #76]	; (8000d14 <ssd1306_DrawPixel+0xbc>)
 8000cc6:	54d1      	strb	r1, [r2, r3]
 8000cc8:	e01d      	b.n	8000d06 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000cca:	79fa      	ldrb	r2, [r7, #7]
 8000ccc:	79bb      	ldrb	r3, [r7, #6]
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	b2d8      	uxtb	r0, r3
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	01db      	lsls	r3, r3, #7
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <ssd1306_DrawPixel+0xbc>)
 8000cda:	5cd3      	ldrb	r3, [r2, r3]
 8000cdc:	b25a      	sxtb	r2, r3
 8000cde:	79bb      	ldrb	r3, [r7, #6]
 8000ce0:	f003 0307 	and.w	r3, r3, #7
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	b25b      	sxtb	r3, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	b25b      	sxtb	r3, r3
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	b259      	sxtb	r1, r3
 8000cf4:	79fa      	ldrb	r2, [r7, #7]
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	01db      	lsls	r3, r3, #7
 8000cfa:	4413      	add	r3, r2
 8000cfc:	b2c9      	uxtb	r1, r1
 8000cfe:	4a05      	ldr	r2, [pc, #20]	; (8000d14 <ssd1306_DrawPixel+0xbc>)
 8000d00:	54d1      	strb	r1, [r2, r3]
 8000d02:	e000      	b.n	8000d06 <ssd1306_DrawPixel+0xae>
        return;
 8000d04:	bf00      	nop
    }
}
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	2000049c 	.word	0x2000049c
 8000d14:	2000009c 	.word	0x2000009c

08000d18 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8000d18:	b590      	push	{r4, r7, lr}
 8000d1a:	b089      	sub	sp, #36	; 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	1d38      	adds	r0, r7, #4
 8000d22:	e880 0006 	stmia.w	r0, {r1, r2}
 8000d26:	461a      	mov	r2, r3
 8000d28:	4623      	mov	r3, r4
 8000d2a:	73fb      	strb	r3, [r7, #15]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000d30:	4b38      	ldr	r3, [pc, #224]	; (8000e14 <ssd1306_WriteChar+0xfc>)
 8000d32:	881b      	ldrh	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	793b      	ldrb	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	2b7f      	cmp	r3, #127	; 0x7f
 8000d3c:	dc06      	bgt.n	8000d4c <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8000d3e:	4b35      	ldr	r3, [pc, #212]	; (8000e14 <ssd1306_WriteChar+0xfc>)
 8000d40:	885b      	ldrh	r3, [r3, #2]
 8000d42:	461a      	mov	r2, r3
 8000d44:	797b      	ldrb	r3, [r7, #5]
 8000d46:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000d48:	2b3f      	cmp	r3, #63	; 0x3f
 8000d4a:	dd01      	ble.n	8000d50 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	e05d      	b.n	8000e0c <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
 8000d54:	e04c      	b.n	8000df0 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	3b20      	subs	r3, #32
 8000d5c:	7979      	ldrb	r1, [r7, #5]
 8000d5e:	fb01 f303 	mul.w	r3, r1, r3
 8000d62:	4619      	mov	r1, r3
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	440b      	add	r3, r1
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	4413      	add	r3, r2
 8000d6c:	881b      	ldrh	r3, [r3, #0]
 8000d6e:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
 8000d74:	e034      	b.n	8000de0 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8000d76:	697a      	ldr	r2, [r7, #20]
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d012      	beq.n	8000dac <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000d86:	4b23      	ldr	r3, [pc, #140]	; (8000e14 <ssd1306_WriteChar+0xfc>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	4413      	add	r3, r2
 8000d92:	b2d8      	uxtb	r0, r3
 8000d94:	4b1f      	ldr	r3, [pc, #124]	; (8000e14 <ssd1306_WriteChar+0xfc>)
 8000d96:	885b      	ldrh	r3, [r3, #2]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	4413      	add	r3, r2
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	7bba      	ldrb	r2, [r7, #14]
 8000da4:	4619      	mov	r1, r3
 8000da6:	f7ff ff57 	bl	8000c58 <ssd1306_DrawPixel>
 8000daa:	e016      	b.n	8000dda <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000dac:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <ssd1306_WriteChar+0xfc>)
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	4413      	add	r3, r2
 8000db8:	b2d8      	uxtb	r0, r3
 8000dba:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <ssd1306_WriteChar+0xfc>)
 8000dbc:	885b      	ldrh	r3, [r3, #2]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	4413      	add	r3, r2
 8000dc6:	b2d9      	uxtb	r1, r3
 8000dc8:	7bbb      	ldrb	r3, [r7, #14]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	bf0c      	ite	eq
 8000dce:	2301      	moveq	r3, #1
 8000dd0:	2300      	movne	r3, #0
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	f7ff ff3f 	bl	8000c58 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	61bb      	str	r3, [r7, #24]
 8000de0:	793b      	ldrb	r3, [r7, #4]
 8000de2:	461a      	mov	r2, r3
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d3c5      	bcc.n	8000d76 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3301      	adds	r3, #1
 8000dee:	61fb      	str	r3, [r7, #28]
 8000df0:	797b      	ldrb	r3, [r7, #5]
 8000df2:	461a      	mov	r2, r3
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d3ad      	bcc.n	8000d56 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <ssd1306_WriteChar+0xfc>)
 8000dfc:	881a      	ldrh	r2, [r3, #0]
 8000dfe:	793b      	ldrb	r3, [r7, #4]
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	4413      	add	r3, r2
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <ssd1306_WriteChar+0xfc>)
 8000e08:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3724      	adds	r7, #36	; 0x24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd90      	pop	{r4, r7, pc}
 8000e14:	2000049c 	.word	0x2000049c

08000e18 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	1d38      	adds	r0, r7, #4
 8000e22:	e880 0006 	stmia.w	r0, {r1, r2}
 8000e26:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8000e28:	e012      	b.n	8000e50 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	7818      	ldrb	r0, [r3, #0]
 8000e2e:	78fb      	ldrb	r3, [r7, #3]
 8000e30:	1d3a      	adds	r2, r7, #4
 8000e32:	ca06      	ldmia	r2, {r1, r2}
 8000e34:	f7ff ff70 	bl	8000d18 <ssd1306_WriteChar>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d002      	beq.n	8000e4a <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	e008      	b.n	8000e5c <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	60fb      	str	r3, [r7, #12]
    while (*str)
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1e8      	bne.n	8000e2a <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	781b      	ldrb	r3, [r3, #0]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	460a      	mov	r2, r1
 8000e6e:	71fb      	strb	r3, [r7, #7]
 8000e70:	4613      	mov	r3, r2
 8000e72:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <ssd1306_SetCursor+0x2c>)
 8000e7a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000e7c:	79bb      	ldrb	r3, [r7, #6]
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <ssd1306_SetCursor+0x2c>)
 8000e82:	805a      	strh	r2, [r3, #2]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	2000049c 	.word	0x2000049c

08000e94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <HAL_MspInit+0x4c>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	4a0f      	ldr	r2, [pc, #60]	; (8000ee0 <HAL_MspInit+0x4c>)
 8000ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <HAL_MspInit+0x4c>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	603b      	str	r3, [r7, #0]
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <HAL_MspInit+0x4c>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	4a08      	ldr	r2, [pc, #32]	; (8000ee0 <HAL_MspInit+0x4c>)
 8000ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_MspInit+0x4c>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800

08000ee4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08c      	sub	sp, #48	; 0x30
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a3a      	ldr	r2, [pc, #232]	; (8000fec <HAL_I2C_MspInit+0x108>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d12c      	bne.n	8000f60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	61bb      	str	r3, [r7, #24]
 8000f0a:	4b39      	ldr	r3, [pc, #228]	; (8000ff0 <HAL_I2C_MspInit+0x10c>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a38      	ldr	r2, [pc, #224]	; (8000ff0 <HAL_I2C_MspInit+0x10c>)
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b36      	ldr	r3, [pc, #216]	; (8000ff0 <HAL_I2C_MspInit+0x10c>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	61bb      	str	r3, [r7, #24]
 8000f20:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f22:	23c0      	movs	r3, #192	; 0xc0
 8000f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f26:	2312      	movs	r3, #18
 8000f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f32:	2304      	movs	r3, #4
 8000f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	482d      	ldr	r0, [pc, #180]	; (8000ff4 <HAL_I2C_MspInit+0x110>)
 8000f3e:	f001 f8ef 	bl	8002120 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	4b2a      	ldr	r3, [pc, #168]	; (8000ff0 <HAL_I2C_MspInit+0x10c>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	4a29      	ldr	r2, [pc, #164]	; (8000ff0 <HAL_I2C_MspInit+0x10c>)
 8000f4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f50:	6413      	str	r3, [r2, #64]	; 0x40
 8000f52:	4b27      	ldr	r3, [pc, #156]	; (8000ff0 <HAL_I2C_MspInit+0x10c>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f5e:	e041      	b.n	8000fe4 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a24      	ldr	r2, [pc, #144]	; (8000ff8 <HAL_I2C_MspInit+0x114>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d13c      	bne.n	8000fe4 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	4b20      	ldr	r3, [pc, #128]	; (8000ff0 <HAL_I2C_MspInit+0x10c>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a1f      	ldr	r2, [pc, #124]	; (8000ff0 <HAL_I2C_MspInit+0x10c>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <HAL_I2C_MspInit+0x10c>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f8c:	2312      	movs	r3, #18
 8000f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f94:	2303      	movs	r3, #3
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f98:	2304      	movs	r3, #4
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9c:	f107 031c 	add.w	r3, r7, #28
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4814      	ldr	r0, [pc, #80]	; (8000ff4 <HAL_I2C_MspInit+0x110>)
 8000fa4:	f001 f8bc 	bl	8002120 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fa8:	2308      	movs	r3, #8
 8000faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fac:	2312      	movs	r3, #18
 8000fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000fb8:	2309      	movs	r3, #9
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbc:	f107 031c 	add.w	r3, r7, #28
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <HAL_I2C_MspInit+0x110>)
 8000fc4:	f001 f8ac 	bl	8002120 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <HAL_I2C_MspInit+0x10c>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <HAL_I2C_MspInit+0x10c>)
 8000fd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_I2C_MspInit+0x10c>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
}
 8000fe4:	bf00      	nop
 8000fe6:	3730      	adds	r7, #48	; 0x30
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40005400 	.word	0x40005400
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020400 	.word	0x40020400
 8000ff8:	40005800 	.word	0x40005800

08000ffc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a14      	ldr	r2, [pc, #80]	; (800105c <HAL_I2C_MspDeInit+0x60>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d10e      	bne.n	800102c <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800100e:	4b14      	ldr	r3, [pc, #80]	; (8001060 <HAL_I2C_MspDeInit+0x64>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	4a13      	ldr	r2, [pc, #76]	; (8001060 <HAL_I2C_MspDeInit+0x64>)
 8001014:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001018:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800101a:	2140      	movs	r1, #64	; 0x40
 800101c:	4811      	ldr	r0, [pc, #68]	; (8001064 <HAL_I2C_MspDeInit+0x68>)
 800101e:	f001 fa03 	bl	8002428 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8001022:	2180      	movs	r1, #128	; 0x80
 8001024:	480f      	ldr	r0, [pc, #60]	; (8001064 <HAL_I2C_MspDeInit+0x68>)
 8001026:	f001 f9ff 	bl	8002428 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800102a:	e013      	b.n	8001054 <HAL_I2C_MspDeInit+0x58>
  else if(hi2c->Instance==I2C2)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0d      	ldr	r2, [pc, #52]	; (8001068 <HAL_I2C_MspDeInit+0x6c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d10e      	bne.n	8001054 <HAL_I2C_MspDeInit+0x58>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <HAL_I2C_MspDeInit+0x64>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	4a09      	ldr	r2, [pc, #36]	; (8001060 <HAL_I2C_MspDeInit+0x64>)
 800103c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001040:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001042:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001046:	4807      	ldr	r0, [pc, #28]	; (8001064 <HAL_I2C_MspDeInit+0x68>)
 8001048:	f001 f9ee 	bl	8002428 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 800104c:	2108      	movs	r1, #8
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <HAL_I2C_MspDeInit+0x68>)
 8001050:	f001 f9ea 	bl	8002428 <HAL_GPIO_DeInit>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40005400 	.word	0x40005400
 8001060:	40023800 	.word	0x40023800
 8001064:	40020400 	.word	0x40020400
 8001068:	40005800 	.word	0x40005800

0800106c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	; 0x28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a19      	ldr	r2, [pc, #100]	; (80010f0 <HAL_SPI_MspInit+0x84>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d12b      	bne.n	80010e6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <HAL_SPI_MspInit+0x88>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	4a17      	ldr	r2, [pc, #92]	; (80010f4 <HAL_SPI_MspInit+0x88>)
 8001098:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800109c:	6453      	str	r3, [r2, #68]	; 0x44
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <HAL_SPI_MspInit+0x88>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <HAL_SPI_MspInit+0x88>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a10      	ldr	r2, [pc, #64]	; (80010f4 <HAL_SPI_MspInit+0x88>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <HAL_SPI_MspInit+0x88>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80010c6:	23e0      	movs	r3, #224	; 0xe0
 80010c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010d6:	2305      	movs	r3, #5
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	; (80010f8 <HAL_SPI_MspInit+0x8c>)
 80010e2:	f001 f81d 	bl	8002120 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010e6:	bf00      	nop
 80010e8:	3728      	adds	r7, #40	; 0x28
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40013000 	.word	0x40013000
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40020000 	.word	0x40020000

080010fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <NMI_Handler+0x4>

08001102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001106:	e7fe      	b.n	8001106 <HardFault_Handler+0x4>

08001108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <MemManage_Handler+0x4>

0800110e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <BusFault_Handler+0x4>

08001114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <UsageFault_Handler+0x4>

0800111a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001148:	f000 fe94 	bl	8001e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}

08001150 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <SystemInit+0x20>)
 8001156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115a:	4a05      	ldr	r2, [pc, #20]	; (8001170 <SystemInit+0x20>)
 800115c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001160:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001174:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001178:	480d      	ldr	r0, [pc, #52]	; (80011b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800117a:	490e      	ldr	r1, [pc, #56]	; (80011b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800117c:	4a0e      	ldr	r2, [pc, #56]	; (80011b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001180:	e002      	b.n	8001188 <LoopCopyDataInit>

08001182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001186:	3304      	adds	r3, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800118c:	d3f9      	bcc.n	8001182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118e:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001190:	4c0b      	ldr	r4, [pc, #44]	; (80011c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001194:	e001      	b.n	800119a <LoopFillZerobss>

08001196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001198:	3204      	adds	r2, #4

0800119a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800119c:	d3fb      	bcc.n	8001196 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800119e:	f7ff ffd7 	bl	8001150 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a2:	f002 fefb 	bl	8003f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011a6:	f7ff f9ab 	bl	8000500 <main>
  bx  lr    
 80011aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80011b8:	08004da0 	.word	0x08004da0
  ldr r2, =_sbss
 80011bc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80011c0:	20000600 	.word	0x20000600

080011c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c4:	e7fe      	b.n	80011c4 <ADC_IRQHandler>

080011c6 <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b084      	sub	sp, #16
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80011d0:	2300      	movs	r3, #0
 80011d2:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 80011d4:	f000 fc90 	bl	8001af8 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	461a      	mov	r2, r3
 80011e0:	2120      	movs	r1, #32
 80011e2:	2032      	movs	r0, #50	; 0x32
 80011e4:	f000 fce0 	bl	8001ba8 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 80011e8:	2300      	movs	r3, #0
 80011ea:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	461a      	mov	r2, r3
 80011f0:	2123      	movs	r1, #35	; 0x23
 80011f2:	2032      	movs	r0, #50	; 0x32
 80011f4:	f000 fcd8 	bl	8001ba8 <COMPASSACCELERO_IO_Write>
}
 80011f8:	bf00      	nop
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001214:	2300      	movs	r3, #0
 8001216:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8001218:	f000 fc6e 	bl	8001af8 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 800121c:	210f      	movs	r1, #15
 800121e:	2032      	movs	r0, #50	; 0x32
 8001220:	f000 fcd5 	bl	8001bce <COMPASSACCELERO_IO_Read>
 8001224:	4603      	mov	r3, r0
 8001226:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8001228:	79fb      	ldrb	r3, [r7, #7]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8001238:	2124      	movs	r1, #36	; 0x24
 800123a:	2032      	movs	r0, #50	; 0x32
 800123c:	f000 fcc7 	bl	8001bce <COMPASSACCELERO_IO_Read>
 8001240:	4603      	mov	r3, r0
 8001242:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800124a:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	461a      	mov	r2, r3
 8001250:	2124      	movs	r1, #36	; 0x24
 8001252:	2032      	movs	r0, #50	; 0x32
 8001254:	f000 fca8 	bl	8001ba8 <COMPASSACCELERO_IO_Write>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800126a:	2121      	movs	r1, #33	; 0x21
 800126c:	2032      	movs	r0, #50	; 0x32
 800126e:	f000 fcae 	bl	8001bce <COMPASSACCELERO_IO_Read>
 8001272:	4603      	mov	r3, r0
 8001274:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	f003 030c 	and.w	r3, r3, #12
 800127c:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 800127e:	7bfa      	ldrb	r2, [r7, #15]
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	4313      	orrs	r3, r2
 8001284:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	461a      	mov	r2, r3
 800128a:	2121      	movs	r1, #33	; 0x21
 800128c:	2032      	movs	r0, #50	; 0x32
 800128e:	f000 fc8b 	bl	8001ba8 <COMPASSACCELERO_IO_Write>
}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b084      	sub	sp, #16
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 80012a4:	2121      	movs	r1, #33	; 0x21
 80012a6:	2032      	movs	r0, #50	; 0x32
 80012a8:	f000 fc91 	bl	8001bce <COMPASSACCELERO_IO_Read>
 80012ac:	4603      	mov	r3, r0
 80012ae:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	f023 0308 	bic.w	r3, r3, #8
 80012b6:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 80012b8:	7bfa      	ldrb	r2, [r7, #15]
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	4313      	orrs	r3, r2
 80012be:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	461a      	mov	r2, r3
 80012c4:	2121      	movs	r1, #33	; 0x21
 80012c6:	2032      	movs	r0, #50	; 0x32
 80012c8:	f000 fc6e 	bl	8001ba8 <COMPASSACCELERO_IO_Write>
}
 80012cc:	bf00      	nop
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 80012dc:	2300      	movs	r3, #0
 80012de:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 80012e4:	2301      	movs	r3, #1
 80012e6:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 80012e8:	2123      	movs	r1, #35	; 0x23
 80012ea:	2032      	movs	r0, #50	; 0x32
 80012ec:	f000 fc6f 	bl	8001bce <COMPASSACCELERO_IO_Read>
 80012f0:	4603      	mov	r3, r0
 80012f2:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 80012f4:	2124      	movs	r1, #36	; 0x24
 80012f6:	2032      	movs	r0, #50	; 0x32
 80012f8:	f000 fc69 	bl	8001bce <COMPASSACCELERO_IO_Read>
 80012fc:	4603      	mov	r3, r0
 80012fe:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 8001300:	2128      	movs	r1, #40	; 0x28
 8001302:	2032      	movs	r0, #50	; 0x32
 8001304:	f000 fc63 	bl	8001bce <COMPASSACCELERO_IO_Read>
 8001308:	4603      	mov	r3, r0
 800130a:	b25b      	sxtb	r3, r3
 800130c:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 800130e:	2129      	movs	r1, #41	; 0x29
 8001310:	2032      	movs	r0, #50	; 0x32
 8001312:	f000 fc5c 	bl	8001bce <COMPASSACCELERO_IO_Read>
 8001316:	4603      	mov	r3, r0
 8001318:	b25b      	sxtb	r3, r3
 800131a:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 800131c:	212a      	movs	r1, #42	; 0x2a
 800131e:	2032      	movs	r0, #50	; 0x32
 8001320:	f000 fc55 	bl	8001bce <COMPASSACCELERO_IO_Read>
 8001324:	4603      	mov	r3, r0
 8001326:	b25b      	sxtb	r3, r3
 8001328:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 800132a:	212b      	movs	r1, #43	; 0x2b
 800132c:	2032      	movs	r0, #50	; 0x32
 800132e:	f000 fc4e 	bl	8001bce <COMPASSACCELERO_IO_Read>
 8001332:	4603      	mov	r3, r0
 8001334:	b25b      	sxtb	r3, r3
 8001336:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 8001338:	212c      	movs	r1, #44	; 0x2c
 800133a:	2032      	movs	r0, #50	; 0x32
 800133c:	f000 fc47 	bl	8001bce <COMPASSACCELERO_IO_Read>
 8001340:	4603      	mov	r3, r0
 8001342:	b25b      	sxtb	r3, r3
 8001344:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 8001346:	212d      	movs	r1, #45	; 0x2d
 8001348:	2032      	movs	r0, #50	; 0x32
 800134a:	f000 fc40 	bl	8001bce <COMPASSACCELERO_IO_Read>
 800134e:	4603      	mov	r3, r0
 8001350:	b25b      	sxtb	r3, r3
 8001352:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 8001354:	7d3b      	ldrb	r3, [r7, #20]
 8001356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800135a:	2b00      	cmp	r3, #0
 800135c:	d126      	bne.n	80013ac <LSM303AGR_AccReadXYZ+0xd8>
  {
    for(i=0; i<3; i++)
 800135e:	2300      	movs	r3, #0
 8001360:	77fb      	strb	r3, [r7, #31]
 8001362:	e01f      	b.n	80013a4 <LSM303AGR_AccReadXYZ+0xd0>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8001364:	7ffb      	ldrb	r3, [r7, #31]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	3301      	adds	r3, #1
 800136a:	f107 0220 	add.w	r2, r7, #32
 800136e:	4413      	add	r3, r2
 8001370:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001374:	b29b      	uxth	r3, r3
 8001376:	021b      	lsls	r3, r3, #8
 8001378:	b29a      	uxth	r2, r3
 800137a:	7ffb      	ldrb	r3, [r7, #31]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	f107 0120 	add.w	r1, r7, #32
 8001382:	440b      	add	r3, r1
 8001384:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001388:	b29b      	uxth	r3, r3
 800138a:	4413      	add	r3, r2
 800138c:	b29a      	uxth	r2, r3
 800138e:	7ffb      	ldrb	r3, [r7, #31]
 8001390:	b212      	sxth	r2, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	f107 0120 	add.w	r1, r7, #32
 8001398:	440b      	add	r3, r1
 800139a:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 800139e:	7ffb      	ldrb	r3, [r7, #31]
 80013a0:	3301      	adds	r3, #1
 80013a2:	77fb      	strb	r3, [r7, #31]
 80013a4:	7ffb      	ldrb	r3, [r7, #31]
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d9dc      	bls.n	8001364 <LSM303AGR_AccReadXYZ+0x90>
 80013aa:	e025      	b.n	80013f8 <LSM303AGR_AccReadXYZ+0x124>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 80013ac:	2300      	movs	r3, #0
 80013ae:	77fb      	strb	r3, [r7, #31]
 80013b0:	e01f      	b.n	80013f2 <LSM303AGR_AccReadXYZ+0x11e>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 80013b2:	7ffb      	ldrb	r3, [r7, #31]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	f107 0220 	add.w	r2, r7, #32
 80013ba:	4413      	add	r3, r2
 80013bc:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	7ffb      	ldrb	r3, [r7, #31]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	3301      	adds	r3, #1
 80013cc:	f107 0120 	add.w	r1, r7, #32
 80013d0:	440b      	add	r3, r1
 80013d2:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	4413      	add	r3, r2
 80013da:	b29a      	uxth	r2, r3
 80013dc:	7ffb      	ldrb	r3, [r7, #31]
 80013de:	b212      	sxth	r2, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	f107 0120 	add.w	r1, r7, #32
 80013e6:	440b      	add	r3, r1
 80013e8:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80013ec:	7ffb      	ldrb	r3, [r7, #31]
 80013ee:	3301      	adds	r3, #1
 80013f0:	77fb      	strb	r3, [r7, #31]
 80013f2:	7ffb      	ldrb	r3, [r7, #31]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d9dc      	bls.n	80013b2 <LSM303AGR_AccReadXYZ+0xde>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 80013f8:	7d3b      	ldrb	r3, [r7, #20]
 80013fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80013fe:	2b30      	cmp	r3, #48	; 0x30
 8001400:	d013      	beq.n	800142a <LSM303AGR_AccReadXYZ+0x156>
 8001402:	2b30      	cmp	r3, #48	; 0x30
 8001404:	dc14      	bgt.n	8001430 <LSM303AGR_AccReadXYZ+0x15c>
 8001406:	2b20      	cmp	r3, #32
 8001408:	d00c      	beq.n	8001424 <LSM303AGR_AccReadXYZ+0x150>
 800140a:	2b20      	cmp	r3, #32
 800140c:	dc10      	bgt.n	8001430 <LSM303AGR_AccReadXYZ+0x15c>
 800140e:	2b00      	cmp	r3, #0
 8001410:	d002      	beq.n	8001418 <LSM303AGR_AccReadXYZ+0x144>
 8001412:	2b10      	cmp	r3, #16
 8001414:	d003      	beq.n	800141e <LSM303AGR_AccReadXYZ+0x14a>
 8001416:	e00b      	b.n	8001430 <LSM303AGR_AccReadXYZ+0x15c>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8001418:	2301      	movs	r3, #1
 800141a:	77bb      	strb	r3, [r7, #30]
    break;
 800141c:	e008      	b.n	8001430 <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 800141e:	2302      	movs	r3, #2
 8001420:	77bb      	strb	r3, [r7, #30]
    break;
 8001422:	e005      	b.n	8001430 <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 8001424:	2304      	movs	r3, #4
 8001426:	77bb      	strb	r3, [r7, #30]
    break;
 8001428:	e002      	b.n	8001430 <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 800142a:	230c      	movs	r3, #12
 800142c:	77bb      	strb	r3, [r7, #30]
    break;
 800142e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001430:	2300      	movs	r3, #0
 8001432:	77fb      	strb	r3, [r7, #31]
 8001434:	e015      	b.n	8001462 <LSM303AGR_AccReadXYZ+0x18e>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8001436:	7ffb      	ldrb	r3, [r7, #31]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	f107 0220 	add.w	r2, r7, #32
 800143e:	4413      	add	r3, r2
 8001440:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8001444:	b29a      	uxth	r2, r3
 8001446:	7fbb      	ldrb	r3, [r7, #30]
 8001448:	b29b      	uxth	r3, r3
 800144a:	fb12 f303 	smulbb	r3, r2, r3
 800144e:	b299      	uxth	r1, r3
 8001450:	7ffb      	ldrb	r3, [r7, #31]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	4413      	add	r3, r2
 8001458:	b20a      	sxth	r2, r1
 800145a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800145c:	7ffb      	ldrb	r3, [r7, #31]
 800145e:	3301      	adds	r3, #1
 8001460:	77fb      	strb	r3, [r7, #31]
 8001462:	7ffb      	ldrb	r3, [r7, #31]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d9e6      	bls.n	8001436 <LSM303AGR_AccReadXYZ+0x162>
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3720      	adds	r7, #32
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b084      	sub	sp, #16
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 800147c:	2300      	movs	r3, #0
 800147e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8001480:	2121      	movs	r1, #33	; 0x21
 8001482:	2032      	movs	r0, #50	; 0x32
 8001484:	f000 fba3 	bl	8001bce <COMPASSACCELERO_IO_Read>
 8001488:	4603      	mov	r3, r0
 800148a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	f023 0304 	bic.w	r3, r3, #4
 8001492:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001494:	7bfa      	ldrb	r2, [r7, #15]
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	4313      	orrs	r3, r2
 800149a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	461a      	mov	r2, r3
 80014a0:	2121      	movs	r1, #33	; 0x21
 80014a2:	2032      	movs	r0, #50	; 0x32
 80014a4:	f000 fb80 	bl	8001ba8 <COMPASSACCELERO_IO_Write>
}
 80014a8:	bf00      	nop
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80014ba:	2300      	movs	r3, #0
 80014bc:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 80014be:	2122      	movs	r1, #34	; 0x22
 80014c0:	2032      	movs	r0, #50	; 0x32
 80014c2:	f000 fb84 	bl	8001bce <COMPASSACCELERO_IO_Read>
 80014c6:	4603      	mov	r3, r0
 80014c8:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 80014ca:	7bfa      	ldrb	r2, [r7, #15]
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	461a      	mov	r2, r3
 80014d6:	2122      	movs	r1, #34	; 0x22
 80014d8:	2032      	movs	r0, #50	; 0x32
 80014da:	f000 fb65 	bl	8001ba8 <COMPASSACCELERO_IO_Write>
}
 80014de:	bf00      	nop
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b084      	sub	sp, #16
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80014f0:	2300      	movs	r3, #0
 80014f2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 80014f4:	2138      	movs	r1, #56	; 0x38
 80014f6:	2032      	movs	r0, #50	; 0x32
 80014f8:	f000 fb69 	bl	8001bce <COMPASSACCELERO_IO_Read>
 80014fc:	4603      	mov	r3, r0
 80014fe:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8001500:	7bfa      	ldrb	r2, [r7, #15]
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	4313      	orrs	r3, r2
 8001506:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	461a      	mov	r2, r3
 800150c:	2138      	movs	r1, #56	; 0x38
 800150e:	2032      	movs	r0, #50	; 0x32
 8001510:	f000 fb4a 	bl	8001ba8 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8001514:	230a      	movs	r3, #10
 8001516:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	461a      	mov	r2, r3
 800151c:	213a      	movs	r1, #58	; 0x3a
 800151e:	2032      	movs	r0, #50	; 0x32
 8001520:	f000 fb42 	bl	8001ba8 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8001524:	2305      	movs	r3, #5
 8001526:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	461a      	mov	r2, r3
 800152c:	213b      	movs	r1, #59	; 0x3b
 800152e:	2032      	movs	r0, #50	; 0x32
 8001530:	f000 fb3a 	bl	8001ba8 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	461a      	mov	r2, r3
 8001538:	213c      	movs	r1, #60	; 0x3c
 800153a:	2032      	movs	r0, #50	; 0x32
 800153c:	f000 fb34 	bl	8001ba8 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8001540:	2332      	movs	r3, #50	; 0x32
 8001542:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	461a      	mov	r2, r3
 8001548:	213d      	movs	r1, #61	; 0x3d
 800154a:	2032      	movs	r0, #50	; 0x32
 800154c:	f000 fb2c 	bl	8001ba8 <COMPASSACCELERO_IO_Write>
}
 8001550:	bf00      	nop
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 800155c:	f000 faf4 	bl	8001b48 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 8001560:	2080      	movs	r0, #128	; 0x80
 8001562:	f7ff ffa5 	bl	80014b0 <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 8001566:	2004      	movs	r0, #4
 8001568:	f7ff ff83 	bl	8001472 <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 800156c:	2010      	movs	r0, #16
 800156e:	f7ff ffba 	bl	80014e6 <LSM303AGR_AccClickITEnable>
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}

08001576 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8001576:	b580      	push	{r7, lr}
 8001578:	b084      	sub	sp, #16
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001580:	2300      	movs	r3, #0
 8001582:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8001584:	f000 fab8 	bl	8001af8 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001588:	88fb      	ldrh	r3, [r7, #6]
 800158a:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	461a      	mov	r2, r3
 8001590:	2120      	movs	r1, #32
 8001592:	2032      	movs	r0, #50	; 0x32
 8001594:	f000 fb08 	bl	8001ba8 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8001598:	2300      	movs	r3, #0
 800159a:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	461a      	mov	r2, r3
 80015a0:	2123      	movs	r1, #35	; 0x23
 80015a2:	2032      	movs	r0, #50	; 0x32
 80015a4:	f000 fb00 	bl	8001ba8 <COMPASSACCELERO_IO_Write>
}
 80015a8:	bf00      	nop
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80015c4:	2300      	movs	r3, #0
 80015c6:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 80015c8:	f000 fa96 	bl	8001af8 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 80015cc:	210f      	movs	r1, #15
 80015ce:	2032      	movs	r0, #50	; 0x32
 80015d0:	f000 fafd 	bl	8001bce <COMPASSACCELERO_IO_Read>
 80015d4:	4603      	mov	r3, r0
 80015d6:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80015d8:	79fb      	ldrb	r3, [r7, #7]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80015e8:	2124      	movs	r1, #36	; 0x24
 80015ea:	2032      	movs	r0, #50	; 0x32
 80015ec:	f000 faef 	bl	8001bce <COMPASSACCELERO_IO_Read>
 80015f0:	4603      	mov	r3, r0
 80015f2:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015fa:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	461a      	mov	r2, r3
 8001600:	2124      	movs	r1, #36	; 0x24
 8001602:	2032      	movs	r0, #50	; 0x32
 8001604:	f000 fad0 	bl	8001ba8 <COMPASSACCELERO_IO_Write>
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800161a:	2121      	movs	r1, #33	; 0x21
 800161c:	2032      	movs	r0, #50	; 0x32
 800161e:	f000 fad6 	bl	8001bce <COMPASSACCELERO_IO_Read>
 8001622:	4603      	mov	r3, r0
 8001624:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	f003 030c 	and.w	r3, r3, #12
 800162c:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 800162e:	7bfa      	ldrb	r2, [r7, #15]
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	4313      	orrs	r3, r2
 8001634:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	461a      	mov	r2, r3
 800163a:	2121      	movs	r1, #33	; 0x21
 800163c:	2032      	movs	r0, #50	; 0x32
 800163e:	f000 fab3 	bl	8001ba8 <COMPASSACCELERO_IO_Write>
}
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001654:	2121      	movs	r1, #33	; 0x21
 8001656:	2032      	movs	r0, #50	; 0x32
 8001658:	f000 fab9 	bl	8001bce <COMPASSACCELERO_IO_Read>
 800165c:	4603      	mov	r3, r0
 800165e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	f023 0308 	bic.w	r3, r3, #8
 8001666:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001668:	7bfa      	ldrb	r2, [r7, #15]
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	4313      	orrs	r3, r2
 800166e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001670:	7bfb      	ldrb	r3, [r7, #15]
 8001672:	461a      	mov	r2, r3
 8001674:	2121      	movs	r1, #33	; 0x21
 8001676:	2032      	movs	r0, #50	; 0x32
 8001678:	f000 fa96 	bl	8001ba8 <COMPASSACCELERO_IO_Write>
}
 800167c:	bf00      	nop
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 800168c:	2300      	movs	r3, #0
 800168e:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8001694:	2301      	movs	r3, #1
 8001696:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8001698:	2123      	movs	r1, #35	; 0x23
 800169a:	2032      	movs	r0, #50	; 0x32
 800169c:	f000 fa97 	bl	8001bce <COMPASSACCELERO_IO_Read>
 80016a0:	4603      	mov	r3, r0
 80016a2:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80016a4:	2124      	movs	r1, #36	; 0x24
 80016a6:	2032      	movs	r0, #50	; 0x32
 80016a8:	f000 fa91 	bl	8001bce <COMPASSACCELERO_IO_Read>
 80016ac:	4603      	mov	r3, r0
 80016ae:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 80016b0:	2128      	movs	r1, #40	; 0x28
 80016b2:	2032      	movs	r0, #50	; 0x32
 80016b4:	f000 fa8b 	bl	8001bce <COMPASSACCELERO_IO_Read>
 80016b8:	4603      	mov	r3, r0
 80016ba:	b25b      	sxtb	r3, r3
 80016bc:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 80016be:	2129      	movs	r1, #41	; 0x29
 80016c0:	2032      	movs	r0, #50	; 0x32
 80016c2:	f000 fa84 	bl	8001bce <COMPASSACCELERO_IO_Read>
 80016c6:	4603      	mov	r3, r0
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 80016cc:	212a      	movs	r1, #42	; 0x2a
 80016ce:	2032      	movs	r0, #50	; 0x32
 80016d0:	f000 fa7d 	bl	8001bce <COMPASSACCELERO_IO_Read>
 80016d4:	4603      	mov	r3, r0
 80016d6:	b25b      	sxtb	r3, r3
 80016d8:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 80016da:	212b      	movs	r1, #43	; 0x2b
 80016dc:	2032      	movs	r0, #50	; 0x32
 80016de:	f000 fa76 	bl	8001bce <COMPASSACCELERO_IO_Read>
 80016e2:	4603      	mov	r3, r0
 80016e4:	b25b      	sxtb	r3, r3
 80016e6:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 80016e8:	212c      	movs	r1, #44	; 0x2c
 80016ea:	2032      	movs	r0, #50	; 0x32
 80016ec:	f000 fa6f 	bl	8001bce <COMPASSACCELERO_IO_Read>
 80016f0:	4603      	mov	r3, r0
 80016f2:	b25b      	sxtb	r3, r3
 80016f4:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 80016f6:	212d      	movs	r1, #45	; 0x2d
 80016f8:	2032      	movs	r0, #50	; 0x32
 80016fa:	f000 fa68 	bl	8001bce <COMPASSACCELERO_IO_Read>
 80016fe:	4603      	mov	r3, r0
 8001700:	b25b      	sxtb	r3, r3
 8001702:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8001704:	7d3b      	ldrb	r3, [r7, #20]
 8001706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800170a:	2b00      	cmp	r3, #0
 800170c:	d126      	bne.n	800175c <LSM303DLHC_AccReadXYZ+0xd8>
  {
    for(i=0; i<3; i++)
 800170e:	2300      	movs	r3, #0
 8001710:	77fb      	strb	r3, [r7, #31]
 8001712:	e01f      	b.n	8001754 <LSM303DLHC_AccReadXYZ+0xd0>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8001714:	7ffb      	ldrb	r3, [r7, #31]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	3301      	adds	r3, #1
 800171a:	f107 0220 	add.w	r2, r7, #32
 800171e:	4413      	add	r3, r2
 8001720:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001724:	b29b      	uxth	r3, r3
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	b29a      	uxth	r2, r3
 800172a:	7ffb      	ldrb	r3, [r7, #31]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	f107 0120 	add.w	r1, r7, #32
 8001732:	440b      	add	r3, r1
 8001734:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001738:	b29b      	uxth	r3, r3
 800173a:	4413      	add	r3, r2
 800173c:	b29a      	uxth	r2, r3
 800173e:	7ffb      	ldrb	r3, [r7, #31]
 8001740:	b212      	sxth	r2, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	f107 0120 	add.w	r1, r7, #32
 8001748:	440b      	add	r3, r1
 800174a:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 800174e:	7ffb      	ldrb	r3, [r7, #31]
 8001750:	3301      	adds	r3, #1
 8001752:	77fb      	strb	r3, [r7, #31]
 8001754:	7ffb      	ldrb	r3, [r7, #31]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d9dc      	bls.n	8001714 <LSM303DLHC_AccReadXYZ+0x90>
 800175a:	e025      	b.n	80017a8 <LSM303DLHC_AccReadXYZ+0x124>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 800175c:	2300      	movs	r3, #0
 800175e:	77fb      	strb	r3, [r7, #31]
 8001760:	e01f      	b.n	80017a2 <LSM303DLHC_AccReadXYZ+0x11e>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8001762:	7ffb      	ldrb	r3, [r7, #31]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	f107 0220 	add.w	r2, r7, #32
 800176a:	4413      	add	r3, r2
 800176c:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001770:	b29b      	uxth	r3, r3
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	b29a      	uxth	r2, r3
 8001776:	7ffb      	ldrb	r3, [r7, #31]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	3301      	adds	r3, #1
 800177c:	f107 0120 	add.w	r1, r7, #32
 8001780:	440b      	add	r3, r1
 8001782:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001786:	b29b      	uxth	r3, r3
 8001788:	4413      	add	r3, r2
 800178a:	b29a      	uxth	r2, r3
 800178c:	7ffb      	ldrb	r3, [r7, #31]
 800178e:	b212      	sxth	r2, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	f107 0120 	add.w	r1, r7, #32
 8001796:	440b      	add	r3, r1
 8001798:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 800179c:	7ffb      	ldrb	r3, [r7, #31]
 800179e:	3301      	adds	r3, #1
 80017a0:	77fb      	strb	r3, [r7, #31]
 80017a2:	7ffb      	ldrb	r3, [r7, #31]
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d9dc      	bls.n	8001762 <LSM303DLHC_AccReadXYZ+0xde>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 80017a8:	7d3b      	ldrb	r3, [r7, #20]
 80017aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80017ae:	2b30      	cmp	r3, #48	; 0x30
 80017b0:	d013      	beq.n	80017da <LSM303DLHC_AccReadXYZ+0x156>
 80017b2:	2b30      	cmp	r3, #48	; 0x30
 80017b4:	dc14      	bgt.n	80017e0 <LSM303DLHC_AccReadXYZ+0x15c>
 80017b6:	2b20      	cmp	r3, #32
 80017b8:	d00c      	beq.n	80017d4 <LSM303DLHC_AccReadXYZ+0x150>
 80017ba:	2b20      	cmp	r3, #32
 80017bc:	dc10      	bgt.n	80017e0 <LSM303DLHC_AccReadXYZ+0x15c>
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d002      	beq.n	80017c8 <LSM303DLHC_AccReadXYZ+0x144>
 80017c2:	2b10      	cmp	r3, #16
 80017c4:	d003      	beq.n	80017ce <LSM303DLHC_AccReadXYZ+0x14a>
 80017c6:	e00b      	b.n	80017e0 <LSM303DLHC_AccReadXYZ+0x15c>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 80017c8:	2301      	movs	r3, #1
 80017ca:	77bb      	strb	r3, [r7, #30]
    break;
 80017cc:	e008      	b.n	80017e0 <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 80017ce:	2302      	movs	r3, #2
 80017d0:	77bb      	strb	r3, [r7, #30]
    break;
 80017d2:	e005      	b.n	80017e0 <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 80017d4:	2304      	movs	r3, #4
 80017d6:	77bb      	strb	r3, [r7, #30]
    break;
 80017d8:	e002      	b.n	80017e0 <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 80017da:	230c      	movs	r3, #12
 80017dc:	77bb      	strb	r3, [r7, #30]
    break;
 80017de:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80017e0:	2300      	movs	r3, #0
 80017e2:	77fb      	strb	r3, [r7, #31]
 80017e4:	e015      	b.n	8001812 <LSM303DLHC_AccReadXYZ+0x18e>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 80017e6:	7ffb      	ldrb	r3, [r7, #31]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	f107 0220 	add.w	r2, r7, #32
 80017ee:	4413      	add	r3, r2
 80017f0:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	7fbb      	ldrb	r3, [r7, #30]
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	fb12 f303 	smulbb	r3, r2, r3
 80017fe:	b299      	uxth	r1, r3
 8001800:	7ffb      	ldrb	r3, [r7, #31]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	4413      	add	r3, r2
 8001808:	b20a      	sxth	r2, r1
 800180a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800180c:	7ffb      	ldrb	r3, [r7, #31]
 800180e:	3301      	adds	r3, #1
 8001810:	77fb      	strb	r3, [r7, #31]
 8001812:	7ffb      	ldrb	r3, [r7, #31]
 8001814:	2b02      	cmp	r3, #2
 8001816:	d9e6      	bls.n	80017e6 <LSM303DLHC_AccReadXYZ+0x162>
  }
}
 8001818:	bf00      	nop
 800181a:	bf00      	nop
 800181c:	3720      	adds	r7, #32
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b084      	sub	sp, #16
 8001826:	af00      	add	r7, sp, #0
 8001828:	4603      	mov	r3, r0
 800182a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 800182c:	2300      	movs	r3, #0
 800182e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001830:	2121      	movs	r1, #33	; 0x21
 8001832:	2032      	movs	r0, #50	; 0x32
 8001834:	f000 f9cb 	bl	8001bce <COMPASSACCELERO_IO_Read>
 8001838:	4603      	mov	r3, r0
 800183a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	f023 0304 	bic.w	r3, r3, #4
 8001842:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001844:	7bfa      	ldrb	r2, [r7, #15]
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	4313      	orrs	r3, r2
 800184a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800184c:	7bfb      	ldrb	r3, [r7, #15]
 800184e:	461a      	mov	r2, r3
 8001850:	2121      	movs	r1, #33	; 0x21
 8001852:	2032      	movs	r0, #50	; 0x32
 8001854:	f000 f9a8 	bl	8001ba8 <COMPASSACCELERO_IO_Write>
}
 8001858:	bf00      	nop
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 800186a:	2300      	movs	r3, #0
 800186c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 800186e:	2122      	movs	r1, #34	; 0x22
 8001870:	2032      	movs	r0, #50	; 0x32
 8001872:	f000 f9ac 	bl	8001bce <COMPASSACCELERO_IO_Read>
 8001876:	4603      	mov	r3, r0
 8001878:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 800187a:	7bfa      	ldrb	r2, [r7, #15]
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	4313      	orrs	r3, r2
 8001880:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	461a      	mov	r2, r3
 8001886:	2122      	movs	r1, #34	; 0x22
 8001888:	2032      	movs	r0, #50	; 0x32
 800188a:	f000 f98d 	bl	8001ba8 <COMPASSACCELERO_IO_Write>
}
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8001896:	b580      	push	{r7, lr}
 8001898:	b084      	sub	sp, #16
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80018a0:	2300      	movs	r3, #0
 80018a2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 80018a4:	2138      	movs	r1, #56	; 0x38
 80018a6:	2032      	movs	r0, #50	; 0x32
 80018a8:	f000 f991 	bl	8001bce <COMPASSACCELERO_IO_Read>
 80018ac:	4603      	mov	r3, r0
 80018ae:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 80018b0:	7bfa      	ldrb	r2, [r7, #15]
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	461a      	mov	r2, r3
 80018bc:	2138      	movs	r1, #56	; 0x38
 80018be:	2032      	movs	r0, #50	; 0x32
 80018c0:	f000 f972 	bl	8001ba8 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 80018c4:	230a      	movs	r3, #10
 80018c6:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	461a      	mov	r2, r3
 80018cc:	213a      	movs	r1, #58	; 0x3a
 80018ce:	2032      	movs	r0, #50	; 0x32
 80018d0:	f000 f96a 	bl	8001ba8 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 80018d4:	2305      	movs	r3, #5
 80018d6:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	461a      	mov	r2, r3
 80018dc:	213b      	movs	r1, #59	; 0x3b
 80018de:	2032      	movs	r0, #50	; 0x32
 80018e0:	f000 f962 	bl	8001ba8 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	461a      	mov	r2, r3
 80018e8:	213c      	movs	r1, #60	; 0x3c
 80018ea:	2032      	movs	r0, #50	; 0x32
 80018ec:	f000 f95c 	bl	8001ba8 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 80018f0:	2332      	movs	r3, #50	; 0x32
 80018f2:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	461a      	mov	r2, r3
 80018f8:	213d      	movs	r1, #61	; 0x3d
 80018fa:	2032      	movs	r0, #50	; 0x32
 80018fc:	f000 f954 	bl	8001ba8 <COMPASSACCELERO_IO_Write>
}
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 800190c:	f000 f91c 	bl	8001b48 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8001910:	2080      	movs	r0, #128	; 0x80
 8001912:	f7ff ffa5 	bl	8001860 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8001916:	2004      	movs	r0, #4
 8001918:	f7ff ff83 	bl	8001822 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 800191c:	2010      	movs	r0, #16
 800191e:	f7ff ffba 	bl	8001896 <LSM303DLHC_AccClickITEnable>
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800192c:	4814      	ldr	r0, [pc, #80]	; (8001980 <I2Cx_Init+0x58>)
 800192e:	f001 fb0d 	bl	8002f4c <HAL_I2C_GetState>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d121      	bne.n	800197c <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <I2Cx_Init+0x58>)
 800193a:	4a12      	ldr	r2, [pc, #72]	; (8001984 <I2Cx_Init+0x5c>)
 800193c:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <I2Cx_Init+0x58>)
 8001940:	2243      	movs	r2, #67	; 0x43
 8001942:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8001944:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <I2Cx_Init+0x58>)
 8001946:	4a10      	ldr	r2, [pc, #64]	; (8001988 <I2Cx_Init+0x60>)
 8001948:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800194a:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <I2Cx_Init+0x58>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001950:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <I2Cx_Init+0x58>)
 8001952:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001956:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <I2Cx_Init+0x58>)
 800195a:	2200      	movs	r2, #0
 800195c:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <I2Cx_Init+0x58>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <I2Cx_Init+0x58>)
 8001966:	2200      	movs	r2, #0
 8001968:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 800196a:	4b05      	ldr	r3, [pc, #20]	; (8001980 <I2Cx_Init+0x58>)
 800196c:	2200      	movs	r2, #0
 800196e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8001970:	4803      	ldr	r0, [pc, #12]	; (8001980 <I2Cx_Init+0x58>)
 8001972:	f000 f86b 	bl	8001a4c <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8001976:	4802      	ldr	r0, [pc, #8]	; (8001980 <I2Cx_Init+0x58>)
 8001978:	f000 fe54 	bl	8002624 <HAL_I2C_Init>
  }
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}
 8001980:	200004a4 	.word	0x200004a4
 8001984:	40005400 	.word	0x40005400
 8001988:	000186a0 	.word	0x000186a0

0800198c <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af04      	add	r7, sp, #16
 8001992:	4603      	mov	r3, r0
 8001994:	80fb      	strh	r3, [r7, #6]
 8001996:	460b      	mov	r3, r1
 8001998:	717b      	strb	r3, [r7, #5]
 800199a:	4613      	mov	r3, r2
 800199c:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800199e:	2300      	movs	r3, #0
 80019a0:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 80019a2:	797b      	ldrb	r3, [r7, #5]
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <I2Cx_WriteData+0x48>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	88f9      	ldrh	r1, [r7, #6]
 80019ac:	9302      	str	r3, [sp, #8]
 80019ae:	2301      	movs	r3, #1
 80019b0:	9301      	str	r3, [sp, #4]
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	2301      	movs	r3, #1
 80019b8:	4807      	ldr	r0, [pc, #28]	; (80019d8 <I2Cx_WriteData+0x4c>)
 80019ba:	f000 ffa7 	bl	800290c <HAL_I2C_Mem_Write>
 80019be:	4603      	mov	r3, r0
 80019c0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 80019c8:	f000 f834 	bl	8001a34 <I2Cx_Error>
  }
}
 80019cc:	bf00      	nop
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000074 	.word	0x20000074
 80019d8:	200004a4 	.word	0x200004a4

080019dc <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af04      	add	r7, sp, #16
 80019e2:	4603      	mov	r3, r0
 80019e4:	460a      	mov	r2, r1
 80019e6:	80fb      	strh	r3, [r7, #6]
 80019e8:	4613      	mov	r3, r2
 80019ea:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80019ec:	2300      	movs	r3, #0
 80019ee:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80019f4:	797b      	ldrb	r3, [r7, #5]
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <I2Cx_ReadData+0x50>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	88f9      	ldrh	r1, [r7, #6]
 80019fe:	9302      	str	r3, [sp, #8]
 8001a00:	2301      	movs	r3, #1
 8001a02:	9301      	str	r3, [sp, #4]
 8001a04:	f107 030e 	add.w	r3, r7, #14
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	4808      	ldr	r0, [pc, #32]	; (8001a30 <I2Cx_ReadData+0x54>)
 8001a0e:	f001 f877 	bl	8002b00 <HAL_I2C_Mem_Read>
 8001a12:	4603      	mov	r3, r0
 8001a14:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8001a1c:	f000 f80a 	bl	8001a34 <I2Cx_Error>
  }
  return value;
 8001a20:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000074 	.word	0x20000074
 8001a30:	200004a4 	.word	0x200004a4

08001a34 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8001a38:	4803      	ldr	r0, [pc, #12]	; (8001a48 <I2Cx_Error+0x14>)
 8001a3a:	f000 ff37 	bl	80028ac <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8001a3e:	f7ff ff73 	bl	8001928 <I2Cx_Init>
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200004a4 	.word	0x200004a4

08001a4c <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	; 0x28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 8001a54:	2300      	movs	r3, #0
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	4b25      	ldr	r3, [pc, #148]	; (8001af0 <I2Cx_MspInit+0xa4>)
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	4a24      	ldr	r2, [pc, #144]	; (8001af0 <I2Cx_MspInit+0xa4>)
 8001a5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a62:	6413      	str	r3, [r2, #64]	; 0x40
 8001a64:	4b22      	ldr	r3, [pc, #136]	; (8001af0 <I2Cx_MspInit+0xa4>)
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <I2Cx_MspInit+0xa4>)
 8001a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a78:	4a1d      	ldr	r2, [pc, #116]	; (8001af0 <I2Cx_MspInit+0xa4>)
 8001a7a:	f043 0302 	orr.w	r3, r3, #2
 8001a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a80:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <I2Cx_MspInit+0xa4>)
 8001a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 8001a8c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8001a92:	2312      	movs	r3, #18
 8001a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8001a9e:	2304      	movs	r3, #4
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4812      	ldr	r0, [pc, #72]	; (8001af4 <I2Cx_MspInit+0xa8>)
 8001aaa:	f000 fb39 	bl	8002120 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <I2Cx_MspInit+0xa4>)
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	4a0f      	ldr	r2, [pc, #60]	; (8001af0 <I2Cx_MspInit+0xa4>)
 8001ab4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ab8:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001aba:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <I2Cx_MspInit+0xa4>)
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	4a0c      	ldr	r2, [pc, #48]	; (8001af0 <I2Cx_MspInit+0xa4>)
 8001ac0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ac4:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	210f      	movs	r1, #15
 8001aca:	201f      	movs	r0, #31
 8001acc:	f000 faf1 	bl	80020b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001ad0:	201f      	movs	r0, #31
 8001ad2:	f000 fb0a 	bl	80020ea <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	210f      	movs	r1, #15
 8001ada:	2020      	movs	r0, #32
 8001adc:	f000 fae9 	bl	80020b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8001ae0:	2020      	movs	r0, #32
 8001ae2:	f000 fb02 	bl	80020ea <HAL_NVIC_EnableIRQ>
}
 8001ae6:	bf00      	nop
 8001ae8:	3728      	adds	r7, #40	; 0x28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020400 	.word	0x40020400

08001af8 <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	603b      	str	r3, [r7, #0]
 8001b02:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <COMPASSACCELERO_IO_Init+0x48>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <COMPASSACCELERO_IO_Init+0x48>)
 8001b08:	f043 0310 	orr.w	r3, r3, #16
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <COMPASSACCELERO_IO_Init+0x48>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0310 	and.w	r3, r3, #16
 8001b16:	603b      	str	r3, [r7, #0]
 8001b18:	683b      	ldr	r3, [r7, #0]
  
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001b26:	2302      	movs	r3, #2
 8001b28:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4805      	ldr	r0, [pc, #20]	; (8001b44 <COMPASSACCELERO_IO_Init+0x4c>)
 8001b30:	f000 faf6 	bl	8002120 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8001b34:	f7ff fef8 	bl	8001928 <I2Cx_Init>
}
 8001b38:	bf00      	nop
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40021000 	.word	0x40021000

08001b48 <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	603b      	str	r3, [r7, #0]
 8001b52:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8001b58:	f043 0310 	orr.w	r3, r3, #16
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0310 	and.w	r3, r3, #16
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8001b6a:	2330      	movs	r3, #48	; 0x30
 8001b6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8001b6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001b74:	2302      	movs	r3, #2
 8001b76:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4808      	ldr	r0, [pc, #32]	; (8001ba4 <COMPASSACCELERO_IO_ITConfig+0x5c>)
 8001b82:	f000 facd 	bl	8002120 <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 8001b86:	2200      	movs	r2, #0
 8001b88:	210f      	movs	r1, #15
 8001b8a:	200a      	movs	r0, #10
 8001b8c:	f000 fa91 	bl	80020b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8001b90:	200a      	movs	r0, #10
 8001b92:	f000 faaa 	bl	80020ea <HAL_NVIC_EnableIRQ>
}
 8001b96:	bf00      	nop
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40021000 	.word	0x40021000

08001ba8 <COMPASSACCELERO_IO_Write>:
  * @param  DeviceAddr: the slave address to be programmed
  * @param  RegisterAddr: the COMPASS / ACCELERO register to be written
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	80fb      	strh	r3, [r7, #6]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	717b      	strb	r3, [r7, #5]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	713b      	strb	r3, [r7, #4]
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 8001bba:	793a      	ldrb	r2, [r7, #4]
 8001bbc:	7979      	ldrb	r1, [r7, #5]
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fee3 	bl	800198c <I2Cx_WriteData>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr: the COMPASS / ACCELERO internal address register to read from
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	460a      	mov	r2, r1
 8001bd8:	80fb      	strh	r3, [r7, #6]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	717b      	strb	r3, [r7, #5]
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8001bde:	797a      	ldrb	r2, [r7, #5]
 8001be0:	88fb      	ldrh	r3, [r7, #6]
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fef9 	bl	80019dc <I2Cx_ReadData>
 8001bea:	4603      	mov	r3, r0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 8001c0a:	4b58      	ldr	r3, [pc, #352]	; (8001d6c <BSP_ACCELERO_Init+0x178>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	4798      	blx	r3
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b33      	cmp	r3, #51	; 0x33
 8001c14:	d14f      	bne.n	8001cb6 <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8001c16:	4b56      	ldr	r3, [pc, #344]	; (8001d70 <BSP_ACCELERO_Init+0x17c>)
 8001c18:	4a54      	ldr	r2, [pc, #336]	; (8001d6c <BSP_ACCELERO_Init+0x178>)
 8001c1a:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 8001c20:	2340      	movs	r3, #64	; 0x40
 8001c22:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 8001c24:	2307      	movs	r3, #7
 8001c26:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 8001c30:	2300      	movs	r3, #0
 8001c32:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 8001c34:	2308      	movs	r3, #8
 8001c36:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8001c38:	7b3a      	ldrb	r2, [r7, #12]
 8001c3a:	7b7b      	ldrb	r3, [r7, #13]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8001c40:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8001c42:	4313      	orrs	r3, r2
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	8abb      	ldrh	r3, [r7, #20]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8001c4e:	7c3a      	ldrb	r2, [r7, #16]
 8001c50:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8001c52:	4313      	orrs	r3, r2
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	7cbb      	ldrb	r3, [r7, #18]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8001c64:	b21a      	sxth	r2, r3
 8001c66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	b21b      	sxth	r3, r3
 8001c6e:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001c70:	4b3f      	ldr	r3, [pc, #252]	; (8001d70 <BSP_ACCELERO_Init+0x17c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	8aba      	ldrh	r2, [r7, #20]
 8001c78:	4610      	mov	r0, r2
 8001c7a:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 8001c80:	2310      	movs	r3, #16
 8001c82:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001c8c:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8001c8e:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001c90:	4313      	orrs	r3, r2
 8001c92:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8001c94:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001c96:	4313      	orrs	r3, r2
 8001c98:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8001ca2:	4b33      	ldr	r3, [pc, #204]	; (8001d70 <BSP_ACCELERO_Init+0x17c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	8aba      	ldrh	r2, [r7, #20]
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	4610      	mov	r0, r2
 8001cae:	4798      	blx	r3

    ret = ACCELERO_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	75fb      	strb	r3, [r7, #23]
 8001cb4:	e054      	b.n	8001d60 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 8001cb6:	4b2f      	ldr	r3, [pc, #188]	; (8001d74 <BSP_ACCELERO_Init+0x180>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	4798      	blx	r3
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b33      	cmp	r3, #51	; 0x33
 8001cc0:	d14e      	bne.n	8001d60 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 8001cc2:	4b2b      	ldr	r3, [pc, #172]	; (8001d70 <BSP_ACCELERO_Init+0x17c>)
 8001cc4:	4a2b      	ldr	r2, [pc, #172]	; (8001d74 <BSP_ACCELERO_Init+0x180>)
 8001cc6:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 8001ccc:	2340      	movs	r3, #64	; 0x40
 8001cce:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 8001cd0:	2307      	movs	r3, #7
 8001cd2:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 8001ce0:	2308      	movs	r3, #8
 8001ce2:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8001ce4:	7b3a      	ldrb	r2, [r7, #12]
 8001ce6:	7b7b      	ldrb	r3, [r7, #13]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8001cec:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	8abb      	ldrh	r3, [r7, #20]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8001cfa:	7c3a      	ldrb	r2, [r7, #16]
 8001cfc:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	7cbb      	ldrb	r3, [r7, #18]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8001d10:	b21a      	sxth	r2, r3
 8001d12:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	b21b      	sxth	r3, r3
 8001d1a:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001d1c:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <BSP_ACCELERO_Init+0x17c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	8aba      	ldrh	r2, [r7, #20]
 8001d24:	4610      	mov	r0, r2
 8001d26:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 8001d2c:	2310      	movs	r3, #16
 8001d2e:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001d38:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8001d3a:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8001d40:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001d42:	4313      	orrs	r3, r2
 8001d44:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8001d46:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <BSP_ACCELERO_Init+0x17c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d54:	8aba      	ldrh	r2, [r7, #20]
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4798      	blx	r3

    ret = ACCELERO_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8001d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000040 	.word	0x20000040
 8001d70:	200004f8 	.word	0x200004f8
 8001d74:	2000000c 	.word	0x2000000c

08001d78 <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	81fb      	strh	r3, [r7, #14]

  if(AccelerometerDrv->GetXYZ!= NULL)
 8001d84:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <BSP_ACCELERO_GetXYZ+0x50>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d018      	beq.n	8001dc0 <BSP_ACCELERO_GetXYZ+0x48>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <BSP_ACCELERO_GetXYZ+0x50>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	4798      	blx	r3

    /* Switch X and Y Axes in case of LSM303DLHC MEMS */
    if(AccelerometerDrv == &Lsm303dlhcDrv)
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <BSP_ACCELERO_GetXYZ+0x50>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a0b      	ldr	r2, [pc, #44]	; (8001dcc <BSP_ACCELERO_GetXYZ+0x54>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d10e      	bne.n	8001dc0 <BSP_ACCELERO_GetXYZ+0x48>
    {
      SwitchXY  = pDataXYZ[0];
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	801a      	strh	r2, [r3, #0]

      /* Invert Y Axis to be conpliant with LIS3DSH */
      pDataXYZ[1] = -SwitchXY;
 8001db2:	89fb      	ldrh	r3, [r7, #14]
 8001db4:	425b      	negs	r3, r3
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3302      	adds	r3, #2
 8001dbc:	b212      	sxth	r2, r2
 8001dbe:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	200004f8 	.word	0x200004f8
 8001dcc:	20000040 	.word	0x20000040

08001dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <HAL_Init+0x40>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0d      	ldr	r2, [pc, #52]	; (8001e10 <HAL_Init+0x40>)
 8001dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_Init+0x40>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <HAL_Init+0x40>)
 8001de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <HAL_Init+0x40>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a07      	ldr	r2, [pc, #28]	; (8001e10 <HAL_Init+0x40>)
 8001df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df8:	2003      	movs	r0, #3
 8001dfa:	f000 f94f 	bl	800209c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dfe:	200f      	movs	r0, #15
 8001e00:	f000 f808 	bl	8001e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e04:	f7ff f846 	bl	8000e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023c00 	.word	0x40023c00

08001e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e1c:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <HAL_InitTick+0x54>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_InitTick+0x58>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	4619      	mov	r1, r3
 8001e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 f967 	bl	8002106 <HAL_SYSTICK_Config>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e00e      	b.n	8001e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b0f      	cmp	r3, #15
 8001e46:	d80a      	bhi.n	8001e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e50:	f000 f92f 	bl	80020b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e54:	4a06      	ldr	r2, [pc, #24]	; (8001e70 <HAL_InitTick+0x5c>)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	e000      	b.n	8001e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000008 	.word	0x20000008
 8001e6c:	2000007c 	.word	0x2000007c
 8001e70:	20000078 	.word	0x20000078

08001e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_IncTick+0x20>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_IncTick+0x24>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4413      	add	r3, r2
 8001e84:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <HAL_IncTick+0x24>)
 8001e86:	6013      	str	r3, [r2, #0]
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	2000007c 	.word	0x2000007c
 8001e98:	200005fc 	.word	0x200005fc

08001e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea0:	4b03      	ldr	r3, [pc, #12]	; (8001eb0 <HAL_GetTick+0x14>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	200005fc 	.word	0x200005fc

08001eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ebc:	f7ff ffee 	bl	8001e9c <HAL_GetTick>
 8001ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ecc:	d005      	beq.n	8001eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <HAL_Delay+0x44>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eda:	bf00      	nop
 8001edc:	f7ff ffde 	bl	8001e9c <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d8f7      	bhi.n	8001edc <HAL_Delay+0x28>
  {
  }
}
 8001eec:	bf00      	nop
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	2000007c 	.word	0x2000007c

08001efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <__NVIC_SetPriorityGrouping+0x44>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f2e:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <__NVIC_SetPriorityGrouping+0x44>)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	60d3      	str	r3, [r2, #12]
}
 8001f34:	bf00      	nop
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <__NVIC_GetPriorityGrouping+0x18>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	0a1b      	lsrs	r3, r3, #8
 8001f4e:	f003 0307 	and.w	r3, r3, #7
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	db0b      	blt.n	8001f8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	f003 021f 	and.w	r2, r3, #31
 8001f78:	4907      	ldr	r1, [pc, #28]	; (8001f98 <__NVIC_EnableIRQ+0x38>)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	095b      	lsrs	r3, r3, #5
 8001f80:	2001      	movs	r0, #1
 8001f82:	fa00 f202 	lsl.w	r2, r0, r2
 8001f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000e100 	.word	0xe000e100

08001f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	6039      	str	r1, [r7, #0]
 8001fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	db0a      	blt.n	8001fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	490c      	ldr	r1, [pc, #48]	; (8001fe8 <__NVIC_SetPriority+0x4c>)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	0112      	lsls	r2, r2, #4
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc4:	e00a      	b.n	8001fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	4908      	ldr	r1, [pc, #32]	; (8001fec <__NVIC_SetPriority+0x50>)
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	3b04      	subs	r3, #4
 8001fd4:	0112      	lsls	r2, r2, #4
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	440b      	add	r3, r1
 8001fda:	761a      	strb	r2, [r3, #24]
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000e100 	.word	0xe000e100
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b089      	sub	sp, #36	; 0x24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f1c3 0307 	rsb	r3, r3, #7
 800200a:	2b04      	cmp	r3, #4
 800200c:	bf28      	it	cs
 800200e:	2304      	movcs	r3, #4
 8002010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3304      	adds	r3, #4
 8002016:	2b06      	cmp	r3, #6
 8002018:	d902      	bls.n	8002020 <NVIC_EncodePriority+0x30>
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3b03      	subs	r3, #3
 800201e:	e000      	b.n	8002022 <NVIC_EncodePriority+0x32>
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002024:	f04f 32ff 	mov.w	r2, #4294967295
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43da      	mvns	r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	401a      	ands	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002038:	f04f 31ff 	mov.w	r1, #4294967295
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	fa01 f303 	lsl.w	r3, r1, r3
 8002042:	43d9      	mvns	r1, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	4313      	orrs	r3, r2
         );
}
 800204a:	4618      	mov	r0, r3
 800204c:	3724      	adds	r7, #36	; 0x24
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3b01      	subs	r3, #1
 8002064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002068:	d301      	bcc.n	800206e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800206a:	2301      	movs	r3, #1
 800206c:	e00f      	b.n	800208e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800206e:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <SysTick_Config+0x40>)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3b01      	subs	r3, #1
 8002074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002076:	210f      	movs	r1, #15
 8002078:	f04f 30ff 	mov.w	r0, #4294967295
 800207c:	f7ff ff8e 	bl	8001f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <SysTick_Config+0x40>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002086:	4b04      	ldr	r3, [pc, #16]	; (8002098 <SysTick_Config+0x40>)
 8002088:	2207      	movs	r2, #7
 800208a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	e000e010 	.word	0xe000e010

0800209c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff ff29 	bl	8001efc <__NVIC_SetPriorityGrouping>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b086      	sub	sp, #24
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	4603      	mov	r3, r0
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
 80020be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c4:	f7ff ff3e 	bl	8001f44 <__NVIC_GetPriorityGrouping>
 80020c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68b9      	ldr	r1, [r7, #8]
 80020ce:	6978      	ldr	r0, [r7, #20]
 80020d0:	f7ff ff8e 	bl	8001ff0 <NVIC_EncodePriority>
 80020d4:	4602      	mov	r2, r0
 80020d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020da:	4611      	mov	r1, r2
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff5d 	bl	8001f9c <__NVIC_SetPriority>
}
 80020e2:	bf00      	nop
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4603      	mov	r3, r0
 80020f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff31 	bl	8001f60 <__NVIC_EnableIRQ>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff ffa2 	bl	8002058 <SysTick_Config>
 8002114:	4603      	mov	r3, r0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002120:	b480      	push	{r7}
 8002122:	b089      	sub	sp, #36	; 0x24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002132:	2300      	movs	r3, #0
 8002134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
 800213a:	e159      	b.n	80023f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800213c:	2201      	movs	r2, #1
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	4013      	ands	r3, r2
 800214e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	429a      	cmp	r2, r3
 8002156:	f040 8148 	bne.w	80023ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	2b01      	cmp	r3, #1
 8002164:	d005      	beq.n	8002172 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800216e:	2b02      	cmp	r3, #2
 8002170:	d130      	bne.n	80021d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	2203      	movs	r2, #3
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021a8:	2201      	movs	r2, #1
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	f003 0201 	and.w	r2, r3, #1
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d017      	beq.n	8002210 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	2203      	movs	r2, #3
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d123      	bne.n	8002264 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	08da      	lsrs	r2, r3, #3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3208      	adds	r2, #8
 8002224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002228:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	220f      	movs	r2, #15
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	08da      	lsrs	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3208      	adds	r2, #8
 800225e:	69b9      	ldr	r1, [r7, #24]
 8002260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	2203      	movs	r2, #3
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0203 	and.w	r2, r3, #3
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 80a2 	beq.w	80023ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	4b57      	ldr	r3, [pc, #348]	; (8002408 <HAL_GPIO_Init+0x2e8>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	4a56      	ldr	r2, [pc, #344]	; (8002408 <HAL_GPIO_Init+0x2e8>)
 80022b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022b4:	6453      	str	r3, [r2, #68]	; 0x44
 80022b6:	4b54      	ldr	r3, [pc, #336]	; (8002408 <HAL_GPIO_Init+0x2e8>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022c2:	4a52      	ldr	r2, [pc, #328]	; (800240c <HAL_GPIO_Init+0x2ec>)
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	089b      	lsrs	r3, r3, #2
 80022c8:	3302      	adds	r3, #2
 80022ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	220f      	movs	r2, #15
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4013      	ands	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a49      	ldr	r2, [pc, #292]	; (8002410 <HAL_GPIO_Init+0x2f0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d019      	beq.n	8002322 <HAL_GPIO_Init+0x202>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a48      	ldr	r2, [pc, #288]	; (8002414 <HAL_GPIO_Init+0x2f4>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d013      	beq.n	800231e <HAL_GPIO_Init+0x1fe>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a47      	ldr	r2, [pc, #284]	; (8002418 <HAL_GPIO_Init+0x2f8>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00d      	beq.n	800231a <HAL_GPIO_Init+0x1fa>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a46      	ldr	r2, [pc, #280]	; (800241c <HAL_GPIO_Init+0x2fc>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d007      	beq.n	8002316 <HAL_GPIO_Init+0x1f6>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a45      	ldr	r2, [pc, #276]	; (8002420 <HAL_GPIO_Init+0x300>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d101      	bne.n	8002312 <HAL_GPIO_Init+0x1f2>
 800230e:	2304      	movs	r3, #4
 8002310:	e008      	b.n	8002324 <HAL_GPIO_Init+0x204>
 8002312:	2307      	movs	r3, #7
 8002314:	e006      	b.n	8002324 <HAL_GPIO_Init+0x204>
 8002316:	2303      	movs	r3, #3
 8002318:	e004      	b.n	8002324 <HAL_GPIO_Init+0x204>
 800231a:	2302      	movs	r3, #2
 800231c:	e002      	b.n	8002324 <HAL_GPIO_Init+0x204>
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <HAL_GPIO_Init+0x204>
 8002322:	2300      	movs	r3, #0
 8002324:	69fa      	ldr	r2, [r7, #28]
 8002326:	f002 0203 	and.w	r2, r2, #3
 800232a:	0092      	lsls	r2, r2, #2
 800232c:	4093      	lsls	r3, r2
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002334:	4935      	ldr	r1, [pc, #212]	; (800240c <HAL_GPIO_Init+0x2ec>)
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	089b      	lsrs	r3, r3, #2
 800233a:	3302      	adds	r3, #2
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002342:	4b38      	ldr	r3, [pc, #224]	; (8002424 <HAL_GPIO_Init+0x304>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002366:	4a2f      	ldr	r2, [pc, #188]	; (8002424 <HAL_GPIO_Init+0x304>)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800236c:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <HAL_GPIO_Init+0x304>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002390:	4a24      	ldr	r2, [pc, #144]	; (8002424 <HAL_GPIO_Init+0x304>)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002396:	4b23      	ldr	r3, [pc, #140]	; (8002424 <HAL_GPIO_Init+0x304>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	43db      	mvns	r3, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4013      	ands	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ba:	4a1a      	ldr	r2, [pc, #104]	; (8002424 <HAL_GPIO_Init+0x304>)
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023c0:	4b18      	ldr	r3, [pc, #96]	; (8002424 <HAL_GPIO_Init+0x304>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023e4:	4a0f      	ldr	r2, [pc, #60]	; (8002424 <HAL_GPIO_Init+0x304>)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3301      	adds	r3, #1
 80023ee:	61fb      	str	r3, [r7, #28]
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	2b0f      	cmp	r3, #15
 80023f4:	f67f aea2 	bls.w	800213c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023f8:	bf00      	nop
 80023fa:	bf00      	nop
 80023fc:	3724      	adds	r7, #36	; 0x24
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800
 800240c:	40013800 	.word	0x40013800
 8002410:	40020000 	.word	0x40020000
 8002414:	40020400 	.word	0x40020400
 8002418:	40020800 	.word	0x40020800
 800241c:	40020c00 	.word	0x40020c00
 8002420:	40021000 	.word	0x40021000
 8002424:	40013c00 	.word	0x40013c00

08002428 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800243a:	2300      	movs	r3, #0
 800243c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	e0bb      	b.n	80025bc <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002444:	2201      	movs	r2, #1
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4013      	ands	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	429a      	cmp	r2, r3
 800245c:	f040 80ab 	bne.w	80025b6 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002460:	4a5c      	ldr	r2, [pc, #368]	; (80025d4 <HAL_GPIO_DeInit+0x1ac>)
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	089b      	lsrs	r3, r3, #2
 8002466:	3302      	adds	r3, #2
 8002468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800246c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	220f      	movs	r2, #15
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	4013      	ands	r3, r2
 8002480:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a54      	ldr	r2, [pc, #336]	; (80025d8 <HAL_GPIO_DeInit+0x1b0>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d019      	beq.n	80024be <HAL_GPIO_DeInit+0x96>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a53      	ldr	r2, [pc, #332]	; (80025dc <HAL_GPIO_DeInit+0x1b4>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d013      	beq.n	80024ba <HAL_GPIO_DeInit+0x92>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a52      	ldr	r2, [pc, #328]	; (80025e0 <HAL_GPIO_DeInit+0x1b8>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d00d      	beq.n	80024b6 <HAL_GPIO_DeInit+0x8e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a51      	ldr	r2, [pc, #324]	; (80025e4 <HAL_GPIO_DeInit+0x1bc>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d007      	beq.n	80024b2 <HAL_GPIO_DeInit+0x8a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a50      	ldr	r2, [pc, #320]	; (80025e8 <HAL_GPIO_DeInit+0x1c0>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d101      	bne.n	80024ae <HAL_GPIO_DeInit+0x86>
 80024aa:	2304      	movs	r3, #4
 80024ac:	e008      	b.n	80024c0 <HAL_GPIO_DeInit+0x98>
 80024ae:	2307      	movs	r3, #7
 80024b0:	e006      	b.n	80024c0 <HAL_GPIO_DeInit+0x98>
 80024b2:	2303      	movs	r3, #3
 80024b4:	e004      	b.n	80024c0 <HAL_GPIO_DeInit+0x98>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e002      	b.n	80024c0 <HAL_GPIO_DeInit+0x98>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <HAL_GPIO_DeInit+0x98>
 80024be:	2300      	movs	r3, #0
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	f002 0203 	and.w	r2, r2, #3
 80024c6:	0092      	lsls	r2, r2, #2
 80024c8:	4093      	lsls	r3, r2
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d132      	bne.n	8002536 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80024d0:	4b46      	ldr	r3, [pc, #280]	; (80025ec <HAL_GPIO_DeInit+0x1c4>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	43db      	mvns	r3, r3
 80024d8:	4944      	ldr	r1, [pc, #272]	; (80025ec <HAL_GPIO_DeInit+0x1c4>)
 80024da:	4013      	ands	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80024de:	4b43      	ldr	r3, [pc, #268]	; (80025ec <HAL_GPIO_DeInit+0x1c4>)
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	43db      	mvns	r3, r3
 80024e6:	4941      	ldr	r1, [pc, #260]	; (80025ec <HAL_GPIO_DeInit+0x1c4>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80024ec:	4b3f      	ldr	r3, [pc, #252]	; (80025ec <HAL_GPIO_DeInit+0x1c4>)
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	493d      	ldr	r1, [pc, #244]	; (80025ec <HAL_GPIO_DeInit+0x1c4>)
 80024f6:	4013      	ands	r3, r2
 80024f8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80024fa:	4b3c      	ldr	r3, [pc, #240]	; (80025ec <HAL_GPIO_DeInit+0x1c4>)
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	43db      	mvns	r3, r3
 8002502:	493a      	ldr	r1, [pc, #232]	; (80025ec <HAL_GPIO_DeInit+0x1c4>)
 8002504:	4013      	ands	r3, r2
 8002506:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	220f      	movs	r2, #15
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002518:	4a2e      	ldr	r2, [pc, #184]	; (80025d4 <HAL_GPIO_DeInit+0x1ac>)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	089b      	lsrs	r3, r3, #2
 800251e:	3302      	adds	r3, #2
 8002520:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	43da      	mvns	r2, r3
 8002528:	482a      	ldr	r0, [pc, #168]	; (80025d4 <HAL_GPIO_DeInit+0x1ac>)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	089b      	lsrs	r3, r3, #2
 800252e:	400a      	ands	r2, r1
 8002530:	3302      	adds	r3, #2
 8002532:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	2103      	movs	r1, #3
 8002540:	fa01 f303 	lsl.w	r3, r1, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	401a      	ands	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	08da      	lsrs	r2, r3, #3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3208      	adds	r2, #8
 8002554:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	220f      	movs	r2, #15
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43db      	mvns	r3, r3
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	08d2      	lsrs	r2, r2, #3
 800256c:	4019      	ands	r1, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3208      	adds	r2, #8
 8002572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	2103      	movs	r1, #3
 8002580:	fa01 f303 	lsl.w	r3, r1, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	401a      	ands	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	2101      	movs	r1, #1
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	fa01 f303 	lsl.w	r3, r1, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	401a      	ands	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	2103      	movs	r1, #3
 80025aa:	fa01 f303 	lsl.w	r3, r1, r3
 80025ae:	43db      	mvns	r3, r3
 80025b0:	401a      	ands	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	3301      	adds	r3, #1
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	2b0f      	cmp	r3, #15
 80025c0:	f67f af40 	bls.w	8002444 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80025c4:	bf00      	nop
 80025c6:	bf00      	nop
 80025c8:	371c      	adds	r7, #28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40013800 	.word	0x40013800
 80025d8:	40020000 	.word	0x40020000
 80025dc:	40020400 	.word	0x40020400
 80025e0:	40020800 	.word	0x40020800
 80025e4:	40020c00 	.word	0x40020c00
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40013c00 	.word	0x40013c00

080025f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	807b      	strh	r3, [r7, #2]
 80025fc:	4613      	mov	r3, r2
 80025fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002600:	787b      	ldrb	r3, [r7, #1]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002606:	887a      	ldrh	r2, [r7, #2]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800260c:	e003      	b.n	8002616 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800260e:	887b      	ldrh	r3, [r7, #2]
 8002610:	041a      	lsls	r2, r3, #16
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	619a      	str	r2, [r3, #24]
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
	...

08002624 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e12b      	b.n	800288e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d106      	bne.n	8002650 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7fe fc4a 	bl	8000ee4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2224      	movs	r2, #36	; 0x24
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0201 	bic.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002676:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002686:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002688:	f001 fbea 	bl	8003e60 <HAL_RCC_GetPCLK1Freq>
 800268c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4a81      	ldr	r2, [pc, #516]	; (8002898 <HAL_I2C_Init+0x274>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d807      	bhi.n	80026a8 <HAL_I2C_Init+0x84>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4a80      	ldr	r2, [pc, #512]	; (800289c <HAL_I2C_Init+0x278>)
 800269c:	4293      	cmp	r3, r2
 800269e:	bf94      	ite	ls
 80026a0:	2301      	movls	r3, #1
 80026a2:	2300      	movhi	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	e006      	b.n	80026b6 <HAL_I2C_Init+0x92>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4a7d      	ldr	r2, [pc, #500]	; (80028a0 <HAL_I2C_Init+0x27c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	bf94      	ite	ls
 80026b0:	2301      	movls	r3, #1
 80026b2:	2300      	movhi	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e0e7      	b.n	800288e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4a78      	ldr	r2, [pc, #480]	; (80028a4 <HAL_I2C_Init+0x280>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	0c9b      	lsrs	r3, r3, #18
 80026c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	430a      	orrs	r2, r1
 80026dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	4a6a      	ldr	r2, [pc, #424]	; (8002898 <HAL_I2C_Init+0x274>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d802      	bhi.n	80026f8 <HAL_I2C_Init+0xd4>
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	3301      	adds	r3, #1
 80026f6:	e009      	b.n	800270c <HAL_I2C_Init+0xe8>
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026fe:	fb02 f303 	mul.w	r3, r2, r3
 8002702:	4a69      	ldr	r2, [pc, #420]	; (80028a8 <HAL_I2C_Init+0x284>)
 8002704:	fba2 2303 	umull	r2, r3, r2, r3
 8002708:	099b      	lsrs	r3, r3, #6
 800270a:	3301      	adds	r3, #1
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	430b      	orrs	r3, r1
 8002712:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800271e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	495c      	ldr	r1, [pc, #368]	; (8002898 <HAL_I2C_Init+0x274>)
 8002728:	428b      	cmp	r3, r1
 800272a:	d819      	bhi.n	8002760 <HAL_I2C_Init+0x13c>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	1e59      	subs	r1, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	fbb1 f3f3 	udiv	r3, r1, r3
 800273a:	1c59      	adds	r1, r3, #1
 800273c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002740:	400b      	ands	r3, r1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <HAL_I2C_Init+0x138>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1e59      	subs	r1, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	fbb1 f3f3 	udiv	r3, r1, r3
 8002754:	3301      	adds	r3, #1
 8002756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800275a:	e051      	b.n	8002800 <HAL_I2C_Init+0x1dc>
 800275c:	2304      	movs	r3, #4
 800275e:	e04f      	b.n	8002800 <HAL_I2C_Init+0x1dc>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d111      	bne.n	800278c <HAL_I2C_Init+0x168>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	1e58      	subs	r0, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6859      	ldr	r1, [r3, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	440b      	add	r3, r1
 8002776:	fbb0 f3f3 	udiv	r3, r0, r3
 800277a:	3301      	adds	r3, #1
 800277c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002780:	2b00      	cmp	r3, #0
 8002782:	bf0c      	ite	eq
 8002784:	2301      	moveq	r3, #1
 8002786:	2300      	movne	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	e012      	b.n	80027b2 <HAL_I2C_Init+0x18e>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	1e58      	subs	r0, r3, #1
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6859      	ldr	r1, [r3, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	0099      	lsls	r1, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	fbb0 f3f3 	udiv	r3, r0, r3
 80027a2:	3301      	adds	r3, #1
 80027a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	bf0c      	ite	eq
 80027ac:	2301      	moveq	r3, #1
 80027ae:	2300      	movne	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_I2C_Init+0x196>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e022      	b.n	8002800 <HAL_I2C_Init+0x1dc>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10e      	bne.n	80027e0 <HAL_I2C_Init+0x1bc>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	1e58      	subs	r0, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6859      	ldr	r1, [r3, #4]
 80027ca:	460b      	mov	r3, r1
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	440b      	add	r3, r1
 80027d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80027d4:	3301      	adds	r3, #1
 80027d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027de:	e00f      	b.n	8002800 <HAL_I2C_Init+0x1dc>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	1e58      	subs	r0, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6859      	ldr	r1, [r3, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	0099      	lsls	r1, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027f6:	3301      	adds	r3, #1
 80027f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	6809      	ldr	r1, [r1, #0]
 8002804:	4313      	orrs	r3, r2
 8002806:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69da      	ldr	r2, [r3, #28]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800282e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6911      	ldr	r1, [r2, #16]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	68d2      	ldr	r2, [r2, #12]
 800283a:	4311      	orrs	r1, r2
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	430b      	orrs	r3, r1
 8002842:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2220      	movs	r2, #32
 800287a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	000186a0 	.word	0x000186a0
 800289c:	001e847f 	.word	0x001e847f
 80028a0:	003d08ff 	.word	0x003d08ff
 80028a4:	431bde83 	.word	0x431bde83
 80028a8:	10624dd3 	.word	0x10624dd3

080028ac <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e021      	b.n	8002902 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2224      	movs	r2, #36	; 0x24
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0201 	bic.w	r2, r2, #1
 80028d4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7fe fb90 	bl	8000ffc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
	...

0800290c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af02      	add	r7, sp, #8
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	4608      	mov	r0, r1
 8002916:	4611      	mov	r1, r2
 8002918:	461a      	mov	r2, r3
 800291a:	4603      	mov	r3, r0
 800291c:	817b      	strh	r3, [r7, #10]
 800291e:	460b      	mov	r3, r1
 8002920:	813b      	strh	r3, [r7, #8]
 8002922:	4613      	mov	r3, r2
 8002924:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002926:	f7ff fab9 	bl	8001e9c <HAL_GetTick>
 800292a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b20      	cmp	r3, #32
 8002936:	f040 80d9 	bne.w	8002aec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	2319      	movs	r3, #25
 8002940:	2201      	movs	r2, #1
 8002942:	496d      	ldr	r1, [pc, #436]	; (8002af8 <HAL_I2C_Mem_Write+0x1ec>)
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 fc8d 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002950:	2302      	movs	r3, #2
 8002952:	e0cc      	b.n	8002aee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_I2C_Mem_Write+0x56>
 800295e:	2302      	movs	r3, #2
 8002960:	e0c5      	b.n	8002aee <HAL_I2C_Mem_Write+0x1e2>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b01      	cmp	r3, #1
 8002976:	d007      	beq.n	8002988 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0201 	orr.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002996:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2221      	movs	r2, #33	; 0x21
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2240      	movs	r2, #64	; 0x40
 80029a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a3a      	ldr	r2, [r7, #32]
 80029b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80029b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029be:	b29a      	uxth	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4a4d      	ldr	r2, [pc, #308]	; (8002afc <HAL_I2C_Mem_Write+0x1f0>)
 80029c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029ca:	88f8      	ldrh	r0, [r7, #6]
 80029cc:	893a      	ldrh	r2, [r7, #8]
 80029ce:	8979      	ldrh	r1, [r7, #10]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	9301      	str	r3, [sp, #4]
 80029d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	4603      	mov	r3, r0
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 fac4 	bl	8002f68 <I2C_RequestMemoryWrite>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d052      	beq.n	8002a8c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e081      	b.n	8002aee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 fd0e 	bl	8003410 <I2C_WaitOnTXEFlagUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00d      	beq.n	8002a16 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d107      	bne.n	8002a12 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e06b      	b.n	8002aee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	781a      	ldrb	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d11b      	bne.n	8002a8c <HAL_I2C_Mem_Write+0x180>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d017      	beq.n	8002a8c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	781a      	ldrb	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1aa      	bne.n	80029ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 fcfa 	bl	8003492 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00d      	beq.n	8002ac0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d107      	bne.n	8002abc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e016      	b.n	8002aee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ace:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	e000      	b.n	8002aee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002aec:	2302      	movs	r3, #2
  }
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	00100002 	.word	0x00100002
 8002afc:	ffff0000 	.word	0xffff0000

08002b00 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08c      	sub	sp, #48	; 0x30
 8002b04:	af02      	add	r7, sp, #8
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	4608      	mov	r0, r1
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4603      	mov	r3, r0
 8002b10:	817b      	strh	r3, [r7, #10]
 8002b12:	460b      	mov	r3, r1
 8002b14:	813b      	strh	r3, [r7, #8]
 8002b16:	4613      	mov	r3, r2
 8002b18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b1a:	f7ff f9bf 	bl	8001e9c <HAL_GetTick>
 8002b1e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	f040 8208 	bne.w	8002f3e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	2319      	movs	r3, #25
 8002b34:	2201      	movs	r2, #1
 8002b36:	497b      	ldr	r1, [pc, #492]	; (8002d24 <HAL_I2C_Mem_Read+0x224>)
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 fb93 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002b44:	2302      	movs	r3, #2
 8002b46:	e1fb      	b.n	8002f40 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_I2C_Mem_Read+0x56>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e1f4      	b.n	8002f40 <HAL_I2C_Mem_Read+0x440>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d007      	beq.n	8002b7c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0201 	orr.w	r2, r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2222      	movs	r2, #34	; 0x22
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2240      	movs	r2, #64	; 0x40
 8002b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ba6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002bac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4a5b      	ldr	r2, [pc, #364]	; (8002d28 <HAL_I2C_Mem_Read+0x228>)
 8002bbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bbe:	88f8      	ldrh	r0, [r7, #6]
 8002bc0:	893a      	ldrh	r2, [r7, #8]
 8002bc2:	8979      	ldrh	r1, [r7, #10]
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	9301      	str	r3, [sp, #4]
 8002bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	4603      	mov	r3, r0
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 fa60 	bl	8003094 <I2C_RequestMemoryRead>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e1b0      	b.n	8002f40 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d113      	bne.n	8002c0e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002be6:	2300      	movs	r3, #0
 8002be8:	623b      	str	r3, [r7, #32]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	623b      	str	r3, [r7, #32]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	623b      	str	r3, [r7, #32]
 8002bfa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	e184      	b.n	8002f18 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d11b      	bne.n	8002c4e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	61fb      	str	r3, [r7, #28]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	61fb      	str	r3, [r7, #28]
 8002c3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	e164      	b.n	8002f18 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d11b      	bne.n	8002c8e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c64:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c76:	2300      	movs	r3, #0
 8002c78:	61bb      	str	r3, [r7, #24]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	61bb      	str	r3, [r7, #24]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	e144      	b.n	8002f18 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ca4:	e138      	b.n	8002f18 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	f200 80f1 	bhi.w	8002e92 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d123      	bne.n	8002d00 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 fc29 	bl	8003514 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e139      	b.n	8002f40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691a      	ldr	r2, [r3, #16]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cfe:	e10b      	b.n	8002f18 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d14e      	bne.n	8002da6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0e:	2200      	movs	r2, #0
 8002d10:	4906      	ldr	r1, [pc, #24]	; (8002d2c <HAL_I2C_Mem_Read+0x22c>)
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 faa6 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d008      	beq.n	8002d30 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e10e      	b.n	8002f40 <HAL_I2C_Mem_Read+0x440>
 8002d22:	bf00      	nop
 8002d24:	00100002 	.word	0x00100002
 8002d28:	ffff0000 	.word	0xffff0000
 8002d2c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691a      	ldr	r2, [r3, #16]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002da4:	e0b8      	b.n	8002f18 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dac:	2200      	movs	r2, #0
 8002dae:	4966      	ldr	r1, [pc, #408]	; (8002f48 <HAL_I2C_Mem_Read+0x448>)
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 fa57 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e0bf      	b.n	8002f40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691a      	ldr	r2, [r3, #16]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e08:	2200      	movs	r2, #0
 8002e0a:	494f      	ldr	r1, [pc, #316]	; (8002f48 <HAL_I2C_Mem_Read+0x448>)
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 fa29 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e091      	b.n	8002f40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e90:	e042      	b.n	8002f18 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 fb3c 	bl	8003514 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e04c      	b.n	8002f40 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d118      	bne.n	8002f18 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	691a      	ldr	r2, [r3, #16]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f47f aec2 	bne.w	8002ca6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	e000      	b.n	8002f40 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002f3e:	2302      	movs	r3, #2
  }
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3728      	adds	r7, #40	; 0x28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	00010004 	.word	0x00010004

08002f4c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f5a:	b2db      	uxtb	r3, r3
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af02      	add	r7, sp, #8
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	4608      	mov	r0, r1
 8002f72:	4611      	mov	r1, r2
 8002f74:	461a      	mov	r2, r3
 8002f76:	4603      	mov	r3, r0
 8002f78:	817b      	strh	r3, [r7, #10]
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	813b      	strh	r3, [r7, #8]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 f960 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00d      	beq.n	8002fc6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb8:	d103      	bne.n	8002fc2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e05f      	b.n	8003086 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fc6:	897b      	ldrh	r3, [r7, #10]
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	461a      	mov	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	6a3a      	ldr	r2, [r7, #32]
 8002fda:	492d      	ldr	r1, [pc, #180]	; (8003090 <I2C_RequestMemoryWrite+0x128>)
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 f998 	bl	8003312 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e04c      	b.n	8003086 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	617b      	str	r3, [r7, #20]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003004:	6a39      	ldr	r1, [r7, #32]
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 fa02 	bl	8003410 <I2C_WaitOnTXEFlagUntilTimeout>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00d      	beq.n	800302e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	2b04      	cmp	r3, #4
 8003018:	d107      	bne.n	800302a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003028:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e02b      	b.n	8003086 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800302e:	88fb      	ldrh	r3, [r7, #6]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d105      	bne.n	8003040 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003034:	893b      	ldrh	r3, [r7, #8]
 8003036:	b2da      	uxtb	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	611a      	str	r2, [r3, #16]
 800303e:	e021      	b.n	8003084 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003040:	893b      	ldrh	r3, [r7, #8]
 8003042:	0a1b      	lsrs	r3, r3, #8
 8003044:	b29b      	uxth	r3, r3
 8003046:	b2da      	uxtb	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800304e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003050:	6a39      	ldr	r1, [r7, #32]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 f9dc 	bl	8003410 <I2C_WaitOnTXEFlagUntilTimeout>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00d      	beq.n	800307a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	2b04      	cmp	r3, #4
 8003064:	d107      	bne.n	8003076 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003074:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e005      	b.n	8003086 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800307a:	893b      	ldrh	r3, [r7, #8]
 800307c:	b2da      	uxtb	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	00010002 	.word	0x00010002

08003094 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af02      	add	r7, sp, #8
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	4608      	mov	r0, r1
 800309e:	4611      	mov	r1, r2
 80030a0:	461a      	mov	r2, r3
 80030a2:	4603      	mov	r3, r0
 80030a4:	817b      	strh	r3, [r7, #10]
 80030a6:	460b      	mov	r3, r1
 80030a8:	813b      	strh	r3, [r7, #8]
 80030aa:	4613      	mov	r3, r2
 80030ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f8c2 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00d      	beq.n	8003102 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f4:	d103      	bne.n	80030fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e0aa      	b.n	8003258 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003102:	897b      	ldrh	r3, [r7, #10]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	461a      	mov	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003110:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	6a3a      	ldr	r2, [r7, #32]
 8003116:	4952      	ldr	r1, [pc, #328]	; (8003260 <I2C_RequestMemoryRead+0x1cc>)
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 f8fa 	bl	8003312 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e097      	b.n	8003258 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	617b      	str	r3, [r7, #20]
 800313c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800313e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003140:	6a39      	ldr	r1, [r7, #32]
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f964 	bl	8003410 <I2C_WaitOnTXEFlagUntilTimeout>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00d      	beq.n	800316a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	2b04      	cmp	r3, #4
 8003154:	d107      	bne.n	8003166 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003164:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e076      	b.n	8003258 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800316a:	88fb      	ldrh	r3, [r7, #6]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d105      	bne.n	800317c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003170:	893b      	ldrh	r3, [r7, #8]
 8003172:	b2da      	uxtb	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	611a      	str	r2, [r3, #16]
 800317a:	e021      	b.n	80031c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800317c:	893b      	ldrh	r3, [r7, #8]
 800317e:	0a1b      	lsrs	r3, r3, #8
 8003180:	b29b      	uxth	r3, r3
 8003182:	b2da      	uxtb	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800318a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800318c:	6a39      	ldr	r1, [r7, #32]
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 f93e 	bl	8003410 <I2C_WaitOnTXEFlagUntilTimeout>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00d      	beq.n	80031b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d107      	bne.n	80031b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e050      	b.n	8003258 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031b6:	893b      	ldrh	r3, [r7, #8]
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c2:	6a39      	ldr	r1, [r7, #32]
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 f923 	bl	8003410 <I2C_WaitOnTXEFlagUntilTimeout>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00d      	beq.n	80031ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d107      	bne.n	80031e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e035      	b.n	8003258 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	6a3b      	ldr	r3, [r7, #32]
 8003202:	2200      	movs	r2, #0
 8003204:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 f82b 	bl	8003264 <I2C_WaitOnFlagUntilTimeout>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00d      	beq.n	8003230 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003222:	d103      	bne.n	800322c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800322a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e013      	b.n	8003258 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003230:	897b      	ldrh	r3, [r7, #10]
 8003232:	b2db      	uxtb	r3, r3
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	b2da      	uxtb	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	6a3a      	ldr	r2, [r7, #32]
 8003244:	4906      	ldr	r1, [pc, #24]	; (8003260 <I2C_RequestMemoryRead+0x1cc>)
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 f863 	bl	8003312 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	00010002 	.word	0x00010002

08003264 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	603b      	str	r3, [r7, #0]
 8003270:	4613      	mov	r3, r2
 8003272:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003274:	e025      	b.n	80032c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327c:	d021      	beq.n	80032c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800327e:	f7fe fe0d 	bl	8001e9c <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	429a      	cmp	r2, r3
 800328c:	d302      	bcc.n	8003294 <I2C_WaitOnFlagUntilTimeout+0x30>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d116      	bne.n	80032c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f043 0220 	orr.w	r2, r3, #32
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e023      	b.n	800330a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	0c1b      	lsrs	r3, r3, #16
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d10d      	bne.n	80032e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	43da      	mvns	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	4013      	ands	r3, r2
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	bf0c      	ite	eq
 80032de:	2301      	moveq	r3, #1
 80032e0:	2300      	movne	r3, #0
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	461a      	mov	r2, r3
 80032e6:	e00c      	b.n	8003302 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	43da      	mvns	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	4013      	ands	r3, r2
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	bf0c      	ite	eq
 80032fa:	2301      	moveq	r3, #1
 80032fc:	2300      	movne	r3, #0
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	461a      	mov	r2, r3
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	429a      	cmp	r2, r3
 8003306:	d0b6      	beq.n	8003276 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	607a      	str	r2, [r7, #4]
 800331e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003320:	e051      	b.n	80033c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003330:	d123      	bne.n	800337a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003340:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800334a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	f043 0204 	orr.w	r2, r3, #4
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e046      	b.n	8003408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003380:	d021      	beq.n	80033c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003382:	f7fe fd8b 	bl	8001e9c <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	429a      	cmp	r2, r3
 8003390:	d302      	bcc.n	8003398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d116      	bne.n	80033c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2220      	movs	r2, #32
 80033a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	f043 0220 	orr.w	r2, r3, #32
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e020      	b.n	8003408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	0c1b      	lsrs	r3, r3, #16
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d10c      	bne.n	80033ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	43da      	mvns	r2, r3
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4013      	ands	r3, r2
 80033dc:	b29b      	uxth	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	bf14      	ite	ne
 80033e2:	2301      	movne	r3, #1
 80033e4:	2300      	moveq	r3, #0
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	e00b      	b.n	8003402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	43da      	mvns	r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	4013      	ands	r3, r2
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf14      	ite	ne
 80033fc:	2301      	movne	r3, #1
 80033fe:	2300      	moveq	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d18d      	bne.n	8003322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800341c:	e02d      	b.n	800347a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 f8ce 	bl	80035c0 <I2C_IsAcknowledgeFailed>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e02d      	b.n	800348a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003434:	d021      	beq.n	800347a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003436:	f7fe fd31 	bl	8001e9c <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	429a      	cmp	r2, r3
 8003444:	d302      	bcc.n	800344c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d116      	bne.n	800347a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2220      	movs	r2, #32
 8003456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f043 0220 	orr.w	r2, r3, #32
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e007      	b.n	800348a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003484:	2b80      	cmp	r3, #128	; 0x80
 8003486:	d1ca      	bne.n	800341e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b084      	sub	sp, #16
 8003496:	af00      	add	r7, sp, #0
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800349e:	e02d      	b.n	80034fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 f88d 	bl	80035c0 <I2C_IsAcknowledgeFailed>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e02d      	b.n	800350c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b6:	d021      	beq.n	80034fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b8:	f7fe fcf0 	bl	8001e9c <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d302      	bcc.n	80034ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d116      	bne.n	80034fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	f043 0220 	orr.w	r2, r3, #32
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e007      	b.n	800350c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	f003 0304 	and.w	r3, r3, #4
 8003506:	2b04      	cmp	r3, #4
 8003508:	d1ca      	bne.n	80034a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003520:	e042      	b.n	80035a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	f003 0310 	and.w	r3, r3, #16
 800352c:	2b10      	cmp	r3, #16
 800352e:	d119      	bne.n	8003564 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f06f 0210 	mvn.w	r2, #16
 8003538:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e029      	b.n	80035b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003564:	f7fe fc9a 	bl	8001e9c <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	429a      	cmp	r2, r3
 8003572:	d302      	bcc.n	800357a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d116      	bne.n	80035a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2220      	movs	r2, #32
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	f043 0220 	orr.w	r2, r3, #32
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e007      	b.n	80035b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b2:	2b40      	cmp	r3, #64	; 0x40
 80035b4:	d1b5      	bne.n	8003522 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d6:	d11b      	bne.n	8003610 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	f043 0204 	orr.w	r2, r3, #4
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e000      	b.n	8003612 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e264      	b.n	8003afc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d075      	beq.n	800372a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800363e:	4ba3      	ldr	r3, [pc, #652]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
 8003646:	2b04      	cmp	r3, #4
 8003648:	d00c      	beq.n	8003664 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800364a:	4ba0      	ldr	r3, [pc, #640]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003652:	2b08      	cmp	r3, #8
 8003654:	d112      	bne.n	800367c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003656:	4b9d      	ldr	r3, [pc, #628]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800365e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003662:	d10b      	bne.n	800367c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003664:	4b99      	ldr	r3, [pc, #612]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d05b      	beq.n	8003728 <HAL_RCC_OscConfig+0x108>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d157      	bne.n	8003728 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e23f      	b.n	8003afc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003684:	d106      	bne.n	8003694 <HAL_RCC_OscConfig+0x74>
 8003686:	4b91      	ldr	r3, [pc, #580]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a90      	ldr	r2, [pc, #576]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 800368c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	e01d      	b.n	80036d0 <HAL_RCC_OscConfig+0xb0>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800369c:	d10c      	bne.n	80036b8 <HAL_RCC_OscConfig+0x98>
 800369e:	4b8b      	ldr	r3, [pc, #556]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a8a      	ldr	r2, [pc, #552]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 80036a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	4b88      	ldr	r3, [pc, #544]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a87      	ldr	r2, [pc, #540]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 80036b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	e00b      	b.n	80036d0 <HAL_RCC_OscConfig+0xb0>
 80036b8:	4b84      	ldr	r3, [pc, #528]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a83      	ldr	r2, [pc, #524]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 80036be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c2:	6013      	str	r3, [r2, #0]
 80036c4:	4b81      	ldr	r3, [pc, #516]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a80      	ldr	r2, [pc, #512]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 80036ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d013      	beq.n	8003700 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d8:	f7fe fbe0 	bl	8001e9c <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036e0:	f7fe fbdc 	bl	8001e9c <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b64      	cmp	r3, #100	; 0x64
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e204      	b.n	8003afc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f2:	4b76      	ldr	r3, [pc, #472]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0f0      	beq.n	80036e0 <HAL_RCC_OscConfig+0xc0>
 80036fe:	e014      	b.n	800372a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003700:	f7fe fbcc 	bl	8001e9c <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003708:	f7fe fbc8 	bl	8001e9c <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b64      	cmp	r3, #100	; 0x64
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e1f0      	b.n	8003afc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800371a:	4b6c      	ldr	r3, [pc, #432]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0xe8>
 8003726:	e000      	b.n	800372a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d063      	beq.n	80037fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003736:	4b65      	ldr	r3, [pc, #404]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 030c 	and.w	r3, r3, #12
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00b      	beq.n	800375a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003742:	4b62      	ldr	r3, [pc, #392]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800374a:	2b08      	cmp	r3, #8
 800374c:	d11c      	bne.n	8003788 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800374e:	4b5f      	ldr	r3, [pc, #380]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d116      	bne.n	8003788 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800375a:	4b5c      	ldr	r3, [pc, #368]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d005      	beq.n	8003772 <HAL_RCC_OscConfig+0x152>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d001      	beq.n	8003772 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e1c4      	b.n	8003afc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003772:	4b56      	ldr	r3, [pc, #344]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	4952      	ldr	r1, [pc, #328]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 8003782:	4313      	orrs	r3, r2
 8003784:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003786:	e03a      	b.n	80037fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d020      	beq.n	80037d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003790:	4b4f      	ldr	r3, [pc, #316]	; (80038d0 <HAL_RCC_OscConfig+0x2b0>)
 8003792:	2201      	movs	r2, #1
 8003794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003796:	f7fe fb81 	bl	8001e9c <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800379e:	f7fe fb7d 	bl	8001e9c <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e1a5      	b.n	8003afc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b0:	4b46      	ldr	r3, [pc, #280]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0f0      	beq.n	800379e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037bc:	4b43      	ldr	r3, [pc, #268]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	4940      	ldr	r1, [pc, #256]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	600b      	str	r3, [r1, #0]
 80037d0:	e015      	b.n	80037fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037d2:	4b3f      	ldr	r3, [pc, #252]	; (80038d0 <HAL_RCC_OscConfig+0x2b0>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d8:	f7fe fb60 	bl	8001e9c <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037e0:	f7fe fb5c 	bl	8001e9c <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e184      	b.n	8003afc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f2:	4b36      	ldr	r3, [pc, #216]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f0      	bne.n	80037e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b00      	cmp	r3, #0
 8003808:	d030      	beq.n	800386c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d016      	beq.n	8003840 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003812:	4b30      	ldr	r3, [pc, #192]	; (80038d4 <HAL_RCC_OscConfig+0x2b4>)
 8003814:	2201      	movs	r2, #1
 8003816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003818:	f7fe fb40 	bl	8001e9c <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003820:	f7fe fb3c 	bl	8001e9c <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e164      	b.n	8003afc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003832:	4b26      	ldr	r3, [pc, #152]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 8003834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0f0      	beq.n	8003820 <HAL_RCC_OscConfig+0x200>
 800383e:	e015      	b.n	800386c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003840:	4b24      	ldr	r3, [pc, #144]	; (80038d4 <HAL_RCC_OscConfig+0x2b4>)
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003846:	f7fe fb29 	bl	8001e9c <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800384c:	e008      	b.n	8003860 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800384e:	f7fe fb25 	bl	8001e9c <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e14d      	b.n	8003afc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003860:	4b1a      	ldr	r3, [pc, #104]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 8003862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1f0      	bne.n	800384e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 80a0 	beq.w	80039ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800387a:	2300      	movs	r3, #0
 800387c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800387e:	4b13      	ldr	r3, [pc, #76]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10f      	bne.n	80038aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	60bb      	str	r3, [r7, #8]
 800388e:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	4a0e      	ldr	r2, [pc, #56]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 8003894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003898:	6413      	str	r3, [r2, #64]	; 0x40
 800389a:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <HAL_RCC_OscConfig+0x2ac>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a2:	60bb      	str	r3, [r7, #8]
 80038a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038a6:	2301      	movs	r3, #1
 80038a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038aa:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <HAL_RCC_OscConfig+0x2b8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d121      	bne.n	80038fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038b6:	4b08      	ldr	r3, [pc, #32]	; (80038d8 <HAL_RCC_OscConfig+0x2b8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a07      	ldr	r2, [pc, #28]	; (80038d8 <HAL_RCC_OscConfig+0x2b8>)
 80038bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038c2:	f7fe faeb 	bl	8001e9c <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c8:	e011      	b.n	80038ee <HAL_RCC_OscConfig+0x2ce>
 80038ca:	bf00      	nop
 80038cc:	40023800 	.word	0x40023800
 80038d0:	42470000 	.word	0x42470000
 80038d4:	42470e80 	.word	0x42470e80
 80038d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038dc:	f7fe fade 	bl	8001e9c <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e106      	b.n	8003afc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ee:	4b85      	ldr	r3, [pc, #532]	; (8003b04 <HAL_RCC_OscConfig+0x4e4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0f0      	beq.n	80038dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d106      	bne.n	8003910 <HAL_RCC_OscConfig+0x2f0>
 8003902:	4b81      	ldr	r3, [pc, #516]	; (8003b08 <HAL_RCC_OscConfig+0x4e8>)
 8003904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003906:	4a80      	ldr	r2, [pc, #512]	; (8003b08 <HAL_RCC_OscConfig+0x4e8>)
 8003908:	f043 0301 	orr.w	r3, r3, #1
 800390c:	6713      	str	r3, [r2, #112]	; 0x70
 800390e:	e01c      	b.n	800394a <HAL_RCC_OscConfig+0x32a>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	2b05      	cmp	r3, #5
 8003916:	d10c      	bne.n	8003932 <HAL_RCC_OscConfig+0x312>
 8003918:	4b7b      	ldr	r3, [pc, #492]	; (8003b08 <HAL_RCC_OscConfig+0x4e8>)
 800391a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391c:	4a7a      	ldr	r2, [pc, #488]	; (8003b08 <HAL_RCC_OscConfig+0x4e8>)
 800391e:	f043 0304 	orr.w	r3, r3, #4
 8003922:	6713      	str	r3, [r2, #112]	; 0x70
 8003924:	4b78      	ldr	r3, [pc, #480]	; (8003b08 <HAL_RCC_OscConfig+0x4e8>)
 8003926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003928:	4a77      	ldr	r2, [pc, #476]	; (8003b08 <HAL_RCC_OscConfig+0x4e8>)
 800392a:	f043 0301 	orr.w	r3, r3, #1
 800392e:	6713      	str	r3, [r2, #112]	; 0x70
 8003930:	e00b      	b.n	800394a <HAL_RCC_OscConfig+0x32a>
 8003932:	4b75      	ldr	r3, [pc, #468]	; (8003b08 <HAL_RCC_OscConfig+0x4e8>)
 8003934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003936:	4a74      	ldr	r2, [pc, #464]	; (8003b08 <HAL_RCC_OscConfig+0x4e8>)
 8003938:	f023 0301 	bic.w	r3, r3, #1
 800393c:	6713      	str	r3, [r2, #112]	; 0x70
 800393e:	4b72      	ldr	r3, [pc, #456]	; (8003b08 <HAL_RCC_OscConfig+0x4e8>)
 8003940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003942:	4a71      	ldr	r2, [pc, #452]	; (8003b08 <HAL_RCC_OscConfig+0x4e8>)
 8003944:	f023 0304 	bic.w	r3, r3, #4
 8003948:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d015      	beq.n	800397e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003952:	f7fe faa3 	bl	8001e9c <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003958:	e00a      	b.n	8003970 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800395a:	f7fe fa9f 	bl	8001e9c <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	f241 3288 	movw	r2, #5000	; 0x1388
 8003968:	4293      	cmp	r3, r2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e0c5      	b.n	8003afc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003970:	4b65      	ldr	r3, [pc, #404]	; (8003b08 <HAL_RCC_OscConfig+0x4e8>)
 8003972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0ee      	beq.n	800395a <HAL_RCC_OscConfig+0x33a>
 800397c:	e014      	b.n	80039a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800397e:	f7fe fa8d 	bl	8001e9c <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003984:	e00a      	b.n	800399c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003986:	f7fe fa89 	bl	8001e9c <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	f241 3288 	movw	r2, #5000	; 0x1388
 8003994:	4293      	cmp	r3, r2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e0af      	b.n	8003afc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800399c:	4b5a      	ldr	r3, [pc, #360]	; (8003b08 <HAL_RCC_OscConfig+0x4e8>)
 800399e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1ee      	bne.n	8003986 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039a8:	7dfb      	ldrb	r3, [r7, #23]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d105      	bne.n	80039ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ae:	4b56      	ldr	r3, [pc, #344]	; (8003b08 <HAL_RCC_OscConfig+0x4e8>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	4a55      	ldr	r2, [pc, #340]	; (8003b08 <HAL_RCC_OscConfig+0x4e8>)
 80039b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 809b 	beq.w	8003afa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039c4:	4b50      	ldr	r3, [pc, #320]	; (8003b08 <HAL_RCC_OscConfig+0x4e8>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f003 030c 	and.w	r3, r3, #12
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d05c      	beq.n	8003a8a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d141      	bne.n	8003a5c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d8:	4b4c      	ldr	r3, [pc, #304]	; (8003b0c <HAL_RCC_OscConfig+0x4ec>)
 80039da:	2200      	movs	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039de:	f7fe fa5d 	bl	8001e9c <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e4:	e008      	b.n	80039f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e6:	f7fe fa59 	bl	8001e9c <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e081      	b.n	8003afc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f8:	4b43      	ldr	r3, [pc, #268]	; (8003b08 <HAL_RCC_OscConfig+0x4e8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1f0      	bne.n	80039e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	69da      	ldr	r2, [r3, #28]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	019b      	lsls	r3, r3, #6
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1a:	085b      	lsrs	r3, r3, #1
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	041b      	lsls	r3, r3, #16
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a26:	061b      	lsls	r3, r3, #24
 8003a28:	4937      	ldr	r1, [pc, #220]	; (8003b08 <HAL_RCC_OscConfig+0x4e8>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a2e:	4b37      	ldr	r3, [pc, #220]	; (8003b0c <HAL_RCC_OscConfig+0x4ec>)
 8003a30:	2201      	movs	r2, #1
 8003a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a34:	f7fe fa32 	bl	8001e9c <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a3c:	f7fe fa2e 	bl	8001e9c <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e056      	b.n	8003afc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4e:	4b2e      	ldr	r3, [pc, #184]	; (8003b08 <HAL_RCC_OscConfig+0x4e8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0f0      	beq.n	8003a3c <HAL_RCC_OscConfig+0x41c>
 8003a5a:	e04e      	b.n	8003afa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5c:	4b2b      	ldr	r3, [pc, #172]	; (8003b0c <HAL_RCC_OscConfig+0x4ec>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a62:	f7fe fa1b 	bl	8001e9c <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a6a:	f7fe fa17 	bl	8001e9c <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e03f      	b.n	8003afc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a7c:	4b22      	ldr	r3, [pc, #136]	; (8003b08 <HAL_RCC_OscConfig+0x4e8>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1f0      	bne.n	8003a6a <HAL_RCC_OscConfig+0x44a>
 8003a88:	e037      	b.n	8003afa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e032      	b.n	8003afc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a96:	4b1c      	ldr	r3, [pc, #112]	; (8003b08 <HAL_RCC_OscConfig+0x4e8>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d028      	beq.n	8003af6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d121      	bne.n	8003af6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d11a      	bne.n	8003af6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003acc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d111      	bne.n	8003af6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003adc:	085b      	lsrs	r3, r3, #1
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d107      	bne.n	8003af6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d001      	beq.n	8003afa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40007000 	.word	0x40007000
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	42470060 	.word	0x42470060

08003b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e0cc      	b.n	8003cbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b24:	4b68      	ldr	r3, [pc, #416]	; (8003cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d90c      	bls.n	8003b4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b32:	4b65      	ldr	r3, [pc, #404]	; (8003cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3a:	4b63      	ldr	r3, [pc, #396]	; (8003cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d001      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e0b8      	b.n	8003cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d020      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d005      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b64:	4b59      	ldr	r3, [pc, #356]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	4a58      	ldr	r2, [pc, #352]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0308 	and.w	r3, r3, #8
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d005      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b7c:	4b53      	ldr	r3, [pc, #332]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	4a52      	ldr	r2, [pc, #328]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003b82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b88:	4b50      	ldr	r3, [pc, #320]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	494d      	ldr	r1, [pc, #308]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d044      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d107      	bne.n	8003bbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bae:	4b47      	ldr	r3, [pc, #284]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d119      	bne.n	8003bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e07f      	b.n	8003cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d003      	beq.n	8003bce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d107      	bne.n	8003bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bce:	4b3f      	ldr	r3, [pc, #252]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d109      	bne.n	8003bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e06f      	b.n	8003cbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bde:	4b3b      	ldr	r3, [pc, #236]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e067      	b.n	8003cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bee:	4b37      	ldr	r3, [pc, #220]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f023 0203 	bic.w	r2, r3, #3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	4934      	ldr	r1, [pc, #208]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c00:	f7fe f94c 	bl	8001e9c <HAL_GetTick>
 8003c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c06:	e00a      	b.n	8003c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c08:	f7fe f948 	bl	8001e9c <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e04f      	b.n	8003cbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1e:	4b2b      	ldr	r3, [pc, #172]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 020c 	and.w	r2, r3, #12
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d1eb      	bne.n	8003c08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c30:	4b25      	ldr	r3, [pc, #148]	; (8003cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d20c      	bcs.n	8003c58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3e:	4b22      	ldr	r3, [pc, #136]	; (8003cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c46:	4b20      	ldr	r3, [pc, #128]	; (8003cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d001      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e032      	b.n	8003cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d008      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c64:	4b19      	ldr	r3, [pc, #100]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	4916      	ldr	r1, [pc, #88]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d009      	beq.n	8003c96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c82:	4b12      	ldr	r3, [pc, #72]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	490e      	ldr	r1, [pc, #56]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c96:	f000 f821 	bl	8003cdc <HAL_RCC_GetSysClockFreq>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	091b      	lsrs	r3, r3, #4
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	490a      	ldr	r1, [pc, #40]	; (8003cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003ca8:	5ccb      	ldrb	r3, [r1, r3]
 8003caa:	fa22 f303 	lsr.w	r3, r2, r3
 8003cae:	4a09      	ldr	r2, [pc, #36]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cb2:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fe f8ac 	bl	8001e14 <HAL_InitTick>

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40023c00 	.word	0x40023c00
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	08004d78 	.word	0x08004d78
 8003cd4:	20000008 	.word	0x20000008
 8003cd8:	20000078 	.word	0x20000078

08003cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cdc:	b5b0      	push	{r4, r5, r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	6079      	str	r1, [r7, #4]
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	60f9      	str	r1, [r7, #12]
 8003cea:	2100      	movs	r1, #0
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003cee:	2100      	movs	r1, #0
 8003cf0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cf2:	4952      	ldr	r1, [pc, #328]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x160>)
 8003cf4:	6889      	ldr	r1, [r1, #8]
 8003cf6:	f001 010c 	and.w	r1, r1, #12
 8003cfa:	2908      	cmp	r1, #8
 8003cfc:	d00d      	beq.n	8003d1a <HAL_RCC_GetSysClockFreq+0x3e>
 8003cfe:	2908      	cmp	r1, #8
 8003d00:	f200 8094 	bhi.w	8003e2c <HAL_RCC_GetSysClockFreq+0x150>
 8003d04:	2900      	cmp	r1, #0
 8003d06:	d002      	beq.n	8003d0e <HAL_RCC_GetSysClockFreq+0x32>
 8003d08:	2904      	cmp	r1, #4
 8003d0a:	d003      	beq.n	8003d14 <HAL_RCC_GetSysClockFreq+0x38>
 8003d0c:	e08e      	b.n	8003e2c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d0e:	4b4c      	ldr	r3, [pc, #304]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x164>)
 8003d10:	60bb      	str	r3, [r7, #8]
       break;
 8003d12:	e08e      	b.n	8003e32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d14:	4b4b      	ldr	r3, [pc, #300]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x168>)
 8003d16:	60bb      	str	r3, [r7, #8]
      break;
 8003d18:	e08b      	b.n	8003e32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d1a:	4948      	ldr	r1, [pc, #288]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x160>)
 8003d1c:	6849      	ldr	r1, [r1, #4]
 8003d1e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003d22:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d24:	4945      	ldr	r1, [pc, #276]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x160>)
 8003d26:	6849      	ldr	r1, [r1, #4]
 8003d28:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003d2c:	2900      	cmp	r1, #0
 8003d2e:	d024      	beq.n	8003d7a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d30:	4942      	ldr	r1, [pc, #264]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x160>)
 8003d32:	6849      	ldr	r1, [r1, #4]
 8003d34:	0989      	lsrs	r1, r1, #6
 8003d36:	4608      	mov	r0, r1
 8003d38:	f04f 0100 	mov.w	r1, #0
 8003d3c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003d40:	f04f 0500 	mov.w	r5, #0
 8003d44:	ea00 0204 	and.w	r2, r0, r4
 8003d48:	ea01 0305 	and.w	r3, r1, r5
 8003d4c:	493d      	ldr	r1, [pc, #244]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x168>)
 8003d4e:	fb01 f003 	mul.w	r0, r1, r3
 8003d52:	2100      	movs	r1, #0
 8003d54:	fb01 f102 	mul.w	r1, r1, r2
 8003d58:	1844      	adds	r4, r0, r1
 8003d5a:	493a      	ldr	r1, [pc, #232]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x168>)
 8003d5c:	fba2 0101 	umull	r0, r1, r2, r1
 8003d60:	1863      	adds	r3, r4, r1
 8003d62:	4619      	mov	r1, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	461a      	mov	r2, r3
 8003d68:	f04f 0300 	mov.w	r3, #0
 8003d6c:	f7fc fa34 	bl	80001d8 <__aeabi_uldivmod>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4613      	mov	r3, r2
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	e04a      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d7a:	4b30      	ldr	r3, [pc, #192]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x160>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	099b      	lsrs	r3, r3, #6
 8003d80:	461a      	mov	r2, r3
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d8a:	f04f 0100 	mov.w	r1, #0
 8003d8e:	ea02 0400 	and.w	r4, r2, r0
 8003d92:	ea03 0501 	and.w	r5, r3, r1
 8003d96:	4620      	mov	r0, r4
 8003d98:	4629      	mov	r1, r5
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	014b      	lsls	r3, r1, #5
 8003da4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003da8:	0142      	lsls	r2, r0, #5
 8003daa:	4610      	mov	r0, r2
 8003dac:	4619      	mov	r1, r3
 8003dae:	1b00      	subs	r0, r0, r4
 8003db0:	eb61 0105 	sbc.w	r1, r1, r5
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	018b      	lsls	r3, r1, #6
 8003dbe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003dc2:	0182      	lsls	r2, r0, #6
 8003dc4:	1a12      	subs	r2, r2, r0
 8003dc6:	eb63 0301 	sbc.w	r3, r3, r1
 8003dca:	f04f 0000 	mov.w	r0, #0
 8003dce:	f04f 0100 	mov.w	r1, #0
 8003dd2:	00d9      	lsls	r1, r3, #3
 8003dd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dd8:	00d0      	lsls	r0, r2, #3
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	1912      	adds	r2, r2, r4
 8003de0:	eb45 0303 	adc.w	r3, r5, r3
 8003de4:	f04f 0000 	mov.w	r0, #0
 8003de8:	f04f 0100 	mov.w	r1, #0
 8003dec:	0299      	lsls	r1, r3, #10
 8003dee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003df2:	0290      	lsls	r0, r2, #10
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4610      	mov	r0, r2
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	f7fc f9e8 	bl	80001d8 <__aeabi_uldivmod>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e10:	4b0a      	ldr	r3, [pc, #40]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x160>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	0c1b      	lsrs	r3, r3, #16
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e28:	60bb      	str	r3, [r7, #8]
      break;
 8003e2a:	e002      	b.n	8003e32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e2c:	4b04      	ldr	r3, [pc, #16]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x164>)
 8003e2e:	60bb      	str	r3, [r7, #8]
      break;
 8003e30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e32:	68bb      	ldr	r3, [r7, #8]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	00f42400 	.word	0x00f42400
 8003e44:	017d7840 	.word	0x017d7840

08003e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e4c:	4b03      	ldr	r3, [pc, #12]	; (8003e5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	20000008 	.word	0x20000008

08003e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e64:	f7ff fff0 	bl	8003e48 <HAL_RCC_GetHCLKFreq>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	0a9b      	lsrs	r3, r3, #10
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	4903      	ldr	r1, [pc, #12]	; (8003e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e76:	5ccb      	ldrb	r3, [r1, r3]
 8003e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40023800 	.word	0x40023800
 8003e84:	08004d88 	.word	0x08004d88

08003e88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e07b      	b.n	8003f92 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d108      	bne.n	8003eb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eaa:	d009      	beq.n	8003ec0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	61da      	str	r2, [r3, #28]
 8003eb2:	e005      	b.n	8003ec0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d106      	bne.n	8003ee0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fd f8c6 	bl	800106c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ef6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f44:	ea42 0103 	orr.w	r1, r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	0c1b      	lsrs	r3, r3, #16
 8003f5e:	f003 0104 	and.w	r1, r3, #4
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	f003 0210 	and.w	r2, r3, #16
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	69da      	ldr	r2, [r3, #28]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
	...

08003f9c <__libc_init_array>:
 8003f9c:	b570      	push	{r4, r5, r6, lr}
 8003f9e:	4d0d      	ldr	r5, [pc, #52]	; (8003fd4 <__libc_init_array+0x38>)
 8003fa0:	4c0d      	ldr	r4, [pc, #52]	; (8003fd8 <__libc_init_array+0x3c>)
 8003fa2:	1b64      	subs	r4, r4, r5
 8003fa4:	10a4      	asrs	r4, r4, #2
 8003fa6:	2600      	movs	r6, #0
 8003fa8:	42a6      	cmp	r6, r4
 8003faa:	d109      	bne.n	8003fc0 <__libc_init_array+0x24>
 8003fac:	4d0b      	ldr	r5, [pc, #44]	; (8003fdc <__libc_init_array+0x40>)
 8003fae:	4c0c      	ldr	r4, [pc, #48]	; (8003fe0 <__libc_init_array+0x44>)
 8003fb0:	f000 f820 	bl	8003ff4 <_init>
 8003fb4:	1b64      	subs	r4, r4, r5
 8003fb6:	10a4      	asrs	r4, r4, #2
 8003fb8:	2600      	movs	r6, #0
 8003fba:	42a6      	cmp	r6, r4
 8003fbc:	d105      	bne.n	8003fca <__libc_init_array+0x2e>
 8003fbe:	bd70      	pop	{r4, r5, r6, pc}
 8003fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc4:	4798      	blx	r3
 8003fc6:	3601      	adds	r6, #1
 8003fc8:	e7ee      	b.n	8003fa8 <__libc_init_array+0xc>
 8003fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fce:	4798      	blx	r3
 8003fd0:	3601      	adds	r6, #1
 8003fd2:	e7f2      	b.n	8003fba <__libc_init_array+0x1e>
 8003fd4:	08004d98 	.word	0x08004d98
 8003fd8:	08004d98 	.word	0x08004d98
 8003fdc:	08004d98 	.word	0x08004d98
 8003fe0:	08004d9c 	.word	0x08004d9c

08003fe4 <memset>:
 8003fe4:	4402      	add	r2, r0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d100      	bne.n	8003fee <memset+0xa>
 8003fec:	4770      	bx	lr
 8003fee:	f803 1b01 	strb.w	r1, [r3], #1
 8003ff2:	e7f9      	b.n	8003fe8 <memset+0x4>

08003ff4 <_init>:
 8003ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff6:	bf00      	nop
 8003ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ffa:	bc08      	pop	{r3}
 8003ffc:	469e      	mov	lr, r3
 8003ffe:	4770      	bx	lr

08004000 <_fini>:
 8004000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004002:	bf00      	nop
 8004004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004006:	bc08      	pop	{r3}
 8004008:	469e      	mov	lr, r3
 800400a:	4770      	bx	lr
