
TheAccelerometerLevelTool.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000122c  08009670  08009670  00019670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a89c  0800a89c  00020254  2**0
                  CONTENTS
  4 .ARM          00000008  0800a89c  0800a89c  0001a89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8a4  0800a8a4  00020254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8a4  0800a8a4  0001a8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8a8  0800a8a8  0001a8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  0800a8ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000594  20000254  0800ab00  00020254  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007e8  0800ab00  000207e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c767  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002257  00000000  00000000  0002c9eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  0002ec48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00017c64  00000000  00000000  0002f8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000e76c  00000000  00000000  0004751c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008d825  00000000  00000000  00055c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000e34ad  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000b58  00000000  00000000  000e3500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004784  00000000  00000000  000e4058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000254 	.word	0x20000254
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009658 	.word	0x08009658

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000258 	.word	0x20000258
 80001dc:	08009658 	.word	0x08009658

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <turnOnLed.0>:

  char xText[16];
  char yText[16];

  void turnOnLed(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
  {
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	460b      	mov	r3, r1
 8001012:	817b      	strh	r3, [r7, #10]
 8001014:	4664      	mov	r4, ip
 8001016:	f8c7 c004 	str.w	ip, [r7, #4]
	  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 800101a:	897b      	ldrh	r3, [r7, #10]
 800101c:	2201      	movs	r2, #1
 800101e:	4619      	mov	r1, r3
 8001020:	68f8      	ldr	r0, [r7, #12]
 8001022:	f002 f94f 	bl	80032c4 <HAL_GPIO_WritePin>
	  HAL_Delay(delayMs);
 8001026:	6823      	ldr	r3, [r4, #0]
 8001028:	4618      	mov	r0, r3
 800102a:	f001 fdad 	bl	8002b88 <HAL_Delay>
  }
 800102e:	bf00      	nop
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	bd90      	pop	{r4, r7, pc}
	...

08001038 <main>:
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08e      	sub	sp, #56	; 0x38
 800103c:	af00      	add	r7, sp, #0
int main(void)
 800103e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_Init();
 8001044:	f001 fd2e 	bl	8002aa4 <HAL_Init>
  SystemClock_Config();
 8001048:	f000 f8d8 	bl	80011fc <SystemClock_Config>
  BSP_ACCELERO_Init();
 800104c:	f001 fc3c 	bl	80028c8 <BSP_ACCELERO_Init>
  ssd1306_Init(&hi2c2);
 8001050:	4853      	ldr	r0, [pc, #332]	; (80011a0 <main+0x168>)
 8001052:	f000 fa3d 	bl	80014d0 <ssd1306_Init>
  MX_GPIO_Init();
 8001056:	f000 f9cd 	bl	80013f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800105a:	f000 f939 	bl	80012d0 <MX_I2C1_Init>
  MX_I2C2_Init();
 800105e:	f000 f965 	bl	800132c <MX_I2C2_Init>
  MX_SPI1_Init();
 8001062:	f000 f991 	bl	8001388 <MX_SPI1_Init>
  int16_t axis[3] = {0};
 8001066:	f107 0320 	add.w	r3, r7, #32
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	809a      	strh	r2, [r3, #4]
  int16_t xAxis, yAxis = 0x00;
 8001070:	2300      	movs	r3, #0
 8001072:	86fb      	strh	r3, [r7, #54]	; 0x36
  int16_t ThresholdHigh = 1000;
 8001074:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001078:	86bb      	strh	r3, [r7, #52]	; 0x34
  int16_t ThresholdLow = -1000;
 800107a:	f64f 4318 	movw	r3, #64536	; 0xfc18
 800107e:	867b      	strh	r3, [r7, #50]	; 0x32
  uint32_t delayMs = 10;
 8001080:	230a      	movs	r3, #10
 8001082:	62bb      	str	r3, [r7, #40]	; 0x28
      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */


  		BSP_ACCELERO_GetXYZ(axis);
 8001084:	f107 0320 	add.w	r3, r7, #32
 8001088:	4618      	mov	r0, r3
 800108a:	f001 fcdf 	bl	8002a4c <BSP_ACCELERO_GetXYZ>

  		ssd1306_Fill(Black);
 800108e:	2000      	movs	r0, #0
 8001090:	f000 fb3e 	bl	8001710 <ssd1306_Fill>

  		xAxis = axis[0];
 8001094:	8c3b      	ldrh	r3, [r7, #32]
 8001096:	863b      	strh	r3, [r7, #48]	; 0x30
  		yAxis = axis[1];
 8001098:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800109a:	86fb      	strh	r3, [r7, #54]	; 0x36

  		if(abs(xAxis) > abs(yAxis))
 800109c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	bfb8      	it	lt
 80010a4:	425b      	neglt	r3, r3
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	bfb8      	it	lt
 80010b0:	425b      	neglt	r3, r3
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d922      	bls.n	80010fe <main+0xc6>
  		{
  			if(xAxis > ThresholdHigh)
 80010b8:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80010bc:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80010c0:	429a      	cmp	r2, r3
 80010c2:	dd08      	ble.n	80010d6 <main+0x9e>
  				turnOnLed(LED_Green_GPIO_Port, LED_Green_Pin);
 80010c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010c8:	469c      	mov	ip, r3
 80010ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ce:	4835      	ldr	r0, [pc, #212]	; (80011a4 <main+0x16c>)
 80010d0:	f7ff ff9a 	bl	8001008 <turnOnLed.0>
 80010d4:	e035      	b.n	8001142 <main+0x10a>

  			else if(xAxis < ThresholdLow)
 80010d6:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80010da:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80010de:	429a      	cmp	r2, r3
 80010e0:	da08      	bge.n	80010f4 <main+0xbc>
  				turnOnLed(LED_Red_GPIO_Port, LED_Red_Pin);
 80010e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e6:	469c      	mov	ip, r3
 80010e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ec:	482d      	ldr	r0, [pc, #180]	; (80011a4 <main+0x16c>)
 80010ee:	f7ff ff8b 	bl	8001008 <turnOnLed.0>
 80010f2:	e026      	b.n	8001142 <main+0x10a>

  			else { HAL_Delay(delayMs); }
 80010f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f6:	4618      	mov	r0, r3
 80010f8:	f001 fd46 	bl	8002b88 <HAL_Delay>
 80010fc:	e021      	b.n	8001142 <main+0x10a>
  		}

  		else
  		{
  			if(yAxis  > ThresholdHigh)
 80010fe:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8001102:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001106:	429a      	cmp	r2, r3
 8001108:	dd08      	ble.n	800111c <main+0xe4>
  				 turnOnLed(LED_Orange_GPIO_Port, LED_Orange_Pin);
 800110a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800110e:	469c      	mov	ip, r3
 8001110:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001114:	4823      	ldr	r0, [pc, #140]	; (80011a4 <main+0x16c>)
 8001116:	f7ff ff77 	bl	8001008 <turnOnLed.0>
 800111a:	e012      	b.n	8001142 <main+0x10a>

  			else if(yAxis < ThresholdLow)
 800111c:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8001120:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001124:	429a      	cmp	r2, r3
 8001126:	da08      	bge.n	800113a <main+0x102>
  				turnOnLed(LED_Blue_GPIO_Port, LED_Blue_Pin);
 8001128:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800112c:	469c      	mov	ip, r3
 800112e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001132:	481c      	ldr	r0, [pc, #112]	; (80011a4 <main+0x16c>)
 8001134:	f7ff ff68 	bl	8001008 <turnOnLed.0>
 8001138:	e003      	b.n	8001142 <main+0x10a>

  			else { HAL_Delay(delayMs); }
 800113a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800113c:	4618      	mov	r0, r3
 800113e:	f001 fd23 	bl	8002b88 <HAL_Delay>
  		}

  		ssd1306_SetCursor(10, 10);
 8001142:	210a      	movs	r1, #10
 8001144:	200a      	movs	r0, #10
 8001146:	f000 fc3f 	bl	80019c8 <ssd1306_SetCursor>
  		sprintf(xText, "x: %d", axis[0]);
 800114a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800114e:	461a      	mov	r2, r3
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	4914      	ldr	r1, [pc, #80]	; (80011a8 <main+0x170>)
 8001156:	4618      	mov	r0, r3
 8001158:	f004 fc8c 	bl	8005a74 <siprintf>
  		ssd1306_WriteString(xText, Font_11x18, White);
 800115c:	4a13      	ldr	r2, [pc, #76]	; (80011ac <main+0x174>)
 800115e:	f107 0010 	add.w	r0, r7, #16
 8001162:	2301      	movs	r3, #1
 8001164:	ca06      	ldmia	r2, {r1, r2}
 8001166:	f000 fc09 	bl	800197c <ssd1306_WriteString>

  		ssd1306_SetCursor(10, 40);
 800116a:	2128      	movs	r1, #40	; 0x28
 800116c:	200a      	movs	r0, #10
 800116e:	f000 fc2b 	bl	80019c8 <ssd1306_SetCursor>
  		sprintf(yText, "y: %d", axis[1]);
 8001172:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001176:	461a      	mov	r2, r3
 8001178:	463b      	mov	r3, r7
 800117a:	490d      	ldr	r1, [pc, #52]	; (80011b0 <main+0x178>)
 800117c:	4618      	mov	r0, r3
 800117e:	f004 fc79 	bl	8005a74 <siprintf>
  		ssd1306_WriteString(yText, Font_11x18, White);
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <main+0x174>)
 8001184:	4638      	mov	r0, r7
 8001186:	2301      	movs	r3, #1
 8001188:	ca06      	ldmia	r2, {r1, r2}
 800118a:	f000 fbf7 	bl	800197c <ssd1306_WriteString>

  		ssd1306_UpdateScreen(&hi2c2);
 800118e:	4804      	ldr	r0, [pc, #16]	; (80011a0 <main+0x168>)
 8001190:	f000 fae2 	bl	8001758 <ssd1306_UpdateScreen>

  		turnOfLEDS();
 8001194:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001198:	469c      	mov	ip, r3
 800119a:	f000 f80b 	bl	80011b4 <turnOfLEDS.1>
  		BSP_ACCELERO_GetXYZ(axis);
 800119e:	e771      	b.n	8001084 <main+0x4c>
 80011a0:	200002c4 	.word	0x200002c4
 80011a4:	40020c00 	.word	0x40020c00
 80011a8:	08009670 	.word	0x08009670
 80011ac:	20000000 	.word	0x20000000
 80011b0:	08009678 	.word	0x08009678

080011b4 <turnOfLEDS.1>:
  {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	f8c7 c004 	str.w	ip, [r7, #4]
	  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c4:	480c      	ldr	r0, [pc, #48]	; (80011f8 <turnOfLEDS.1+0x44>)
 80011c6:	f002 f87d 	bl	80032c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011d0:	4809      	ldr	r0, [pc, #36]	; (80011f8 <turnOfLEDS.1+0x44>)
 80011d2:	f002 f877 	bl	80032c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_Orange_GPIO_Port, LED_Orange_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011dc:	4806      	ldr	r0, [pc, #24]	; (80011f8 <turnOfLEDS.1+0x44>)
 80011de:	f002 f871 	bl	80032c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011e8:	4803      	ldr	r0, [pc, #12]	; (80011f8 <turnOfLEDS.1+0x44>)
 80011ea:	f002 f86b 	bl	80032c4 <HAL_GPIO_WritePin>
  }
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40020c00 	.word	0x40020c00

080011fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b094      	sub	sp, #80	; 0x50
 8001200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001202:	f107 0320 	add.w	r3, r7, #32
 8001206:	2230      	movs	r2, #48	; 0x30
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f003 fdaa 	bl	8004d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001220:	2300      	movs	r3, #0
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	4b28      	ldr	r3, [pc, #160]	; (80012c8 <SystemClock_Config+0xcc>)
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	4a27      	ldr	r2, [pc, #156]	; (80012c8 <SystemClock_Config+0xcc>)
 800122a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122e:	6413      	str	r3, [r2, #64]	; 0x40
 8001230:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <SystemClock_Config+0xcc>)
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	4b22      	ldr	r3, [pc, #136]	; (80012cc <SystemClock_Config+0xd0>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a21      	ldr	r2, [pc, #132]	; (80012cc <SystemClock_Config+0xd0>)
 8001246:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800124a:	6013      	str	r3, [r2, #0]
 800124c:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <SystemClock_Config+0xd0>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001258:	2302      	movs	r3, #2
 800125a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800125c:	2301      	movs	r3, #1
 800125e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001260:	2310      	movs	r3, #16
 8001262:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001264:	2302      	movs	r3, #2
 8001266:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001268:	2300      	movs	r3, #0
 800126a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800126c:	2308      	movs	r3, #8
 800126e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001270:	2364      	movs	r3, #100	; 0x64
 8001272:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001274:	2302      	movs	r3, #2
 8001276:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001278:	2308      	movs	r3, #8
 800127a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800127c:	f107 0320 	add.w	r3, r7, #32
 8001280:	4618      	mov	r0, r3
 8001282:	f003 f837 	bl	80042f4 <HAL_RCC_OscConfig>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800128c:	f000 f904 	bl	8001498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001290:	230f      	movs	r3, #15
 8001292:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001294:	2302      	movs	r3, #2
 8001296:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800129c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	2103      	movs	r1, #3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f003 fa98 	bl	80047e4 <HAL_RCC_ClockConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012ba:	f000 f8ed 	bl	8001498 <Error_Handler>
  }
}
 80012be:	bf00      	nop
 80012c0:	3750      	adds	r7, #80	; 0x50
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40007000 	.word	0x40007000

080012d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <MX_I2C1_Init+0x50>)
 80012d6:	4a13      	ldr	r2, [pc, #76]	; (8001324 <MX_I2C1_Init+0x54>)
 80012d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <MX_I2C1_Init+0x50>)
 80012dc:	4a12      	ldr	r2, [pc, #72]	; (8001328 <MX_I2C1_Init+0x58>)
 80012de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012e0:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <MX_I2C1_Init+0x50>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <MX_I2C1_Init+0x50>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <MX_I2C1_Init+0x50>)
 80012ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f4:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <MX_I2C1_Init+0x50>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012fa:	4b09      	ldr	r3, [pc, #36]	; (8001320 <MX_I2C1_Init+0x50>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001300:	4b07      	ldr	r3, [pc, #28]	; (8001320 <MX_I2C1_Init+0x50>)
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <MX_I2C1_Init+0x50>)
 8001308:	2200      	movs	r2, #0
 800130a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800130c:	4804      	ldr	r0, [pc, #16]	; (8001320 <MX_I2C1_Init+0x50>)
 800130e:	f001 fff3 	bl	80032f8 <HAL_I2C_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001318:	f000 f8be 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000270 	.word	0x20000270
 8001324:	40005400 	.word	0x40005400
 8001328:	000186a0 	.word	0x000186a0

0800132c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <MX_I2C2_Init+0x50>)
 8001332:	4a13      	ldr	r2, [pc, #76]	; (8001380 <MX_I2C2_Init+0x54>)
 8001334:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <MX_I2C2_Init+0x50>)
 8001338:	4a12      	ldr	r2, [pc, #72]	; (8001384 <MX_I2C2_Init+0x58>)
 800133a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <MX_I2C2_Init+0x50>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <MX_I2C2_Init+0x50>)
 8001344:	2200      	movs	r2, #0
 8001346:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <MX_I2C2_Init+0x50>)
 800134a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800134e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001350:	4b0a      	ldr	r3, [pc, #40]	; (800137c <MX_I2C2_Init+0x50>)
 8001352:	2200      	movs	r2, #0
 8001354:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <MX_I2C2_Init+0x50>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <MX_I2C2_Init+0x50>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <MX_I2C2_Init+0x50>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001368:	4804      	ldr	r0, [pc, #16]	; (800137c <MX_I2C2_Init+0x50>)
 800136a:	f001 ffc5 	bl	80032f8 <HAL_I2C_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001374:	f000 f890 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	200002c4 	.word	0x200002c4
 8001380:	40005800 	.word	0x40005800
 8001384:	000186a0 	.word	0x000186a0

08001388 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <MX_SPI1_Init+0x64>)
 800138e:	4a18      	ldr	r2, [pc, #96]	; (80013f0 <MX_SPI1_Init+0x68>)
 8001390:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001392:	4b16      	ldr	r3, [pc, #88]	; (80013ec <MX_SPI1_Init+0x64>)
 8001394:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001398:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800139a:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_SPI1_Init+0x64>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <MX_SPI1_Init+0x64>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_SPI1_Init+0x64>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <MX_SPI1_Init+0x64>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_SPI1_Init+0x64>)
 80013b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_SPI1_Init+0x64>)
 80013bc:	2210      	movs	r2, #16
 80013be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013c0:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <MX_SPI1_Init+0x64>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_SPI1_Init+0x64>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013cc:	4b07      	ldr	r3, [pc, #28]	; (80013ec <MX_SPI1_Init+0x64>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_SPI1_Init+0x64>)
 80013d4:	220a      	movs	r2, #10
 80013d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013d8:	4804      	ldr	r0, [pc, #16]	; (80013ec <MX_SPI1_Init+0x64>)
 80013da:	f003 fc0f 	bl	8004bfc <HAL_SPI_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013e4:	f000 f858 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000318 	.word	0x20000318
 80013f0:	40013000 	.word	0x40013000

080013f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	f107 030c 	add.w	r3, r7, #12
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	4b20      	ldr	r3, [pc, #128]	; (8001490 <MX_GPIO_Init+0x9c>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a1f      	ldr	r2, [pc, #124]	; (8001490 <MX_GPIO_Init+0x9c>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <MX_GPIO_Init+0x9c>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <MX_GPIO_Init+0x9c>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a18      	ldr	r2, [pc, #96]	; (8001490 <MX_GPIO_Init+0x9c>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b16      	ldr	r3, [pc, #88]	; (8001490 <MX_GPIO_Init+0x9c>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	4b12      	ldr	r3, [pc, #72]	; (8001490 <MX_GPIO_Init+0x9c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a11      	ldr	r2, [pc, #68]	; (8001490 <MX_GPIO_Init+0x9c>)
 800144c:	f043 0308 	orr.w	r3, r3, #8
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <MX_GPIO_Init+0x9c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_Green_Pin|LED_Orange_Pin|LED_Red_Pin|LED_Blue_Pin, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001464:	480b      	ldr	r0, [pc, #44]	; (8001494 <MX_GPIO_Init+0xa0>)
 8001466:	f001 ff2d 	bl	80032c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Green_Pin LED_Orange_Pin LED_Red_Pin LED_Blue_Pin */
  GPIO_InitStruct.Pin = LED_Green_Pin|LED_Orange_Pin|LED_Red_Pin|LED_Blue_Pin;
 800146a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800146e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001470:	2301      	movs	r3, #1
 8001472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	4619      	mov	r1, r3
 8001482:	4804      	ldr	r0, [pc, #16]	; (8001494 <MX_GPIO_Init+0xa0>)
 8001484:	f001 fcb6 	bl	8002df4 <HAL_GPIO_Init>

}
 8001488:	bf00      	nop
 800148a:	3720      	adds	r7, #32
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40023800 	.word	0x40023800
 8001494:	40020c00 	.word	0x40020c00

08001498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800149c:	b672      	cpsid	i
}
 800149e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <Error_Handler+0x8>

080014a2 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af04      	add	r7, sp, #16
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	460b      	mov	r3, r1
 80014ac:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80014ae:	230a      	movs	r3, #10
 80014b0:	9302      	str	r3, [sp, #8]
 80014b2:	2301      	movs	r3, #1
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	1cfb      	adds	r3, r7, #3
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	2301      	movs	r3, #1
 80014bc:	2200      	movs	r2, #0
 80014be:	2178      	movs	r1, #120	; 0x78
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f002 f88d 	bl	80035e0 <HAL_I2C_Mem_Write>
 80014c6:	4603      	mov	r3, r0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 80014d8:	2064      	movs	r0, #100	; 0x64
 80014da:	f001 fb55 	bl	8002b88 <HAL_Delay>
    int status = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 80014e2:	21ae      	movs	r1, #174	; 0xae
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ffdc 	bl	80014a2 <ssd1306_WriteCommand>
 80014ea:	4603      	mov	r3, r0
 80014ec:	461a      	mov	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	4413      	add	r3, r2
 80014f2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 80014f4:	2120      	movs	r1, #32
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ffd3 	bl	80014a2 <ssd1306_WriteCommand>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4413      	add	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001506:	2110      	movs	r1, #16
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff ffca 	bl	80014a2 <ssd1306_WriteCommand>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4413      	add	r3, r2
 8001516:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8001518:	21b0      	movs	r1, #176	; 0xb0
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ffc1 	bl	80014a2 <ssd1306_WriteCommand>
 8001520:	4603      	mov	r3, r0
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 800152a:	21c8      	movs	r1, #200	; 0xc8
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ffb8 	bl	80014a2 <ssd1306_WriteCommand>
 8001532:	4603      	mov	r3, r0
 8001534:	461a      	mov	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4413      	add	r3, r2
 800153a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 800153c:	2100      	movs	r1, #0
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ffaf 	bl	80014a2 <ssd1306_WriteCommand>
 8001544:	4603      	mov	r3, r0
 8001546:	461a      	mov	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4413      	add	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 800154e:	2110      	movs	r1, #16
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ffa6 	bl	80014a2 <ssd1306_WriteCommand>
 8001556:	4603      	mov	r3, r0
 8001558:	461a      	mov	r2, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4413      	add	r3, r2
 800155e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8001560:	2140      	movs	r1, #64	; 0x40
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff ff9d 	bl	80014a2 <ssd1306_WriteCommand>
 8001568:	4603      	mov	r3, r0
 800156a:	461a      	mov	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4413      	add	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8001572:	2181      	movs	r1, #129	; 0x81
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ff94 	bl	80014a2 <ssd1306_WriteCommand>
 800157a:	4603      	mov	r3, r0
 800157c:	461a      	mov	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4413      	add	r3, r2
 8001582:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8001584:	21ff      	movs	r1, #255	; 0xff
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ff8b 	bl	80014a2 <ssd1306_WriteCommand>
 800158c:	4603      	mov	r3, r0
 800158e:	461a      	mov	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4413      	add	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8001596:	21a1      	movs	r1, #161	; 0xa1
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff ff82 	bl	80014a2 <ssd1306_WriteCommand>
 800159e:	4603      	mov	r3, r0
 80015a0:	461a      	mov	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4413      	add	r3, r2
 80015a6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 80015a8:	21a6      	movs	r1, #166	; 0xa6
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ff79 	bl	80014a2 <ssd1306_WriteCommand>
 80015b0:	4603      	mov	r3, r0
 80015b2:	461a      	mov	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 80015ba:	21a8      	movs	r1, #168	; 0xa8
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ff70 	bl	80014a2 <ssd1306_WriteCommand>
 80015c2:	4603      	mov	r3, r0
 80015c4:	461a      	mov	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4413      	add	r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 80015cc:	213f      	movs	r1, #63	; 0x3f
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff ff67 	bl	80014a2 <ssd1306_WriteCommand>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461a      	mov	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4413      	add	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80015de:	21a4      	movs	r1, #164	; 0xa4
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff ff5e 	bl	80014a2 <ssd1306_WriteCommand>
 80015e6:	4603      	mov	r3, r0
 80015e8:	461a      	mov	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4413      	add	r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 80015f0:	21d3      	movs	r1, #211	; 0xd3
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff ff55 	bl	80014a2 <ssd1306_WriteCommand>
 80015f8:	4603      	mov	r3, r0
 80015fa:	461a      	mov	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4413      	add	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8001602:	2100      	movs	r1, #0
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff4c 	bl	80014a2 <ssd1306_WriteCommand>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4413      	add	r3, r2
 8001612:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8001614:	21d5      	movs	r1, #213	; 0xd5
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ff43 	bl	80014a2 <ssd1306_WriteCommand>
 800161c:	4603      	mov	r3, r0
 800161e:	461a      	mov	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4413      	add	r3, r2
 8001624:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8001626:	21f0      	movs	r1, #240	; 0xf0
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ff3a 	bl	80014a2 <ssd1306_WriteCommand>
 800162e:	4603      	mov	r3, r0
 8001630:	461a      	mov	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4413      	add	r3, r2
 8001636:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8001638:	21d9      	movs	r1, #217	; 0xd9
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ff31 	bl	80014a2 <ssd1306_WriteCommand>
 8001640:	4603      	mov	r3, r0
 8001642:	461a      	mov	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4413      	add	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 800164a:	2122      	movs	r1, #34	; 0x22
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ff28 	bl	80014a2 <ssd1306_WriteCommand>
 8001652:	4603      	mov	r3, r0
 8001654:	461a      	mov	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4413      	add	r3, r2
 800165a:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 800165c:	21da      	movs	r1, #218	; 0xda
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ff1f 	bl	80014a2 <ssd1306_WriteCommand>
 8001664:	4603      	mov	r3, r0
 8001666:	461a      	mov	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4413      	add	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 800166e:	2112      	movs	r1, #18
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ff16 	bl	80014a2 <ssd1306_WriteCommand>
 8001676:	4603      	mov	r3, r0
 8001678:	461a      	mov	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	4413      	add	r3, r2
 800167e:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8001680:	21db      	movs	r1, #219	; 0xdb
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff ff0d 	bl	80014a2 <ssd1306_WriteCommand>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4413      	add	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8001692:	2120      	movs	r1, #32
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ff04 	bl	80014a2 <ssd1306_WriteCommand>
 800169a:	4603      	mov	r3, r0
 800169c:	461a      	mov	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4413      	add	r3, r2
 80016a2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 80016a4:	218d      	movs	r1, #141	; 0x8d
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff fefb 	bl	80014a2 <ssd1306_WriteCommand>
 80016ac:	4603      	mov	r3, r0
 80016ae:	461a      	mov	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4413      	add	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 80016b6:	2114      	movs	r1, #20
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff fef2 	bl	80014a2 <ssd1306_WriteCommand>
 80016be:	4603      	mov	r3, r0
 80016c0:	461a      	mov	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4413      	add	r3, r2
 80016c6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 80016c8:	21af      	movs	r1, #175	; 0xaf
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff fee9 	bl	80014a2 <ssd1306_WriteCommand>
 80016d0:	4603      	mov	r3, r0
 80016d2:	461a      	mov	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4413      	add	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <ssd1306_Init+0x214>
        return 1;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e00f      	b.n	8001704 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 80016e4:	2000      	movs	r0, #0
 80016e6:	f000 f813 	bl	8001710 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 f834 	bl	8001758 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <ssd1306_Init+0x23c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80016f6:	4b05      	ldr	r3, [pc, #20]	; (800170c <ssd1306_Init+0x23c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <ssd1306_Init+0x23c>)
 80016fe:	2201      	movs	r2, #1
 8001700:	715a      	strb	r2, [r3, #5]

    return 0;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000770 	.word	0x20000770

08001710 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	e00d      	b.n	800173c <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <ssd1306_Fill+0x1a>
 8001726:	2100      	movs	r1, #0
 8001728:	e000      	b.n	800172c <ssd1306_Fill+0x1c>
 800172a:	21ff      	movs	r1, #255	; 0xff
 800172c:	4a09      	ldr	r2, [pc, #36]	; (8001754 <ssd1306_Fill+0x44>)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4413      	add	r3, r2
 8001732:	460a      	mov	r2, r1
 8001734:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	3301      	adds	r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001742:	d3ed      	bcc.n	8001720 <ssd1306_Fill+0x10>
    }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000370 	.word	0x20000370

08001758 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af04      	add	r7, sp, #16
 800175e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8001760:	2300      	movs	r3, #0
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	e020      	b.n	80017a8 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	3b50      	subs	r3, #80	; 0x50
 800176a:	b2db      	uxtb	r3, r3
 800176c:	4619      	mov	r1, r3
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff fe97 	bl	80014a2 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001774:	2100      	movs	r1, #0
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff fe93 	bl	80014a2 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 800177c:	2110      	movs	r1, #16
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff fe8f 	bl	80014a2 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	01db      	lsls	r3, r3, #7
 8001788:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <ssd1306_UpdateScreen+0x60>)
 800178a:	4413      	add	r3, r2
 800178c:	2264      	movs	r2, #100	; 0x64
 800178e:	9202      	str	r2, [sp, #8]
 8001790:	2280      	movs	r2, #128	; 0x80
 8001792:	9201      	str	r2, [sp, #4]
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2301      	movs	r3, #1
 8001798:	2240      	movs	r2, #64	; 0x40
 800179a:	2178      	movs	r1, #120	; 0x78
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f001 ff1f 	bl	80035e0 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	3301      	adds	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	2b07      	cmp	r3, #7
 80017ac:	d9db      	bls.n	8001766 <ssd1306_UpdateScreen+0xe>
    }
}
 80017ae:	bf00      	nop
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000370 	.word	0x20000370

080017bc <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
 80017c6:	460b      	mov	r3, r1
 80017c8:	71bb      	strb	r3, [r7, #6]
 80017ca:	4613      	mov	r3, r2
 80017cc:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db48      	blt.n	8001868 <ssd1306_DrawPixel+0xac>
 80017d6:	79bb      	ldrb	r3, [r7, #6]
 80017d8:	2b3f      	cmp	r3, #63	; 0x3f
 80017da:	d845      	bhi.n	8001868 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 80017dc:	4b25      	ldr	r3, [pc, #148]	; (8001874 <ssd1306_DrawPixel+0xb8>)
 80017de:	791b      	ldrb	r3, [r3, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d006      	beq.n	80017f2 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 80017e4:	797b      	ldrb	r3, [r7, #5]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	bf0c      	ite	eq
 80017ea:	2301      	moveq	r3, #1
 80017ec:	2300      	movne	r3, #0
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 80017f2:	797b      	ldrb	r3, [r7, #5]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d11a      	bne.n	800182e <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80017f8:	79fa      	ldrb	r2, [r7, #7]
 80017fa:	79bb      	ldrb	r3, [r7, #6]
 80017fc:	08db      	lsrs	r3, r3, #3
 80017fe:	b2d8      	uxtb	r0, r3
 8001800:	4603      	mov	r3, r0
 8001802:	01db      	lsls	r3, r3, #7
 8001804:	4413      	add	r3, r2
 8001806:	4a1c      	ldr	r2, [pc, #112]	; (8001878 <ssd1306_DrawPixel+0xbc>)
 8001808:	5cd3      	ldrb	r3, [r2, r3]
 800180a:	b25a      	sxtb	r2, r3
 800180c:	79bb      	ldrb	r3, [r7, #6]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	2101      	movs	r1, #1
 8001814:	fa01 f303 	lsl.w	r3, r1, r3
 8001818:	b25b      	sxtb	r3, r3
 800181a:	4313      	orrs	r3, r2
 800181c:	b259      	sxtb	r1, r3
 800181e:	79fa      	ldrb	r2, [r7, #7]
 8001820:	4603      	mov	r3, r0
 8001822:	01db      	lsls	r3, r3, #7
 8001824:	4413      	add	r3, r2
 8001826:	b2c9      	uxtb	r1, r1
 8001828:	4a13      	ldr	r2, [pc, #76]	; (8001878 <ssd1306_DrawPixel+0xbc>)
 800182a:	54d1      	strb	r1, [r2, r3]
 800182c:	e01d      	b.n	800186a <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800182e:	79fa      	ldrb	r2, [r7, #7]
 8001830:	79bb      	ldrb	r3, [r7, #6]
 8001832:	08db      	lsrs	r3, r3, #3
 8001834:	b2d8      	uxtb	r0, r3
 8001836:	4603      	mov	r3, r0
 8001838:	01db      	lsls	r3, r3, #7
 800183a:	4413      	add	r3, r2
 800183c:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <ssd1306_DrawPixel+0xbc>)
 800183e:	5cd3      	ldrb	r3, [r2, r3]
 8001840:	b25a      	sxtb	r2, r3
 8001842:	79bb      	ldrb	r3, [r7, #6]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	2101      	movs	r1, #1
 800184a:	fa01 f303 	lsl.w	r3, r1, r3
 800184e:	b25b      	sxtb	r3, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	b25b      	sxtb	r3, r3
 8001854:	4013      	ands	r3, r2
 8001856:	b259      	sxtb	r1, r3
 8001858:	79fa      	ldrb	r2, [r7, #7]
 800185a:	4603      	mov	r3, r0
 800185c:	01db      	lsls	r3, r3, #7
 800185e:	4413      	add	r3, r2
 8001860:	b2c9      	uxtb	r1, r1
 8001862:	4a05      	ldr	r2, [pc, #20]	; (8001878 <ssd1306_DrawPixel+0xbc>)
 8001864:	54d1      	strb	r1, [r2, r3]
 8001866:	e000      	b.n	800186a <ssd1306_DrawPixel+0xae>
        return;
 8001868:	bf00      	nop
    }
}
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	20000770 	.word	0x20000770
 8001878:	20000370 	.word	0x20000370

0800187c <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	4604      	mov	r4, r0
 8001884:	1d38      	adds	r0, r7, #4
 8001886:	e880 0006 	stmia.w	r0, {r1, r2}
 800188a:	461a      	mov	r2, r3
 800188c:	4623      	mov	r3, r4
 800188e:	73fb      	strb	r3, [r7, #15]
 8001890:	4613      	mov	r3, r2
 8001892:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001894:	4b38      	ldr	r3, [pc, #224]	; (8001978 <ssd1306_WriteChar+0xfc>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	793b      	ldrb	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	2b7f      	cmp	r3, #127	; 0x7f
 80018a0:	dc06      	bgt.n	80018b0 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80018a2:	4b35      	ldr	r3, [pc, #212]	; (8001978 <ssd1306_WriteChar+0xfc>)
 80018a4:	885b      	ldrh	r3, [r3, #2]
 80018a6:	461a      	mov	r2, r3
 80018a8:	797b      	ldrb	r3, [r7, #5]
 80018aa:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80018ac:	2b3f      	cmp	r3, #63	; 0x3f
 80018ae:	dd01      	ble.n	80018b4 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	e05d      	b.n	8001970 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
 80018b8:	e04c      	b.n	8001954 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	3b20      	subs	r3, #32
 80018c0:	7979      	ldrb	r1, [r7, #5]
 80018c2:	fb01 f303 	mul.w	r3, r1, r3
 80018c6:	4619      	mov	r1, r3
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	440b      	add	r3, r1
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	4413      	add	r3, r2
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 80018d4:	2300      	movs	r3, #0
 80018d6:	61bb      	str	r3, [r7, #24]
 80018d8:	e034      	b.n	8001944 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d012      	beq.n	8001910 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80018ea:	4b23      	ldr	r3, [pc, #140]	; (8001978 <ssd1306_WriteChar+0xfc>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	4413      	add	r3, r2
 80018f6:	b2d8      	uxtb	r0, r3
 80018f8:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <ssd1306_WriteChar+0xfc>)
 80018fa:	885b      	ldrh	r3, [r3, #2]
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	4413      	add	r3, r2
 8001904:	b2db      	uxtb	r3, r3
 8001906:	7bba      	ldrb	r2, [r7, #14]
 8001908:	4619      	mov	r1, r3
 800190a:	f7ff ff57 	bl	80017bc <ssd1306_DrawPixel>
 800190e:	e016      	b.n	800193e <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001910:	4b19      	ldr	r3, [pc, #100]	; (8001978 <ssd1306_WriteChar+0xfc>)
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	b2da      	uxtb	r2, r3
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	4413      	add	r3, r2
 800191c:	b2d8      	uxtb	r0, r3
 800191e:	4b16      	ldr	r3, [pc, #88]	; (8001978 <ssd1306_WriteChar+0xfc>)
 8001920:	885b      	ldrh	r3, [r3, #2]
 8001922:	b2da      	uxtb	r2, r3
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	4413      	add	r3, r2
 800192a:	b2d9      	uxtb	r1, r3
 800192c:	7bbb      	ldrb	r3, [r7, #14]
 800192e:	2b00      	cmp	r3, #0
 8001930:	bf0c      	ite	eq
 8001932:	2301      	moveq	r3, #1
 8001934:	2300      	movne	r3, #0
 8001936:	b2db      	uxtb	r3, r3
 8001938:	461a      	mov	r2, r3
 800193a:	f7ff ff3f 	bl	80017bc <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	3301      	adds	r3, #1
 8001942:	61bb      	str	r3, [r7, #24]
 8001944:	793b      	ldrb	r3, [r7, #4]
 8001946:	461a      	mov	r2, r3
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	4293      	cmp	r3, r2
 800194c:	d3c5      	bcc.n	80018da <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3301      	adds	r3, #1
 8001952:	61fb      	str	r3, [r7, #28]
 8001954:	797b      	ldrb	r3, [r7, #5]
 8001956:	461a      	mov	r2, r3
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	4293      	cmp	r3, r2
 800195c:	d3ad      	bcc.n	80018ba <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <ssd1306_WriteChar+0xfc>)
 8001960:	881a      	ldrh	r2, [r3, #0]
 8001962:	793b      	ldrb	r3, [r7, #4]
 8001964:	b29b      	uxth	r3, r3
 8001966:	4413      	add	r3, r2
 8001968:	b29a      	uxth	r2, r3
 800196a:	4b03      	ldr	r3, [pc, #12]	; (8001978 <ssd1306_WriteChar+0xfc>)
 800196c:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 800196e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3724      	adds	r7, #36	; 0x24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd90      	pop	{r4, r7, pc}
 8001978:	20000770 	.word	0x20000770

0800197c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	1d38      	adds	r0, r7, #4
 8001986:	e880 0006 	stmia.w	r0, {r1, r2}
 800198a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 800198c:	e012      	b.n	80019b4 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	7818      	ldrb	r0, [r3, #0]
 8001992:	78fb      	ldrb	r3, [r7, #3]
 8001994:	1d3a      	adds	r2, r7, #4
 8001996:	ca06      	ldmia	r2, {r1, r2}
 8001998:	f7ff ff70 	bl	800187c <ssd1306_WriteChar>
 800199c:	4603      	mov	r3, r0
 800199e:	461a      	mov	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d002      	beq.n	80019ae <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	e008      	b.n	80019c0 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	3301      	adds	r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
    while (*str)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1e8      	bne.n	800198e <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	781b      	ldrb	r3, [r3, #0]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	460a      	mov	r2, r1
 80019d2:	71fb      	strb	r3, [r7, #7]
 80019d4:	4613      	mov	r3, r2
 80019d6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	b29a      	uxth	r2, r3
 80019dc:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <ssd1306_SetCursor+0x2c>)
 80019de:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80019e0:	79bb      	ldrb	r3, [r7, #6]
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <ssd1306_SetCursor+0x2c>)
 80019e6:	805a      	strh	r2, [r3, #2]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	20000770 	.word	0x20000770

080019f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	607b      	str	r3, [r7, #4]
 8001a02:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <HAL_MspInit+0x4c>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	4a0f      	ldr	r2, [pc, #60]	; (8001a44 <HAL_MspInit+0x4c>)
 8001a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <HAL_MspInit+0x4c>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	603b      	str	r3, [r7, #0]
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <HAL_MspInit+0x4c>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	4a08      	ldr	r2, [pc, #32]	; (8001a44 <HAL_MspInit+0x4c>)
 8001a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a28:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_MspInit+0x4c>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a32:	603b      	str	r3, [r7, #0]
 8001a34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a36:	2007      	movs	r0, #7
 8001a38:	f001 f99a 	bl	8002d70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40023800 	.word	0x40023800

08001a48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08c      	sub	sp, #48	; 0x30
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a3a      	ldr	r2, [pc, #232]	; (8001b50 <HAL_I2C_MspInit+0x108>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d12c      	bne.n	8001ac4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
 8001a6e:	4b39      	ldr	r3, [pc, #228]	; (8001b54 <HAL_I2C_MspInit+0x10c>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a38      	ldr	r2, [pc, #224]	; (8001b54 <HAL_I2C_MspInit+0x10c>)
 8001a74:	f043 0302 	orr.w	r3, r3, #2
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b36      	ldr	r3, [pc, #216]	; (8001b54 <HAL_I2C_MspInit+0x10c>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	61bb      	str	r3, [r7, #24]
 8001a84:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a86:	23c0      	movs	r3, #192	; 0xc0
 8001a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a8a:	2312      	movs	r3, #18
 8001a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a92:	2303      	movs	r3, #3
 8001a94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a96:	2304      	movs	r3, #4
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9a:	f107 031c 	add.w	r3, r7, #28
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	482d      	ldr	r0, [pc, #180]	; (8001b58 <HAL_I2C_MspInit+0x110>)
 8001aa2:	f001 f9a7 	bl	8002df4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	4b2a      	ldr	r3, [pc, #168]	; (8001b54 <HAL_I2C_MspInit+0x10c>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	4a29      	ldr	r2, [pc, #164]	; (8001b54 <HAL_I2C_MspInit+0x10c>)
 8001ab0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab6:	4b27      	ldr	r3, [pc, #156]	; (8001b54 <HAL_I2C_MspInit+0x10c>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ac2:	e041      	b.n	8001b48 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a24      	ldr	r2, [pc, #144]	; (8001b5c <HAL_I2C_MspInit+0x114>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d13c      	bne.n	8001b48 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <HAL_I2C_MspInit+0x10c>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a1f      	ldr	r2, [pc, #124]	; (8001b54 <HAL_I2C_MspInit+0x10c>)
 8001ad8:	f043 0302 	orr.w	r3, r3, #2
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <HAL_I2C_MspInit+0x10c>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001af0:	2312      	movs	r3, #18
 8001af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af8:	2303      	movs	r3, #3
 8001afa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001afc:	2304      	movs	r3, #4
 8001afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b00:	f107 031c 	add.w	r3, r7, #28
 8001b04:	4619      	mov	r1, r3
 8001b06:	4814      	ldr	r0, [pc, #80]	; (8001b58 <HAL_I2C_MspInit+0x110>)
 8001b08:	f001 f974 	bl	8002df4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b0c:	2308      	movs	r3, #8
 8001b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b10:	2312      	movs	r3, #18
 8001b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001b1c:	2309      	movs	r3, #9
 8001b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b20:	f107 031c 	add.w	r3, r7, #28
 8001b24:	4619      	mov	r1, r3
 8001b26:	480c      	ldr	r0, [pc, #48]	; (8001b58 <HAL_I2C_MspInit+0x110>)
 8001b28:	f001 f964 	bl	8002df4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <HAL_I2C_MspInit+0x10c>)
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	4a07      	ldr	r2, [pc, #28]	; (8001b54 <HAL_I2C_MspInit+0x10c>)
 8001b36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_I2C_MspInit+0x10c>)
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	68fb      	ldr	r3, [r7, #12]
}
 8001b48:	bf00      	nop
 8001b4a:	3730      	adds	r7, #48	; 0x30
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40005400 	.word	0x40005400
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40020400 	.word	0x40020400
 8001b5c:	40005800 	.word	0x40005800

08001b60 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a14      	ldr	r2, [pc, #80]	; (8001bc0 <HAL_I2C_MspDeInit+0x60>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d10e      	bne.n	8001b90 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001b72:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <HAL_I2C_MspDeInit+0x64>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	4a13      	ldr	r2, [pc, #76]	; (8001bc4 <HAL_I2C_MspDeInit+0x64>)
 8001b78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b7c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8001b7e:	2140      	movs	r1, #64	; 0x40
 8001b80:	4811      	ldr	r0, [pc, #68]	; (8001bc8 <HAL_I2C_MspDeInit+0x68>)
 8001b82:	f001 fabb 	bl	80030fc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8001b86:	2180      	movs	r1, #128	; 0x80
 8001b88:	480f      	ldr	r0, [pc, #60]	; (8001bc8 <HAL_I2C_MspDeInit+0x68>)
 8001b8a:	f001 fab7 	bl	80030fc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001b8e:	e013      	b.n	8001bb8 <HAL_I2C_MspDeInit+0x58>
  else if(hi2c->Instance==I2C2)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a0d      	ldr	r2, [pc, #52]	; (8001bcc <HAL_I2C_MspDeInit+0x6c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d10e      	bne.n	8001bb8 <HAL_I2C_MspDeInit+0x58>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <HAL_I2C_MspDeInit+0x64>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	4a09      	ldr	r2, [pc, #36]	; (8001bc4 <HAL_I2C_MspDeInit+0x64>)
 8001ba0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001ba4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001ba6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001baa:	4807      	ldr	r0, [pc, #28]	; (8001bc8 <HAL_I2C_MspDeInit+0x68>)
 8001bac:	f001 faa6 	bl	80030fc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 8001bb0:	2108      	movs	r1, #8
 8001bb2:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <HAL_I2C_MspDeInit+0x68>)
 8001bb4:	f001 faa2 	bl	80030fc <HAL_GPIO_DeInit>
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40005400 	.word	0x40005400
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40020400 	.word	0x40020400
 8001bcc:	40005800 	.word	0x40005800

08001bd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a19      	ldr	r2, [pc, #100]	; (8001c54 <HAL_SPI_MspInit+0x84>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d12b      	bne.n	8001c4a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <HAL_SPI_MspInit+0x88>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	4a17      	ldr	r2, [pc, #92]	; (8001c58 <HAL_SPI_MspInit+0x88>)
 8001bfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c00:	6453      	str	r3, [r2, #68]	; 0x44
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <HAL_SPI_MspInit+0x88>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <HAL_SPI_MspInit+0x88>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a10      	ldr	r2, [pc, #64]	; (8001c58 <HAL_SPI_MspInit+0x88>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <HAL_SPI_MspInit+0x88>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c2a:	23e0      	movs	r3, #224	; 0xe0
 8001c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c36:	2303      	movs	r3, #3
 8001c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c3a:	2305      	movs	r3, #5
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	4619      	mov	r1, r3
 8001c44:	4805      	ldr	r0, [pc, #20]	; (8001c5c <HAL_SPI_MspInit+0x8c>)
 8001c46:	f001 f8d5 	bl	8002df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c4a:	bf00      	nop
 8001c4c:	3728      	adds	r7, #40	; 0x28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40013000 	.word	0x40013000
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40020000 	.word	0x40020000

08001c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <NMI_Handler+0x4>

08001c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c6a:	e7fe      	b.n	8001c6a <HardFault_Handler+0x4>

08001c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c70:	e7fe      	b.n	8001c70 <MemManage_Handler+0x4>

08001c72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c76:	e7fe      	b.n	8001c76 <BusFault_Handler+0x4>

08001c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c7c:	e7fe      	b.n	8001c7c <UsageFault_Handler+0x4>

08001c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cac:	f000 ff4c 	bl	8002b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return 1;
 8001cb8:	2301      	movs	r3, #1
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <_kill>:

int _kill(int pid, int sig)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cce:	f003 f81f 	bl	8004d10 <__errno>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2216      	movs	r2, #22
 8001cd6:	601a      	str	r2, [r3, #0]
  return -1;
 8001cd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_exit>:

void _exit (int status)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cec:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff ffe7 	bl	8001cc4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cf6:	e7fe      	b.n	8001cf6 <_exit+0x12>

08001cf8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	e00a      	b.n	8001d20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d0a:	f3af 8000 	nop.w
 8001d0e:	4601      	mov	r1, r0
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	60ba      	str	r2, [r7, #8]
 8001d16:	b2ca      	uxtb	r2, r1
 8001d18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	dbf0      	blt.n	8001d0a <_read+0x12>
  }

  return len;
 8001d28:	687b      	ldr	r3, [r7, #4]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	e009      	b.n	8001d58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	60ba      	str	r2, [r7, #8]
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	3301      	adds	r3, #1
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	dbf1      	blt.n	8001d44 <_write+0x12>
  }
  return len;
 8001d60:	687b      	ldr	r3, [r7, #4]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <_close>:

int _close(int file)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d92:	605a      	str	r2, [r3, #4]
  return 0;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <_isatty>:

int _isatty(int file)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001daa:	2301      	movs	r3, #1
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ddc:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <_sbrk+0x5c>)
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <_sbrk+0x60>)
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de8:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <_sbrk+0x64>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d102      	bne.n	8001df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <_sbrk+0x64>)
 8001df2:	4a12      	ldr	r2, [pc, #72]	; (8001e3c <_sbrk+0x68>)
 8001df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001df6:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <_sbrk+0x64>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d207      	bcs.n	8001e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e04:	f002 ff84 	bl	8004d10 <__errno>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e12:	e009      	b.n	8001e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <_sbrk+0x64>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e1a:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <_sbrk+0x64>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	4a05      	ldr	r2, [pc, #20]	; (8001e38 <_sbrk+0x64>)
 8001e24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e26:	68fb      	ldr	r3, [r7, #12]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20020000 	.word	0x20020000
 8001e34:	00000400 	.word	0x00000400
 8001e38:	20000778 	.word	0x20000778
 8001e3c:	200007e8 	.word	0x200007e8

08001e40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <SystemInit+0x20>)
 8001e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4a:	4a05      	ldr	r2, [pc, #20]	; (8001e60 <SystemInit+0x20>)
 8001e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e68:	480d      	ldr	r0, [pc, #52]	; (8001ea0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e6a:	490e      	ldr	r1, [pc, #56]	; (8001ea4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ea8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e70:	e002      	b.n	8001e78 <LoopCopyDataInit>

08001e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e76:	3304      	adds	r3, #4

08001e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e7c:	d3f9      	bcc.n	8001e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e7e:	4a0b      	ldr	r2, [pc, #44]	; (8001eac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e80:	4c0b      	ldr	r4, [pc, #44]	; (8001eb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e84:	e001      	b.n	8001e8a <LoopFillZerobss>

08001e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e88:	3204      	adds	r2, #4

08001e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e8c:	d3fb      	bcc.n	8001e86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e8e:	f7ff ffd7 	bl	8001e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e92:	f002 ff43 	bl	8004d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e96:	f7ff f8cf 	bl	8001038 <main>
  bx  lr    
 8001e9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea4:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8001ea8:	0800a8ac 	.word	0x0800a8ac
  ldr r2, =_sbss
 8001eac:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 8001eb0:	200007e8 	.word	0x200007e8

08001eb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eb4:	e7fe      	b.n	8001eb4 <ADC_IRQHandler>

08001eb6 <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b084      	sub	sp, #16
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8001ec4:	f000 fc82 	bl	80027cc <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001ec8:	88fb      	ldrh	r3, [r7, #6]
 8001eca:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	2120      	movs	r1, #32
 8001ed2:	2032      	movs	r0, #50	; 0x32
 8001ed4:	f000 fcd2 	bl	800287c <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8001ed8:	2300      	movs	r3, #0
 8001eda:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	2123      	movs	r1, #35	; 0x23
 8001ee2:	2032      	movs	r0, #50	; 0x32
 8001ee4:	f000 fcca 	bl	800287c <COMPASSACCELERO_IO_Write>
}
 8001ee8:	bf00      	nop
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001f04:	2300      	movs	r3, #0
 8001f06:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8001f08:	f000 fc60 	bl	80027cc <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 8001f0c:	210f      	movs	r1, #15
 8001f0e:	2032      	movs	r0, #50	; 0x32
 8001f10:	f000 fcc7 	bl	80028a2 <COMPASSACCELERO_IO_Read>
 8001f14:	4603      	mov	r3, r0
 8001f16:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8001f18:	79fb      	ldrb	r3, [r7, #7]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8001f28:	2124      	movs	r1, #36	; 0x24
 8001f2a:	2032      	movs	r0, #50	; 0x32
 8001f2c:	f000 fcb9 	bl	80028a2 <COMPASSACCELERO_IO_Read>
 8001f30:	4603      	mov	r3, r0
 8001f32:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f3a:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	2124      	movs	r1, #36	; 0x24
 8001f42:	2032      	movs	r0, #50	; 0x32
 8001f44:	f000 fc9a 	bl	800287c <COMPASSACCELERO_IO_Write>
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8001f5a:	2121      	movs	r1, #33	; 0x21
 8001f5c:	2032      	movs	r0, #50	; 0x32
 8001f5e:	f000 fca0 	bl	80028a2 <COMPASSACCELERO_IO_Read>
 8001f62:	4603      	mov	r3, r0
 8001f64:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	f003 030c 	and.w	r3, r3, #12
 8001f6c:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8001f6e:	7bfa      	ldrb	r2, [r7, #15]
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	2121      	movs	r1, #33	; 0x21
 8001f7c:	2032      	movs	r0, #50	; 0x32
 8001f7e:	f000 fc7d 	bl	800287c <COMPASSACCELERO_IO_Write>
}
 8001f82:	bf00      	nop
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b084      	sub	sp, #16
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	4603      	mov	r3, r0
 8001f92:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8001f94:	2121      	movs	r1, #33	; 0x21
 8001f96:	2032      	movs	r0, #50	; 0x32
 8001f98:	f000 fc83 	bl	80028a2 <COMPASSACCELERO_IO_Read>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
 8001fa2:	f023 0308 	bic.w	r3, r3, #8
 8001fa6:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001fa8:	7bfa      	ldrb	r2, [r7, #15]
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	2121      	movs	r1, #33	; 0x21
 8001fb6:	2032      	movs	r0, #50	; 0x32
 8001fb8:	f000 fc60 	bl	800287c <COMPASSACCELERO_IO_Write>
}
 8001fbc:	bf00      	nop
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8001fcc:	2300      	movs	r3, #0
 8001fce:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 8001fd8:	2123      	movs	r1, #35	; 0x23
 8001fda:	2032      	movs	r0, #50	; 0x32
 8001fdc:	f000 fc61 	bl	80028a2 <COMPASSACCELERO_IO_Read>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8001fe4:	2124      	movs	r1, #36	; 0x24
 8001fe6:	2032      	movs	r0, #50	; 0x32
 8001fe8:	f000 fc5b 	bl	80028a2 <COMPASSACCELERO_IO_Read>
 8001fec:	4603      	mov	r3, r0
 8001fee:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 8001ff0:	2128      	movs	r1, #40	; 0x28
 8001ff2:	2032      	movs	r0, #50	; 0x32
 8001ff4:	f000 fc55 	bl	80028a2 <COMPASSACCELERO_IO_Read>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	b25b      	sxtb	r3, r3
 8001ffc:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 8001ffe:	2129      	movs	r1, #41	; 0x29
 8002000:	2032      	movs	r0, #50	; 0x32
 8002002:	f000 fc4e 	bl	80028a2 <COMPASSACCELERO_IO_Read>
 8002006:	4603      	mov	r3, r0
 8002008:	b25b      	sxtb	r3, r3
 800200a:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 800200c:	212a      	movs	r1, #42	; 0x2a
 800200e:	2032      	movs	r0, #50	; 0x32
 8002010:	f000 fc47 	bl	80028a2 <COMPASSACCELERO_IO_Read>
 8002014:	4603      	mov	r3, r0
 8002016:	b25b      	sxtb	r3, r3
 8002018:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 800201a:	212b      	movs	r1, #43	; 0x2b
 800201c:	2032      	movs	r0, #50	; 0x32
 800201e:	f000 fc40 	bl	80028a2 <COMPASSACCELERO_IO_Read>
 8002022:	4603      	mov	r3, r0
 8002024:	b25b      	sxtb	r3, r3
 8002026:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 8002028:	212c      	movs	r1, #44	; 0x2c
 800202a:	2032      	movs	r0, #50	; 0x32
 800202c:	f000 fc39 	bl	80028a2 <COMPASSACCELERO_IO_Read>
 8002030:	4603      	mov	r3, r0
 8002032:	b25b      	sxtb	r3, r3
 8002034:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 8002036:	212d      	movs	r1, #45	; 0x2d
 8002038:	2032      	movs	r0, #50	; 0x32
 800203a:	f000 fc32 	bl	80028a2 <COMPASSACCELERO_IO_Read>
 800203e:	4603      	mov	r3, r0
 8002040:	b25b      	sxtb	r3, r3
 8002042:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 8002044:	7d3b      	ldrb	r3, [r7, #20]
 8002046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204a:	2b00      	cmp	r3, #0
 800204c:	d123      	bne.n	8002096 <LSM303AGR_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 800204e:	2300      	movs	r3, #0
 8002050:	77fb      	strb	r3, [r7, #31]
 8002052:	e01c      	b.n	800208e <LSM303AGR_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8002054:	7ffb      	ldrb	r3, [r7, #31]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	3301      	adds	r3, #1
 800205a:	3320      	adds	r3, #32
 800205c:	443b      	add	r3, r7
 800205e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8002062:	b29b      	uxth	r3, r3
 8002064:	021b      	lsls	r3, r3, #8
 8002066:	b29a      	uxth	r2, r3
 8002068:	7ffb      	ldrb	r3, [r7, #31]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	3320      	adds	r3, #32
 800206e:	443b      	add	r3, r7
 8002070:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8002074:	b29b      	uxth	r3, r3
 8002076:	4413      	add	r3, r2
 8002078:	b29a      	uxth	r2, r3
 800207a:	7ffb      	ldrb	r3, [r7, #31]
 800207c:	b212      	sxth	r2, r2
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	3320      	adds	r3, #32
 8002082:	443b      	add	r3, r7
 8002084:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8002088:	7ffb      	ldrb	r3, [r7, #31]
 800208a:	3301      	adds	r3, #1
 800208c:	77fb      	strb	r3, [r7, #31]
 800208e:	7ffb      	ldrb	r3, [r7, #31]
 8002090:	2b02      	cmp	r3, #2
 8002092:	d9df      	bls.n	8002054 <LSM303AGR_AccReadXYZ+0x90>
 8002094:	e022      	b.n	80020dc <LSM303AGR_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8002096:	2300      	movs	r3, #0
 8002098:	77fb      	strb	r3, [r7, #31]
 800209a:	e01c      	b.n	80020d6 <LSM303AGR_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 800209c:	7ffb      	ldrb	r3, [r7, #31]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	3320      	adds	r3, #32
 80020a2:	443b      	add	r3, r7
 80020a4:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	021b      	lsls	r3, r3, #8
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	7ffb      	ldrb	r3, [r7, #31]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	3301      	adds	r3, #1
 80020b4:	3320      	adds	r3, #32
 80020b6:	443b      	add	r3, r7
 80020b8:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	4413      	add	r3, r2
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	7ffb      	ldrb	r3, [r7, #31]
 80020c4:	b212      	sxth	r2, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	3320      	adds	r3, #32
 80020ca:	443b      	add	r3, r7
 80020cc:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80020d0:	7ffb      	ldrb	r3, [r7, #31]
 80020d2:	3301      	adds	r3, #1
 80020d4:	77fb      	strb	r3, [r7, #31]
 80020d6:	7ffb      	ldrb	r3, [r7, #31]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d9df      	bls.n	800209c <LSM303AGR_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 80020dc:	7d3b      	ldrb	r3, [r7, #20]
 80020de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80020e2:	2b30      	cmp	r3, #48	; 0x30
 80020e4:	d013      	beq.n	800210e <LSM303AGR_AccReadXYZ+0x14a>
 80020e6:	2b30      	cmp	r3, #48	; 0x30
 80020e8:	dc14      	bgt.n	8002114 <LSM303AGR_AccReadXYZ+0x150>
 80020ea:	2b20      	cmp	r3, #32
 80020ec:	d00c      	beq.n	8002108 <LSM303AGR_AccReadXYZ+0x144>
 80020ee:	2b20      	cmp	r3, #32
 80020f0:	dc10      	bgt.n	8002114 <LSM303AGR_AccReadXYZ+0x150>
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d002      	beq.n	80020fc <LSM303AGR_AccReadXYZ+0x138>
 80020f6:	2b10      	cmp	r3, #16
 80020f8:	d003      	beq.n	8002102 <LSM303AGR_AccReadXYZ+0x13e>
 80020fa:	e00b      	b.n	8002114 <LSM303AGR_AccReadXYZ+0x150>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 80020fc:	2301      	movs	r3, #1
 80020fe:	77bb      	strb	r3, [r7, #30]
    break;
 8002100:	e008      	b.n	8002114 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 8002102:	2302      	movs	r3, #2
 8002104:	77bb      	strb	r3, [r7, #30]
    break;
 8002106:	e005      	b.n	8002114 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 8002108:	2304      	movs	r3, #4
 800210a:	77bb      	strb	r3, [r7, #30]
    break;
 800210c:	e002      	b.n	8002114 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 800210e:	230c      	movs	r3, #12
 8002110:	77bb      	strb	r3, [r7, #30]
    break;
 8002112:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002114:	2300      	movs	r3, #0
 8002116:	77fb      	strb	r3, [r7, #31]
 8002118:	e014      	b.n	8002144 <LSM303AGR_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 800211a:	7ffb      	ldrb	r3, [r7, #31]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	3320      	adds	r3, #32
 8002120:	443b      	add	r3, r7
 8002122:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8002126:	b29a      	uxth	r2, r3
 8002128:	7fbb      	ldrb	r3, [r7, #30]
 800212a:	b29b      	uxth	r3, r3
 800212c:	fb12 f303 	smulbb	r3, r2, r3
 8002130:	b299      	uxth	r1, r3
 8002132:	7ffb      	ldrb	r3, [r7, #31]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	b20a      	sxth	r2, r1
 800213c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800213e:	7ffb      	ldrb	r3, [r7, #31]
 8002140:	3301      	adds	r3, #1
 8002142:	77fb      	strb	r3, [r7, #31]
 8002144:	7ffb      	ldrb	r3, [r7, #31]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d9e7      	bls.n	800211a <LSM303AGR_AccReadXYZ+0x156>
  }
}
 800214a:	bf00      	nop
 800214c:	bf00      	nop
 800214e:	3720      	adds	r7, #32
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 800215e:	2300      	movs	r3, #0
 8002160:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8002162:	2121      	movs	r1, #33	; 0x21
 8002164:	2032      	movs	r0, #50	; 0x32
 8002166:	f000 fb9c 	bl	80028a2 <COMPASSACCELERO_IO_Read>
 800216a:	4603      	mov	r3, r0
 800216c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	f023 0304 	bic.w	r3, r3, #4
 8002174:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8002176:	7bfa      	ldrb	r2, [r7, #15]
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	4313      	orrs	r3, r2
 800217c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	461a      	mov	r2, r3
 8002182:	2121      	movs	r1, #33	; 0x21
 8002184:	2032      	movs	r0, #50	; 0x32
 8002186:	f000 fb79 	bl	800287c <COMPASSACCELERO_IO_Write>
}
 800218a:	bf00      	nop
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b084      	sub	sp, #16
 8002196:	af00      	add	r7, sp, #0
 8002198:	4603      	mov	r3, r0
 800219a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 800219c:	2300      	movs	r3, #0
 800219e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 80021a0:	2122      	movs	r1, #34	; 0x22
 80021a2:	2032      	movs	r0, #50	; 0x32
 80021a4:	f000 fb7d 	bl	80028a2 <COMPASSACCELERO_IO_Read>
 80021a8:	4603      	mov	r3, r0
 80021aa:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 80021ac:	7bfa      	ldrb	r2, [r7, #15]
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	461a      	mov	r2, r3
 80021b8:	2122      	movs	r1, #34	; 0x22
 80021ba:	2032      	movs	r0, #50	; 0x32
 80021bc:	f000 fb5e 	bl	800287c <COMPASSACCELERO_IO_Write>
}
 80021c0:	bf00      	nop
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80021d2:	2300      	movs	r3, #0
 80021d4:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 80021d6:	2138      	movs	r1, #56	; 0x38
 80021d8:	2032      	movs	r0, #50	; 0x32
 80021da:	f000 fb62 	bl	80028a2 <COMPASSACCELERO_IO_Read>
 80021de:	4603      	mov	r3, r0
 80021e0:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 80021e2:	7bfa      	ldrb	r2, [r7, #15]
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
 80021ec:	461a      	mov	r2, r3
 80021ee:	2138      	movs	r1, #56	; 0x38
 80021f0:	2032      	movs	r0, #50	; 0x32
 80021f2:	f000 fb43 	bl	800287c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 80021f6:	230a      	movs	r3, #10
 80021f8:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	461a      	mov	r2, r3
 80021fe:	213a      	movs	r1, #58	; 0x3a
 8002200:	2032      	movs	r0, #50	; 0x32
 8002202:	f000 fb3b 	bl	800287c <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8002206:	2305      	movs	r3, #5
 8002208:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	461a      	mov	r2, r3
 800220e:	213b      	movs	r1, #59	; 0x3b
 8002210:	2032      	movs	r0, #50	; 0x32
 8002212:	f000 fb33 	bl	800287c <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	461a      	mov	r2, r3
 800221a:	213c      	movs	r1, #60	; 0x3c
 800221c:	2032      	movs	r0, #50	; 0x32
 800221e:	f000 fb2d 	bl	800287c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8002222:	2332      	movs	r3, #50	; 0x32
 8002224:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	461a      	mov	r2, r3
 800222a:	213d      	movs	r1, #61	; 0x3d
 800222c:	2032      	movs	r0, #50	; 0x32
 800222e:	f000 fb25 	bl	800287c <COMPASSACCELERO_IO_Write>
}
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 800223a:	b580      	push	{r7, lr}
 800223c:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 800223e:	f000 faed 	bl	800281c <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 8002242:	2080      	movs	r0, #128	; 0x80
 8002244:	f7ff ffa5 	bl	8002192 <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 8002248:	2004      	movs	r0, #4
 800224a:	f7ff ff83 	bl	8002154 <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 800224e:	2010      	movs	r0, #16
 8002250:	f7ff ffba 	bl	80021c8 <LSM303AGR_AccClickITEnable>
}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}

08002258 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002262:	2300      	movs	r3, #0
 8002264:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8002266:	f000 fab1 	bl	80027cc <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800226a:	88fb      	ldrh	r3, [r7, #6]
 800226c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	461a      	mov	r2, r3
 8002272:	2120      	movs	r1, #32
 8002274:	2032      	movs	r0, #50	; 0x32
 8002276:	f000 fb01 	bl	800287c <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 800227a:	2300      	movs	r3, #0
 800227c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 800227e:	7bfb      	ldrb	r3, [r7, #15]
 8002280:	461a      	mov	r2, r3
 8002282:	2123      	movs	r1, #35	; 0x23
 8002284:	2032      	movs	r0, #50	; 0x32
 8002286:	f000 faf9 	bl	800287c <COMPASSACCELERO_IO_Write>
}
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0
}
 8002296:	bf00      	nop
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80022a6:	2300      	movs	r3, #0
 80022a8:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 80022aa:	f000 fa8f 	bl	80027cc <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 80022ae:	210f      	movs	r1, #15
 80022b0:	2032      	movs	r0, #50	; 0x32
 80022b2:	f000 faf6 	bl	80028a2 <COMPASSACCELERO_IO_Read>
 80022b6:	4603      	mov	r3, r0
 80022b8:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80022ba:	79fb      	ldrb	r3, [r7, #7]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80022ca:	2124      	movs	r1, #36	; 0x24
 80022cc:	2032      	movs	r0, #50	; 0x32
 80022ce:	f000 fae8 	bl	80028a2 <COMPASSACCELERO_IO_Read>
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022dc:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	461a      	mov	r2, r3
 80022e2:	2124      	movs	r1, #36	; 0x24
 80022e4:	2032      	movs	r0, #50	; 0x32
 80022e6:	f000 fac9 	bl	800287c <COMPASSACCELERO_IO_Write>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b084      	sub	sp, #16
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	4603      	mov	r3, r0
 80022fa:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80022fc:	2121      	movs	r1, #33	; 0x21
 80022fe:	2032      	movs	r0, #50	; 0x32
 8002300:	f000 facf 	bl	80028a2 <COMPASSACCELERO_IO_Read>
 8002304:	4603      	mov	r3, r0
 8002306:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	4313      	orrs	r3, r2
 8002316:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	461a      	mov	r2, r3
 800231c:	2121      	movs	r1, #33	; 0x21
 800231e:	2032      	movs	r0, #50	; 0x32
 8002320:	f000 faac 	bl	800287c <COMPASSACCELERO_IO_Write>
}
 8002324:	bf00      	nop
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8002336:	2121      	movs	r1, #33	; 0x21
 8002338:	2032      	movs	r0, #50	; 0x32
 800233a:	f000 fab2 	bl	80028a2 <COMPASSACCELERO_IO_Read>
 800233e:	4603      	mov	r3, r0
 8002340:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	f023 0308 	bic.w	r3, r3, #8
 8002348:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 800234a:	7bfa      	ldrb	r2, [r7, #15]
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	4313      	orrs	r3, r2
 8002350:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	461a      	mov	r2, r3
 8002356:	2121      	movs	r1, #33	; 0x21
 8002358:	2032      	movs	r0, #50	; 0x32
 800235a:	f000 fa8f 	bl	800287c <COMPASSACCELERO_IO_Write>
}
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b088      	sub	sp, #32
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 800236e:	2300      	movs	r3, #0
 8002370:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8002376:	2301      	movs	r3, #1
 8002378:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800237a:	2123      	movs	r1, #35	; 0x23
 800237c:	2032      	movs	r0, #50	; 0x32
 800237e:	f000 fa90 	bl	80028a2 <COMPASSACCELERO_IO_Read>
 8002382:	4603      	mov	r3, r0
 8002384:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8002386:	2124      	movs	r1, #36	; 0x24
 8002388:	2032      	movs	r0, #50	; 0x32
 800238a:	f000 fa8a 	bl	80028a2 <COMPASSACCELERO_IO_Read>
 800238e:	4603      	mov	r3, r0
 8002390:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8002392:	2128      	movs	r1, #40	; 0x28
 8002394:	2032      	movs	r0, #50	; 0x32
 8002396:	f000 fa84 	bl	80028a2 <COMPASSACCELERO_IO_Read>
 800239a:	4603      	mov	r3, r0
 800239c:	b25b      	sxtb	r3, r3
 800239e:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 80023a0:	2129      	movs	r1, #41	; 0x29
 80023a2:	2032      	movs	r0, #50	; 0x32
 80023a4:	f000 fa7d 	bl	80028a2 <COMPASSACCELERO_IO_Read>
 80023a8:	4603      	mov	r3, r0
 80023aa:	b25b      	sxtb	r3, r3
 80023ac:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 80023ae:	212a      	movs	r1, #42	; 0x2a
 80023b0:	2032      	movs	r0, #50	; 0x32
 80023b2:	f000 fa76 	bl	80028a2 <COMPASSACCELERO_IO_Read>
 80023b6:	4603      	mov	r3, r0
 80023b8:	b25b      	sxtb	r3, r3
 80023ba:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 80023bc:	212b      	movs	r1, #43	; 0x2b
 80023be:	2032      	movs	r0, #50	; 0x32
 80023c0:	f000 fa6f 	bl	80028a2 <COMPASSACCELERO_IO_Read>
 80023c4:	4603      	mov	r3, r0
 80023c6:	b25b      	sxtb	r3, r3
 80023c8:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 80023ca:	212c      	movs	r1, #44	; 0x2c
 80023cc:	2032      	movs	r0, #50	; 0x32
 80023ce:	f000 fa68 	bl	80028a2 <COMPASSACCELERO_IO_Read>
 80023d2:	4603      	mov	r3, r0
 80023d4:	b25b      	sxtb	r3, r3
 80023d6:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 80023d8:	212d      	movs	r1, #45	; 0x2d
 80023da:	2032      	movs	r0, #50	; 0x32
 80023dc:	f000 fa61 	bl	80028a2 <COMPASSACCELERO_IO_Read>
 80023e0:	4603      	mov	r3, r0
 80023e2:	b25b      	sxtb	r3, r3
 80023e4:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 80023e6:	7d3b      	ldrb	r3, [r7, #20]
 80023e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d123      	bne.n	8002438 <LSM303DLHC_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 80023f0:	2300      	movs	r3, #0
 80023f2:	77fb      	strb	r3, [r7, #31]
 80023f4:	e01c      	b.n	8002430 <LSM303DLHC_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 80023f6:	7ffb      	ldrb	r3, [r7, #31]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	3301      	adds	r3, #1
 80023fc:	3320      	adds	r3, #32
 80023fe:	443b      	add	r3, r7
 8002400:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8002404:	b29b      	uxth	r3, r3
 8002406:	021b      	lsls	r3, r3, #8
 8002408:	b29a      	uxth	r2, r3
 800240a:	7ffb      	ldrb	r3, [r7, #31]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	3320      	adds	r3, #32
 8002410:	443b      	add	r3, r7
 8002412:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8002416:	b29b      	uxth	r3, r3
 8002418:	4413      	add	r3, r2
 800241a:	b29a      	uxth	r2, r3
 800241c:	7ffb      	ldrb	r3, [r7, #31]
 800241e:	b212      	sxth	r2, r2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	3320      	adds	r3, #32
 8002424:	443b      	add	r3, r7
 8002426:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 800242a:	7ffb      	ldrb	r3, [r7, #31]
 800242c:	3301      	adds	r3, #1
 800242e:	77fb      	strb	r3, [r7, #31]
 8002430:	7ffb      	ldrb	r3, [r7, #31]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d9df      	bls.n	80023f6 <LSM303DLHC_AccReadXYZ+0x90>
 8002436:	e022      	b.n	800247e <LSM303DLHC_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8002438:	2300      	movs	r3, #0
 800243a:	77fb      	strb	r3, [r7, #31]
 800243c:	e01c      	b.n	8002478 <LSM303DLHC_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 800243e:	7ffb      	ldrb	r3, [r7, #31]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	3320      	adds	r3, #32
 8002444:	443b      	add	r3, r7
 8002446:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800244a:	b29b      	uxth	r3, r3
 800244c:	021b      	lsls	r3, r3, #8
 800244e:	b29a      	uxth	r2, r3
 8002450:	7ffb      	ldrb	r3, [r7, #31]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	3301      	adds	r3, #1
 8002456:	3320      	adds	r3, #32
 8002458:	443b      	add	r3, r7
 800245a:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800245e:	b29b      	uxth	r3, r3
 8002460:	4413      	add	r3, r2
 8002462:	b29a      	uxth	r2, r3
 8002464:	7ffb      	ldrb	r3, [r7, #31]
 8002466:	b212      	sxth	r2, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	3320      	adds	r3, #32
 800246c:	443b      	add	r3, r7
 800246e:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8002472:	7ffb      	ldrb	r3, [r7, #31]
 8002474:	3301      	adds	r3, #1
 8002476:	77fb      	strb	r3, [r7, #31]
 8002478:	7ffb      	ldrb	r3, [r7, #31]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d9df      	bls.n	800243e <LSM303DLHC_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 800247e:	7d3b      	ldrb	r3, [r7, #20]
 8002480:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002484:	2b30      	cmp	r3, #48	; 0x30
 8002486:	d013      	beq.n	80024b0 <LSM303DLHC_AccReadXYZ+0x14a>
 8002488:	2b30      	cmp	r3, #48	; 0x30
 800248a:	dc14      	bgt.n	80024b6 <LSM303DLHC_AccReadXYZ+0x150>
 800248c:	2b20      	cmp	r3, #32
 800248e:	d00c      	beq.n	80024aa <LSM303DLHC_AccReadXYZ+0x144>
 8002490:	2b20      	cmp	r3, #32
 8002492:	dc10      	bgt.n	80024b6 <LSM303DLHC_AccReadXYZ+0x150>
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <LSM303DLHC_AccReadXYZ+0x138>
 8002498:	2b10      	cmp	r3, #16
 800249a:	d003      	beq.n	80024a4 <LSM303DLHC_AccReadXYZ+0x13e>
 800249c:	e00b      	b.n	80024b6 <LSM303DLHC_AccReadXYZ+0x150>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 800249e:	2301      	movs	r3, #1
 80024a0:	77bb      	strb	r3, [r7, #30]
    break;
 80024a2:	e008      	b.n	80024b6 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 80024a4:	2302      	movs	r3, #2
 80024a6:	77bb      	strb	r3, [r7, #30]
    break;
 80024a8:	e005      	b.n	80024b6 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 80024aa:	2304      	movs	r3, #4
 80024ac:	77bb      	strb	r3, [r7, #30]
    break;
 80024ae:	e002      	b.n	80024b6 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 80024b0:	230c      	movs	r3, #12
 80024b2:	77bb      	strb	r3, [r7, #30]
    break;
 80024b4:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80024b6:	2300      	movs	r3, #0
 80024b8:	77fb      	strb	r3, [r7, #31]
 80024ba:	e014      	b.n	80024e6 <LSM303DLHC_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 80024bc:	7ffb      	ldrb	r3, [r7, #31]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	3320      	adds	r3, #32
 80024c2:	443b      	add	r3, r7
 80024c4:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	7fbb      	ldrb	r3, [r7, #30]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	fb12 f303 	smulbb	r3, r2, r3
 80024d2:	b299      	uxth	r1, r3
 80024d4:	7ffb      	ldrb	r3, [r7, #31]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	4413      	add	r3, r2
 80024dc:	b20a      	sxth	r2, r1
 80024de:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80024e0:	7ffb      	ldrb	r3, [r7, #31]
 80024e2:	3301      	adds	r3, #1
 80024e4:	77fb      	strb	r3, [r7, #31]
 80024e6:	7ffb      	ldrb	r3, [r7, #31]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d9e7      	bls.n	80024bc <LSM303DLHC_AccReadXYZ+0x156>
  }
}
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
 80024f0:	3720      	adds	r7, #32
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8002500:	2300      	movs	r3, #0
 8002502:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8002504:	2121      	movs	r1, #33	; 0x21
 8002506:	2032      	movs	r0, #50	; 0x32
 8002508:	f000 f9cb 	bl	80028a2 <COMPASSACCELERO_IO_Read>
 800250c:	4603      	mov	r3, r0
 800250e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	f023 0304 	bic.w	r3, r3, #4
 8002516:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8002518:	7bfa      	ldrb	r2, [r7, #15]
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	4313      	orrs	r3, r2
 800251e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	461a      	mov	r2, r3
 8002524:	2121      	movs	r1, #33	; 0x21
 8002526:	2032      	movs	r0, #50	; 0x32
 8002528:	f000 f9a8 	bl	800287c <COMPASSACCELERO_IO_Write>
}
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 800253e:	2300      	movs	r3, #0
 8002540:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8002542:	2122      	movs	r1, #34	; 0x22
 8002544:	2032      	movs	r0, #50	; 0x32
 8002546:	f000 f9ac 	bl	80028a2 <COMPASSACCELERO_IO_Read>
 800254a:	4603      	mov	r3, r0
 800254c:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 800254e:	7bfa      	ldrb	r2, [r7, #15]
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	4313      	orrs	r3, r2
 8002554:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	461a      	mov	r2, r3
 800255a:	2122      	movs	r1, #34	; 0x22
 800255c:	2032      	movs	r0, #50	; 0x32
 800255e:	f000 f98d 	bl	800287c <COMPASSACCELERO_IO_Write>
}
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 800256a:	b580      	push	{r7, lr}
 800256c:	b084      	sub	sp, #16
 800256e:	af00      	add	r7, sp, #0
 8002570:	4603      	mov	r3, r0
 8002572:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8002574:	2300      	movs	r3, #0
 8002576:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8002578:	2138      	movs	r1, #56	; 0x38
 800257a:	2032      	movs	r0, #50	; 0x32
 800257c:	f000 f991 	bl	80028a2 <COMPASSACCELERO_IO_Read>
 8002580:	4603      	mov	r3, r0
 8002582:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8002584:	7bfa      	ldrb	r2, [r7, #15]
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	4313      	orrs	r3, r2
 800258a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	461a      	mov	r2, r3
 8002590:	2138      	movs	r1, #56	; 0x38
 8002592:	2032      	movs	r0, #50	; 0x32
 8002594:	f000 f972 	bl	800287c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8002598:	230a      	movs	r3, #10
 800259a:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	461a      	mov	r2, r3
 80025a0:	213a      	movs	r1, #58	; 0x3a
 80025a2:	2032      	movs	r0, #50	; 0x32
 80025a4:	f000 f96a 	bl	800287c <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 80025a8:	2305      	movs	r3, #5
 80025aa:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	461a      	mov	r2, r3
 80025b0:	213b      	movs	r1, #59	; 0x3b
 80025b2:	2032      	movs	r0, #50	; 0x32
 80025b4:	f000 f962 	bl	800287c <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	461a      	mov	r2, r3
 80025bc:	213c      	movs	r1, #60	; 0x3c
 80025be:	2032      	movs	r0, #50	; 0x32
 80025c0:	f000 f95c 	bl	800287c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 80025c4:	2332      	movs	r3, #50	; 0x32
 80025c6:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
 80025ca:	461a      	mov	r2, r3
 80025cc:	213d      	movs	r1, #61	; 0x3d
 80025ce:	2032      	movs	r0, #50	; 0x32
 80025d0:	f000 f954 	bl	800287c <COMPASSACCELERO_IO_Write>
}
 80025d4:	bf00      	nop
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 80025e0:	f000 f91c 	bl	800281c <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 80025e4:	2080      	movs	r0, #128	; 0x80
 80025e6:	f7ff ffa5 	bl	8002534 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 80025ea:	2004      	movs	r0, #4
 80025ec:	f7ff ff83 	bl	80024f6 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 80025f0:	2010      	movs	r0, #16
 80025f2:	f7ff ffba 	bl	800256a <LSM303DLHC_AccClickITEnable>
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002600:	4814      	ldr	r0, [pc, #80]	; (8002654 <I2Cx_Init+0x58>)
 8002602:	f001 fb0d 	bl	8003c20 <HAL_I2C_GetState>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d121      	bne.n	8002650 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 800260c:	4b11      	ldr	r3, [pc, #68]	; (8002654 <I2Cx_Init+0x58>)
 800260e:	4a12      	ldr	r2, [pc, #72]	; (8002658 <I2Cx_Init+0x5c>)
 8002610:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 8002612:	4b10      	ldr	r3, [pc, #64]	; (8002654 <I2Cx_Init+0x58>)
 8002614:	2243      	movs	r2, #67	; 0x43
 8002616:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8002618:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <I2Cx_Init+0x58>)
 800261a:	4a10      	ldr	r2, [pc, #64]	; (800265c <I2Cx_Init+0x60>)
 800261c:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800261e:	4b0d      	ldr	r3, [pc, #52]	; (8002654 <I2Cx_Init+0x58>)
 8002620:	2200      	movs	r2, #0
 8002622:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002624:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <I2Cx_Init+0x58>)
 8002626:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800262a:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 800262c:	4b09      	ldr	r3, [pc, #36]	; (8002654 <I2Cx_Init+0x58>)
 800262e:	2200      	movs	r2, #0
 8002630:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 8002632:	4b08      	ldr	r3, [pc, #32]	; (8002654 <I2Cx_Init+0x58>)
 8002634:	2200      	movs	r2, #0
 8002636:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8002638:	4b06      	ldr	r3, [pc, #24]	; (8002654 <I2Cx_Init+0x58>)
 800263a:	2200      	movs	r2, #0
 800263c:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 800263e:	4b05      	ldr	r3, [pc, #20]	; (8002654 <I2Cx_Init+0x58>)
 8002640:	2200      	movs	r2, #0
 8002642:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8002644:	4803      	ldr	r0, [pc, #12]	; (8002654 <I2Cx_Init+0x58>)
 8002646:	f000 f86b 	bl	8002720 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800264a:	4802      	ldr	r0, [pc, #8]	; (8002654 <I2Cx_Init+0x58>)
 800264c:	f000 fe54 	bl	80032f8 <HAL_I2C_Init>
  }
}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}
 8002654:	2000077c 	.word	0x2000077c
 8002658:	40005400 	.word	0x40005400
 800265c:	000186a0 	.word	0x000186a0

08002660 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af04      	add	r7, sp, #16
 8002666:	4603      	mov	r3, r0
 8002668:	80fb      	strh	r3, [r7, #6]
 800266a:	460b      	mov	r3, r1
 800266c:	717b      	strb	r3, [r7, #5]
 800266e:	4613      	mov	r3, r2
 8002670:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8002676:	797b      	ldrb	r3, [r7, #5]
 8002678:	b29a      	uxth	r2, r3
 800267a:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <I2Cx_WriteData+0x48>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	88f9      	ldrh	r1, [r7, #6]
 8002680:	9302      	str	r3, [sp, #8]
 8002682:	2301      	movs	r3, #1
 8002684:	9301      	str	r3, [sp, #4]
 8002686:	1d3b      	adds	r3, r7, #4
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	2301      	movs	r3, #1
 800268c:	4807      	ldr	r0, [pc, #28]	; (80026ac <I2Cx_WriteData+0x4c>)
 800268e:	f000 ffa7 	bl	80035e0 <HAL_I2C_Mem_Write>
 8002692:	4603      	mov	r3, r0
 8002694:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002696:	7bfb      	ldrb	r3, [r7, #15]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 800269c:	f000 f834 	bl	8002708 <I2Cx_Error>
  }
}
 80026a0:	bf00      	nop
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000074 	.word	0x20000074
 80026ac:	2000077c 	.word	0x2000077c

080026b0 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af04      	add	r7, sp, #16
 80026b6:	4603      	mov	r3, r0
 80026b8:	460a      	mov	r2, r1
 80026ba:	80fb      	strh	r3, [r7, #6]
 80026bc:	4613      	mov	r3, r2
 80026be:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80026c8:	797b      	ldrb	r3, [r7, #5]
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <I2Cx_ReadData+0x50>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	88f9      	ldrh	r1, [r7, #6]
 80026d2:	9302      	str	r3, [sp, #8]
 80026d4:	2301      	movs	r3, #1
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	f107 030e 	add.w	r3, r7, #14
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	2301      	movs	r3, #1
 80026e0:	4808      	ldr	r0, [pc, #32]	; (8002704 <I2Cx_ReadData+0x54>)
 80026e2:	f001 f877 	bl	80037d4 <HAL_I2C_Mem_Read>
 80026e6:	4603      	mov	r3, r0
 80026e8:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 80026f0:	f000 f80a 	bl	8002708 <I2Cx_Error>
  }
  return value;
 80026f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000074 	.word	0x20000074
 8002704:	2000077c 	.word	0x2000077c

08002708 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 800270c:	4803      	ldr	r0, [pc, #12]	; (800271c <I2Cx_Error+0x14>)
 800270e:	f000 ff37 	bl	8003580 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8002712:	f7ff ff73 	bl	80025fc <I2Cx_Init>
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	2000077c 	.word	0x2000077c

08002720 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08a      	sub	sp, #40	; 0x28
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 8002728:	2300      	movs	r3, #0
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	4b25      	ldr	r3, [pc, #148]	; (80027c4 <I2Cx_MspInit+0xa4>)
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	4a24      	ldr	r2, [pc, #144]	; (80027c4 <I2Cx_MspInit+0xa4>)
 8002732:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002736:	6413      	str	r3, [r2, #64]	; 0x40
 8002738:	4b22      	ldr	r3, [pc, #136]	; (80027c4 <I2Cx_MspInit+0xa4>)
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8002744:	2300      	movs	r3, #0
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	4b1e      	ldr	r3, [pc, #120]	; (80027c4 <I2Cx_MspInit+0xa4>)
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	4a1d      	ldr	r2, [pc, #116]	; (80027c4 <I2Cx_MspInit+0xa4>)
 800274e:	f043 0302 	orr.w	r3, r3, #2
 8002752:	6313      	str	r3, [r2, #48]	; 0x30
 8002754:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <I2Cx_MspInit+0xa4>)
 8002756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 8002760:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002764:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8002766:	2312      	movs	r3, #18
 8002768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800276e:	2302      	movs	r3, #2
 8002770:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8002772:	2304      	movs	r3, #4
 8002774:	627b      	str	r3, [r7, #36]	; 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8002776:	f107 0314 	add.w	r3, r7, #20
 800277a:	4619      	mov	r1, r3
 800277c:	4812      	ldr	r0, [pc, #72]	; (80027c8 <I2Cx_MspInit+0xa8>)
 800277e:	f000 fb39 	bl	8002df4 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002782:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <I2Cx_MspInit+0xa4>)
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	4a0f      	ldr	r2, [pc, #60]	; (80027c4 <I2Cx_MspInit+0xa4>)
 8002788:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800278c:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800278e:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <I2Cx_MspInit+0xa4>)
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	4a0c      	ldr	r2, [pc, #48]	; (80027c4 <I2Cx_MspInit+0xa4>)
 8002794:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002798:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800279a:	2200      	movs	r2, #0
 800279c:	210f      	movs	r1, #15
 800279e:	201f      	movs	r0, #31
 80027a0:	f000 faf1 	bl	8002d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80027a4:	201f      	movs	r0, #31
 80027a6:	f000 fb0a 	bl	8002dbe <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80027aa:	2200      	movs	r2, #0
 80027ac:	210f      	movs	r1, #15
 80027ae:	2020      	movs	r0, #32
 80027b0:	f000 fae9 	bl	8002d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 80027b4:	2020      	movs	r0, #32
 80027b6:	f000 fb02 	bl	8002dbe <HAL_NVIC_EnableIRQ>
}
 80027ba:	bf00      	nop
 80027bc:	3728      	adds	r7, #40	; 0x28
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40020400 	.word	0x40020400

080027cc <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	603b      	str	r3, [r7, #0]
 80027d6:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <COMPASSACCELERO_IO_Init+0x48>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	4a0e      	ldr	r2, [pc, #56]	; (8002814 <COMPASSACCELERO_IO_Init+0x48>)
 80027dc:	f043 0310 	orr.w	r3, r3, #16
 80027e0:	6313      	str	r3, [r2, #48]	; 0x30
 80027e2:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <COMPASSACCELERO_IO_Init+0x48>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	603b      	str	r3, [r7, #0]
 80027ec:	683b      	ldr	r3, [r7, #0]
  
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 80027ee:	2304      	movs	r3, #4
 80027f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80027fa:	2302      	movs	r3, #2
 80027fc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 80027fe:	1d3b      	adds	r3, r7, #4
 8002800:	4619      	mov	r1, r3
 8002802:	4805      	ldr	r0, [pc, #20]	; (8002818 <COMPASSACCELERO_IO_Init+0x4c>)
 8002804:	f000 faf6 	bl	8002df4 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8002808:	f7ff fef8 	bl	80025fc <I2Cx_Init>
}
 800280c:	bf00      	nop
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40023800 	.word	0x40023800
 8002818:	40021000 	.word	0x40021000

0800281c <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	603b      	str	r3, [r7, #0]
 8002826:	4b13      	ldr	r3, [pc, #76]	; (8002874 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	4a12      	ldr	r2, [pc, #72]	; (8002874 <COMPASSACCELERO_IO_ITConfig+0x58>)
 800282c:	f043 0310 	orr.w	r3, r3, #16
 8002830:	6313      	str	r3, [r2, #48]	; 0x30
 8002832:	4b10      	ldr	r3, [pc, #64]	; (8002874 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	f003 0310 	and.w	r3, r3, #16
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800283e:	2330      	movs	r3, #48	; 0x30
 8002840:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8002842:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002846:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002848:	2302      	movs	r3, #2
 800284a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800284c:	2300      	movs	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8002850:	1d3b      	adds	r3, r7, #4
 8002852:	4619      	mov	r1, r3
 8002854:	4808      	ldr	r0, [pc, #32]	; (8002878 <COMPASSACCELERO_IO_ITConfig+0x5c>)
 8002856:	f000 facd 	bl	8002df4 <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 800285a:	2200      	movs	r2, #0
 800285c:	210f      	movs	r1, #15
 800285e:	200a      	movs	r0, #10
 8002860:	f000 fa91 	bl	8002d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8002864:	200a      	movs	r0, #10
 8002866:	f000 faaa 	bl	8002dbe <HAL_NVIC_EnableIRQ>
}
 800286a:	bf00      	nop
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40023800 	.word	0x40023800
 8002878:	40021000 	.word	0x40021000

0800287c <COMPASSACCELERO_IO_Write>:
  * @param  DeviceAddr: the slave address to be programmed
  * @param  RegisterAddr: the COMPASS / ACCELERO register to be written
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	80fb      	strh	r3, [r7, #6]
 8002886:	460b      	mov	r3, r1
 8002888:	717b      	strb	r3, [r7, #5]
 800288a:	4613      	mov	r3, r2
 800288c:	713b      	strb	r3, [r7, #4]
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 800288e:	793a      	ldrb	r2, [r7, #4]
 8002890:	7979      	ldrb	r1, [r7, #5]
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff fee3 	bl	8002660 <I2Cx_WriteData>
}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr: the COMPASS / ACCELERO internal address register to read from
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	4603      	mov	r3, r0
 80028aa:	460a      	mov	r2, r1
 80028ac:	80fb      	strh	r3, [r7, #6]
 80028ae:	4613      	mov	r3, r2
 80028b0:	717b      	strb	r3, [r7, #5]
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 80028b2:	797a      	ldrb	r2, [r7, #5]
 80028b4:	88fb      	ldrh	r3, [r7, #6]
 80028b6:	4611      	mov	r1, r2
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff fef9 	bl	80026b0 <I2Cx_ReadData>
 80028be:	4603      	mov	r3, r0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 80028d2:	2300      	movs	r3, #0
 80028d4:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 80028de:	4b58      	ldr	r3, [pc, #352]	; (8002a40 <BSP_ACCELERO_Init+0x178>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	4798      	blx	r3
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b33      	cmp	r3, #51	; 0x33
 80028e8:	d14f      	bne.n	800298a <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 80028ea:	4b56      	ldr	r3, [pc, #344]	; (8002a44 <BSP_ACCELERO_Init+0x17c>)
 80028ec:	4a54      	ldr	r2, [pc, #336]	; (8002a40 <BSP_ACCELERO_Init+0x178>)
 80028ee:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 80028f0:	2300      	movs	r3, #0
 80028f2:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 80028f4:	2340      	movs	r3, #64	; 0x40
 80028f6:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 80028f8:	2307      	movs	r3, #7
 80028fa:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 80028fc:	2300      	movs	r3, #0
 80028fe:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 8002900:	2300      	movs	r3, #0
 8002902:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 8002904:	2300      	movs	r3, #0
 8002906:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 8002908:	2308      	movs	r3, #8
 800290a:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 800290c:	7b3a      	ldrb	r2, [r7, #12]
 800290e:	7b7b      	ldrb	r3, [r7, #13]
 8002910:	4313      	orrs	r3, r2
 8002912:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8002914:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002916:	4313      	orrs	r3, r2
 8002918:	b2db      	uxtb	r3, r3
 800291a:	b29a      	uxth	r2, r3
 800291c:	8abb      	ldrh	r3, [r7, #20]
 800291e:	4313      	orrs	r3, r2
 8002920:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8002922:	7c3a      	ldrb	r2, [r7, #16]
 8002924:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8002926:	4313      	orrs	r3, r2
 8002928:	b2da      	uxtb	r2, r3
 800292a:	7cbb      	ldrb	r3, [r7, #18]
 800292c:	4313      	orrs	r3, r2
 800292e:	b2da      	uxtb	r2, r3
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	4313      	orrs	r3, r2
 8002934:	b2db      	uxtb	r3, r3
 8002936:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8002938:	b21a      	sxth	r2, r3
 800293a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800293e:	4313      	orrs	r3, r2
 8002940:	b21b      	sxth	r3, r3
 8002942:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002944:	4b3f      	ldr	r3, [pc, #252]	; (8002a44 <BSP_ACCELERO_Init+0x17c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	8aba      	ldrh	r2, [r7, #20]
 800294c:	4610      	mov	r0, r2
 800294e:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 8002950:	2380      	movs	r3, #128	; 0x80
 8002952:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 8002954:	2310      	movs	r3, #16
 8002956:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 8002958:	2300      	movs	r3, #0
 800295a:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 800295c:	2300      	movs	r3, #0
 800295e:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002960:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8002962:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002964:	4313      	orrs	r3, r2
 8002966:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8002968:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800296a:	4313      	orrs	r3, r2
 800296c:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 800296e:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002970:	4313      	orrs	r3, r2
 8002972:	b2db      	uxtb	r3, r3
 8002974:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8002976:	4b33      	ldr	r3, [pc, #204]	; (8002a44 <BSP_ACCELERO_Init+0x17c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	8aba      	ldrh	r2, [r7, #20]
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	4610      	mov	r0, r2
 8002982:	4798      	blx	r3

    ret = ACCELERO_OK;
 8002984:	2300      	movs	r3, #0
 8002986:	75fb      	strb	r3, [r7, #23]
 8002988:	e054      	b.n	8002a34 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 800298a:	4b2f      	ldr	r3, [pc, #188]	; (8002a48 <BSP_ACCELERO_Init+0x180>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	4798      	blx	r3
 8002990:	4603      	mov	r3, r0
 8002992:	2b33      	cmp	r3, #51	; 0x33
 8002994:	d14e      	bne.n	8002a34 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 8002996:	4b2b      	ldr	r3, [pc, #172]	; (8002a44 <BSP_ACCELERO_Init+0x17c>)
 8002998:	4a2b      	ldr	r2, [pc, #172]	; (8002a48 <BSP_ACCELERO_Init+0x180>)
 800299a:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 800299c:	2300      	movs	r3, #0
 800299e:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 80029a0:	2340      	movs	r3, #64	; 0x40
 80029a2:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 80029a4:	2307      	movs	r3, #7
 80029a6:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 80029a8:	2300      	movs	r3, #0
 80029aa:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 80029ac:	2300      	movs	r3, #0
 80029ae:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 80029b0:	2300      	movs	r3, #0
 80029b2:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 80029b4:	2308      	movs	r3, #8
 80029b6:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 80029b8:	7b3a      	ldrb	r2, [r7, #12]
 80029ba:	7b7b      	ldrb	r3, [r7, #13]
 80029bc:	4313      	orrs	r3, r2
 80029be:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 80029c0:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 80029c2:	4313      	orrs	r3, r2
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	8abb      	ldrh	r3, [r7, #20]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80029ce:	7c3a      	ldrb	r2, [r7, #16]
 80029d0:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 80029d2:	4313      	orrs	r3, r2
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	7cbb      	ldrb	r3, [r7, #18]
 80029d8:	4313      	orrs	r3, r2
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	4313      	orrs	r3, r2
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80029e4:	b21a      	sxth	r2, r3
 80029e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	b21b      	sxth	r3, r3
 80029ee:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80029f0:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <BSP_ACCELERO_Init+0x17c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	8aba      	ldrh	r2, [r7, #20]
 80029f8:	4610      	mov	r0, r2
 80029fa:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 80029fc:	2380      	movs	r3, #128	; 0x80
 80029fe:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 8002a00:	2310      	movs	r3, #16
 8002a02:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 8002a04:	2300      	movs	r3, #0
 8002a06:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002a0c:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8002a0e:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002a10:	4313      	orrs	r3, r2
 8002a12:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8002a14:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002a16:	4313      	orrs	r3, r2
 8002a18:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8002a22:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <BSP_ACCELERO_Init+0x17c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a28:	8aba      	ldrh	r2, [r7, #20]
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4798      	blx	r3

    ret = ACCELERO_OK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8002a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000040 	.word	0x20000040
 8002a44:	200007d0 	.word	0x200007d0
 8002a48:	2000000c 	.word	0x2000000c

08002a4c <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	81fb      	strh	r3, [r7, #14]

  if(AccelerometerDrv->GetXYZ!= NULL)
 8002a58:	4b10      	ldr	r3, [pc, #64]	; (8002a9c <BSP_ACCELERO_GetXYZ+0x50>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d018      	beq.n	8002a94 <BSP_ACCELERO_GetXYZ+0x48>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 8002a62:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <BSP_ACCELERO_GetXYZ+0x50>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	4798      	blx	r3

    /* Switch X and Y Axes in case of LSM303DLHC MEMS */
    if(AccelerometerDrv == &Lsm303dlhcDrv)
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <BSP_ACCELERO_GetXYZ+0x50>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a0b      	ldr	r2, [pc, #44]	; (8002aa0 <BSP_ACCELERO_GetXYZ+0x54>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d10e      	bne.n	8002a94 <BSP_ACCELERO_GetXYZ+0x48>
    {
      SwitchXY  = pDataXYZ[0];
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	801a      	strh	r2, [r3, #0]

      /* Invert Y Axis to be conpliant with LIS3DSH */
      pDataXYZ[1] = -SwitchXY;
 8002a86:	89fb      	ldrh	r3, [r7, #14]
 8002a88:	425b      	negs	r3, r3
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3302      	adds	r3, #2
 8002a90:	b212      	sxth	r2, r2
 8002a92:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8002a94:	bf00      	nop
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	200007d0 	.word	0x200007d0
 8002aa0:	20000040 	.word	0x20000040

08002aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002aa8:	4b0e      	ldr	r3, [pc, #56]	; (8002ae4 <HAL_Init+0x40>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a0d      	ldr	r2, [pc, #52]	; (8002ae4 <HAL_Init+0x40>)
 8002aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ab2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <HAL_Init+0x40>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a0a      	ldr	r2, [pc, #40]	; (8002ae4 <HAL_Init+0x40>)
 8002aba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002abe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ac0:	4b08      	ldr	r3, [pc, #32]	; (8002ae4 <HAL_Init+0x40>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a07      	ldr	r2, [pc, #28]	; (8002ae4 <HAL_Init+0x40>)
 8002ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002acc:	2003      	movs	r0, #3
 8002ace:	f000 f94f 	bl	8002d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f000 f808 	bl	8002ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ad8:	f7fe ff8e 	bl	80019f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40023c00 	.word	0x40023c00

08002ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002af0:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <HAL_InitTick+0x54>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <HAL_InitTick+0x58>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	4619      	mov	r1, r3
 8002afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 f967 	bl	8002dda <HAL_SYSTICK_Config>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e00e      	b.n	8002b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b0f      	cmp	r3, #15
 8002b1a:	d80a      	bhi.n	8002b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	f04f 30ff 	mov.w	r0, #4294967295
 8002b24:	f000 f92f 	bl	8002d86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b28:	4a06      	ldr	r2, [pc, #24]	; (8002b44 <HAL_InitTick+0x5c>)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e000      	b.n	8002b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20000008 	.word	0x20000008
 8002b40:	2000007c 	.word	0x2000007c
 8002b44:	20000078 	.word	0x20000078

08002b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b4c:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <HAL_IncTick+0x20>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <HAL_IncTick+0x24>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4413      	add	r3, r2
 8002b58:	4a04      	ldr	r2, [pc, #16]	; (8002b6c <HAL_IncTick+0x24>)
 8002b5a:	6013      	str	r3, [r2, #0]
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	2000007c 	.word	0x2000007c
 8002b6c:	200007d4 	.word	0x200007d4

08002b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  return uwTick;
 8002b74:	4b03      	ldr	r3, [pc, #12]	; (8002b84 <HAL_GetTick+0x14>)
 8002b76:	681b      	ldr	r3, [r3, #0]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	200007d4 	.word	0x200007d4

08002b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b90:	f7ff ffee 	bl	8002b70 <HAL_GetTick>
 8002b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba0:	d005      	beq.n	8002bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <HAL_Delay+0x44>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4413      	add	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bae:	bf00      	nop
 8002bb0:	f7ff ffde 	bl	8002b70 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d8f7      	bhi.n	8002bb0 <HAL_Delay+0x28>
  {
  }
}
 8002bc0:	bf00      	nop
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	2000007c 	.word	0x2000007c

08002bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002be0:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <__NVIC_SetPriorityGrouping+0x44>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bec:	4013      	ands	r3, r2
 8002bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c02:	4a04      	ldr	r2, [pc, #16]	; (8002c14 <__NVIC_SetPriorityGrouping+0x44>)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	60d3      	str	r3, [r2, #12]
}
 8002c08:	bf00      	nop
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	e000ed00 	.word	0xe000ed00

08002c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c1c:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <__NVIC_GetPriorityGrouping+0x18>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	0a1b      	lsrs	r3, r3, #8
 8002c22:	f003 0307 	and.w	r3, r3, #7
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	e000ed00 	.word	0xe000ed00

08002c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	db0b      	blt.n	8002c5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	f003 021f 	and.w	r2, r3, #31
 8002c4c:	4907      	ldr	r1, [pc, #28]	; (8002c6c <__NVIC_EnableIRQ+0x38>)
 8002c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c52:	095b      	lsrs	r3, r3, #5
 8002c54:	2001      	movs	r0, #1
 8002c56:	fa00 f202 	lsl.w	r2, r0, r2
 8002c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	e000e100 	.word	0xe000e100

08002c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	6039      	str	r1, [r7, #0]
 8002c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	db0a      	blt.n	8002c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	490c      	ldr	r1, [pc, #48]	; (8002cbc <__NVIC_SetPriority+0x4c>)
 8002c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8e:	0112      	lsls	r2, r2, #4
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	440b      	add	r3, r1
 8002c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c98:	e00a      	b.n	8002cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	4908      	ldr	r1, [pc, #32]	; (8002cc0 <__NVIC_SetPriority+0x50>)
 8002ca0:	79fb      	ldrb	r3, [r7, #7]
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	3b04      	subs	r3, #4
 8002ca8:	0112      	lsls	r2, r2, #4
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	440b      	add	r3, r1
 8002cae:	761a      	strb	r2, [r3, #24]
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	e000e100 	.word	0xe000e100
 8002cc0:	e000ed00 	.word	0xe000ed00

08002cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b089      	sub	sp, #36	; 0x24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f1c3 0307 	rsb	r3, r3, #7
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	bf28      	it	cs
 8002ce2:	2304      	movcs	r3, #4
 8002ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	3304      	adds	r3, #4
 8002cea:	2b06      	cmp	r3, #6
 8002cec:	d902      	bls.n	8002cf4 <NVIC_EncodePriority+0x30>
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	3b03      	subs	r3, #3
 8002cf2:	e000      	b.n	8002cf6 <NVIC_EncodePriority+0x32>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43da      	mvns	r2, r3
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	401a      	ands	r2, r3
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	fa01 f303 	lsl.w	r3, r1, r3
 8002d16:	43d9      	mvns	r1, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d1c:	4313      	orrs	r3, r2
         );
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3724      	adds	r7, #36	; 0x24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d3c:	d301      	bcc.n	8002d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e00f      	b.n	8002d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d42:	4a0a      	ldr	r2, [pc, #40]	; (8002d6c <SysTick_Config+0x40>)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d4a:	210f      	movs	r1, #15
 8002d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d50:	f7ff ff8e 	bl	8002c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <SysTick_Config+0x40>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d5a:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <SysTick_Config+0x40>)
 8002d5c:	2207      	movs	r2, #7
 8002d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	e000e010 	.word	0xe000e010

08002d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7ff ff29 	bl	8002bd0 <__NVIC_SetPriorityGrouping>
}
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b086      	sub	sp, #24
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	607a      	str	r2, [r7, #4]
 8002d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d98:	f7ff ff3e 	bl	8002c18 <__NVIC_GetPriorityGrouping>
 8002d9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	68b9      	ldr	r1, [r7, #8]
 8002da2:	6978      	ldr	r0, [r7, #20]
 8002da4:	f7ff ff8e 	bl	8002cc4 <NVIC_EncodePriority>
 8002da8:	4602      	mov	r2, r0
 8002daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dae:	4611      	mov	r1, r2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff ff5d 	bl	8002c70 <__NVIC_SetPriority>
}
 8002db6:	bf00      	nop
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b082      	sub	sp, #8
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ff31 	bl	8002c34 <__NVIC_EnableIRQ>
}
 8002dd2:	bf00      	nop
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b082      	sub	sp, #8
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7ff ffa2 	bl	8002d2c <SysTick_Config>
 8002de8:	4603      	mov	r3, r0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b089      	sub	sp, #36	; 0x24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61fb      	str	r3, [r7, #28]
 8002e0e:	e159      	b.n	80030c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e10:	2201      	movs	r2, #1
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4013      	ands	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	f040 8148 	bne.w	80030be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d005      	beq.n	8002e46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d130      	bne.n	8002ea8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	2203      	movs	r2, #3
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	43db      	mvns	r3, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	f003 0201 	and.w	r2, r3, #1
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d017      	beq.n	8002ee4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	2203      	movs	r2, #3
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d123      	bne.n	8002f38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	08da      	lsrs	r2, r3, #3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3208      	adds	r2, #8
 8002ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	220f      	movs	r2, #15
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	691a      	ldr	r2, [r3, #16]
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	08da      	lsrs	r2, r3, #3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3208      	adds	r2, #8
 8002f32:	69b9      	ldr	r1, [r7, #24]
 8002f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	2203      	movs	r2, #3
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 0203 	and.w	r2, r3, #3
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 80a2 	beq.w	80030be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	4b57      	ldr	r3, [pc, #348]	; (80030dc <HAL_GPIO_Init+0x2e8>)
 8002f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f82:	4a56      	ldr	r2, [pc, #344]	; (80030dc <HAL_GPIO_Init+0x2e8>)
 8002f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f88:	6453      	str	r3, [r2, #68]	; 0x44
 8002f8a:	4b54      	ldr	r3, [pc, #336]	; (80030dc <HAL_GPIO_Init+0x2e8>)
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f96:	4a52      	ldr	r2, [pc, #328]	; (80030e0 <HAL_GPIO_Init+0x2ec>)
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	089b      	lsrs	r3, r3, #2
 8002f9c:	3302      	adds	r3, #2
 8002f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	220f      	movs	r2, #15
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a49      	ldr	r2, [pc, #292]	; (80030e4 <HAL_GPIO_Init+0x2f0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d019      	beq.n	8002ff6 <HAL_GPIO_Init+0x202>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a48      	ldr	r2, [pc, #288]	; (80030e8 <HAL_GPIO_Init+0x2f4>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d013      	beq.n	8002ff2 <HAL_GPIO_Init+0x1fe>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a47      	ldr	r2, [pc, #284]	; (80030ec <HAL_GPIO_Init+0x2f8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00d      	beq.n	8002fee <HAL_GPIO_Init+0x1fa>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a46      	ldr	r2, [pc, #280]	; (80030f0 <HAL_GPIO_Init+0x2fc>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d007      	beq.n	8002fea <HAL_GPIO_Init+0x1f6>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a45      	ldr	r2, [pc, #276]	; (80030f4 <HAL_GPIO_Init+0x300>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d101      	bne.n	8002fe6 <HAL_GPIO_Init+0x1f2>
 8002fe2:	2304      	movs	r3, #4
 8002fe4:	e008      	b.n	8002ff8 <HAL_GPIO_Init+0x204>
 8002fe6:	2307      	movs	r3, #7
 8002fe8:	e006      	b.n	8002ff8 <HAL_GPIO_Init+0x204>
 8002fea:	2303      	movs	r3, #3
 8002fec:	e004      	b.n	8002ff8 <HAL_GPIO_Init+0x204>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e002      	b.n	8002ff8 <HAL_GPIO_Init+0x204>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <HAL_GPIO_Init+0x204>
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	69fa      	ldr	r2, [r7, #28]
 8002ffa:	f002 0203 	and.w	r2, r2, #3
 8002ffe:	0092      	lsls	r2, r2, #2
 8003000:	4093      	lsls	r3, r2
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003008:	4935      	ldr	r1, [pc, #212]	; (80030e0 <HAL_GPIO_Init+0x2ec>)
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	089b      	lsrs	r3, r3, #2
 800300e:	3302      	adds	r3, #2
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003016:	4b38      	ldr	r3, [pc, #224]	; (80030f8 <HAL_GPIO_Init+0x304>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	43db      	mvns	r3, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4013      	ands	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800303a:	4a2f      	ldr	r2, [pc, #188]	; (80030f8 <HAL_GPIO_Init+0x304>)
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003040:	4b2d      	ldr	r3, [pc, #180]	; (80030f8 <HAL_GPIO_Init+0x304>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003064:	4a24      	ldr	r2, [pc, #144]	; (80030f8 <HAL_GPIO_Init+0x304>)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800306a:	4b23      	ldr	r3, [pc, #140]	; (80030f8 <HAL_GPIO_Init+0x304>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	43db      	mvns	r3, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4013      	ands	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800308e:	4a1a      	ldr	r2, [pc, #104]	; (80030f8 <HAL_GPIO_Init+0x304>)
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003094:	4b18      	ldr	r3, [pc, #96]	; (80030f8 <HAL_GPIO_Init+0x304>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	43db      	mvns	r3, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030b8:	4a0f      	ldr	r2, [pc, #60]	; (80030f8 <HAL_GPIO_Init+0x304>)
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	3301      	adds	r3, #1
 80030c2:	61fb      	str	r3, [r7, #28]
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	2b0f      	cmp	r3, #15
 80030c8:	f67f aea2 	bls.w	8002e10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030cc:	bf00      	nop
 80030ce:	bf00      	nop
 80030d0:	3724      	adds	r7, #36	; 0x24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	40023800 	.word	0x40023800
 80030e0:	40013800 	.word	0x40013800
 80030e4:	40020000 	.word	0x40020000
 80030e8:	40020400 	.word	0x40020400
 80030ec:	40020800 	.word	0x40020800
 80030f0:	40020c00 	.word	0x40020c00
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40013c00 	.word	0x40013c00

080030fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003106:	2300      	movs	r3, #0
 8003108:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800310e:	2300      	movs	r3, #0
 8003110:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	e0bb      	b.n	8003290 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003118:	2201      	movs	r2, #1
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	4013      	ands	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	429a      	cmp	r2, r3
 8003130:	f040 80ab 	bne.w	800328a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003134:	4a5c      	ldr	r2, [pc, #368]	; (80032a8 <HAL_GPIO_DeInit+0x1ac>)
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	089b      	lsrs	r3, r3, #2
 800313a:	3302      	adds	r3, #2
 800313c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003140:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f003 0303 	and.w	r3, r3, #3
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	220f      	movs	r2, #15
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	4013      	ands	r3, r2
 8003154:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a54      	ldr	r2, [pc, #336]	; (80032ac <HAL_GPIO_DeInit+0x1b0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d019      	beq.n	8003192 <HAL_GPIO_DeInit+0x96>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a53      	ldr	r2, [pc, #332]	; (80032b0 <HAL_GPIO_DeInit+0x1b4>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d013      	beq.n	800318e <HAL_GPIO_DeInit+0x92>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a52      	ldr	r2, [pc, #328]	; (80032b4 <HAL_GPIO_DeInit+0x1b8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d00d      	beq.n	800318a <HAL_GPIO_DeInit+0x8e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a51      	ldr	r2, [pc, #324]	; (80032b8 <HAL_GPIO_DeInit+0x1bc>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d007      	beq.n	8003186 <HAL_GPIO_DeInit+0x8a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a50      	ldr	r2, [pc, #320]	; (80032bc <HAL_GPIO_DeInit+0x1c0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d101      	bne.n	8003182 <HAL_GPIO_DeInit+0x86>
 800317e:	2304      	movs	r3, #4
 8003180:	e008      	b.n	8003194 <HAL_GPIO_DeInit+0x98>
 8003182:	2307      	movs	r3, #7
 8003184:	e006      	b.n	8003194 <HAL_GPIO_DeInit+0x98>
 8003186:	2303      	movs	r3, #3
 8003188:	e004      	b.n	8003194 <HAL_GPIO_DeInit+0x98>
 800318a:	2302      	movs	r3, #2
 800318c:	e002      	b.n	8003194 <HAL_GPIO_DeInit+0x98>
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <HAL_GPIO_DeInit+0x98>
 8003192:	2300      	movs	r3, #0
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	f002 0203 	and.w	r2, r2, #3
 800319a:	0092      	lsls	r2, r2, #2
 800319c:	4093      	lsls	r3, r2
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d132      	bne.n	800320a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80031a4:	4b46      	ldr	r3, [pc, #280]	; (80032c0 <HAL_GPIO_DeInit+0x1c4>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	43db      	mvns	r3, r3
 80031ac:	4944      	ldr	r1, [pc, #272]	; (80032c0 <HAL_GPIO_DeInit+0x1c4>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80031b2:	4b43      	ldr	r3, [pc, #268]	; (80032c0 <HAL_GPIO_DeInit+0x1c4>)
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	43db      	mvns	r3, r3
 80031ba:	4941      	ldr	r1, [pc, #260]	; (80032c0 <HAL_GPIO_DeInit+0x1c4>)
 80031bc:	4013      	ands	r3, r2
 80031be:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80031c0:	4b3f      	ldr	r3, [pc, #252]	; (80032c0 <HAL_GPIO_DeInit+0x1c4>)
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	43db      	mvns	r3, r3
 80031c8:	493d      	ldr	r1, [pc, #244]	; (80032c0 <HAL_GPIO_DeInit+0x1c4>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80031ce:	4b3c      	ldr	r3, [pc, #240]	; (80032c0 <HAL_GPIO_DeInit+0x1c4>)
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	43db      	mvns	r3, r3
 80031d6:	493a      	ldr	r1, [pc, #232]	; (80032c0 <HAL_GPIO_DeInit+0x1c4>)
 80031d8:	4013      	ands	r3, r2
 80031da:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	220f      	movs	r2, #15
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80031ec:	4a2e      	ldr	r2, [pc, #184]	; (80032a8 <HAL_GPIO_DeInit+0x1ac>)
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	089b      	lsrs	r3, r3, #2
 80031f2:	3302      	adds	r3, #2
 80031f4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	43da      	mvns	r2, r3
 80031fc:	482a      	ldr	r0, [pc, #168]	; (80032a8 <HAL_GPIO_DeInit+0x1ac>)
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	089b      	lsrs	r3, r3, #2
 8003202:	400a      	ands	r2, r1
 8003204:	3302      	adds	r3, #2
 8003206:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	2103      	movs	r1, #3
 8003214:	fa01 f303 	lsl.w	r3, r1, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	401a      	ands	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	08da      	lsrs	r2, r3, #3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3208      	adds	r2, #8
 8003228:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	220f      	movs	r2, #15
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43db      	mvns	r3, r3
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	08d2      	lsrs	r2, r2, #3
 8003240:	4019      	ands	r1, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3208      	adds	r2, #8
 8003246:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	2103      	movs	r1, #3
 8003254:	fa01 f303 	lsl.w	r3, r1, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	401a      	ands	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	2101      	movs	r1, #1
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	fa01 f303 	lsl.w	r3, r1, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	401a      	ands	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	2103      	movs	r1, #3
 800327e:	fa01 f303 	lsl.w	r3, r1, r3
 8003282:	43db      	mvns	r3, r3
 8003284:	401a      	ands	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	3301      	adds	r3, #1
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2b0f      	cmp	r3, #15
 8003294:	f67f af40 	bls.w	8003118 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003298:	bf00      	nop
 800329a:	bf00      	nop
 800329c:	371c      	adds	r7, #28
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	40013800 	.word	0x40013800
 80032ac:	40020000 	.word	0x40020000
 80032b0:	40020400 	.word	0x40020400
 80032b4:	40020800 	.word	0x40020800
 80032b8:	40020c00 	.word	0x40020c00
 80032bc:	40021000 	.word	0x40021000
 80032c0:	40013c00 	.word	0x40013c00

080032c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	807b      	strh	r3, [r7, #2]
 80032d0:	4613      	mov	r3, r2
 80032d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032d4:	787b      	ldrb	r3, [r7, #1]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032da:	887a      	ldrh	r2, [r7, #2]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032e0:	e003      	b.n	80032ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032e2:	887b      	ldrh	r3, [r7, #2]
 80032e4:	041a      	lsls	r2, r3, #16
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	619a      	str	r2, [r3, #24]
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e12b      	b.n	8003562 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fe fb92 	bl	8001a48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2224      	movs	r2, #36	; 0x24
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0201 	bic.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800334a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800335a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800335c:	f001 fc3a 	bl	8004bd4 <HAL_RCC_GetPCLK1Freq>
 8003360:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4a81      	ldr	r2, [pc, #516]	; (800356c <HAL_I2C_Init+0x274>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d807      	bhi.n	800337c <HAL_I2C_Init+0x84>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4a80      	ldr	r2, [pc, #512]	; (8003570 <HAL_I2C_Init+0x278>)
 8003370:	4293      	cmp	r3, r2
 8003372:	bf94      	ite	ls
 8003374:	2301      	movls	r3, #1
 8003376:	2300      	movhi	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	e006      	b.n	800338a <HAL_I2C_Init+0x92>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4a7d      	ldr	r2, [pc, #500]	; (8003574 <HAL_I2C_Init+0x27c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	bf94      	ite	ls
 8003384:	2301      	movls	r3, #1
 8003386:	2300      	movhi	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e0e7      	b.n	8003562 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4a78      	ldr	r2, [pc, #480]	; (8003578 <HAL_I2C_Init+0x280>)
 8003396:	fba2 2303 	umull	r2, r3, r2, r3
 800339a:	0c9b      	lsrs	r3, r3, #18
 800339c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	4a6a      	ldr	r2, [pc, #424]	; (800356c <HAL_I2C_Init+0x274>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d802      	bhi.n	80033cc <HAL_I2C_Init+0xd4>
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	3301      	adds	r3, #1
 80033ca:	e009      	b.n	80033e0 <HAL_I2C_Init+0xe8>
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033d2:	fb02 f303 	mul.w	r3, r2, r3
 80033d6:	4a69      	ldr	r2, [pc, #420]	; (800357c <HAL_I2C_Init+0x284>)
 80033d8:	fba2 2303 	umull	r2, r3, r2, r3
 80033dc:	099b      	lsrs	r3, r3, #6
 80033de:	3301      	adds	r3, #1
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6812      	ldr	r2, [r2, #0]
 80033e4:	430b      	orrs	r3, r1
 80033e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	495c      	ldr	r1, [pc, #368]	; (800356c <HAL_I2C_Init+0x274>)
 80033fc:	428b      	cmp	r3, r1
 80033fe:	d819      	bhi.n	8003434 <HAL_I2C_Init+0x13c>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	1e59      	subs	r1, r3, #1
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	fbb1 f3f3 	udiv	r3, r1, r3
 800340e:	1c59      	adds	r1, r3, #1
 8003410:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003414:	400b      	ands	r3, r1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <HAL_I2C_Init+0x138>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	1e59      	subs	r1, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	fbb1 f3f3 	udiv	r3, r1, r3
 8003428:	3301      	adds	r3, #1
 800342a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800342e:	e051      	b.n	80034d4 <HAL_I2C_Init+0x1dc>
 8003430:	2304      	movs	r3, #4
 8003432:	e04f      	b.n	80034d4 <HAL_I2C_Init+0x1dc>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d111      	bne.n	8003460 <HAL_I2C_Init+0x168>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	1e58      	subs	r0, r3, #1
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6859      	ldr	r1, [r3, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	440b      	add	r3, r1
 800344a:	fbb0 f3f3 	udiv	r3, r0, r3
 800344e:	3301      	adds	r3, #1
 8003450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003454:	2b00      	cmp	r3, #0
 8003456:	bf0c      	ite	eq
 8003458:	2301      	moveq	r3, #1
 800345a:	2300      	movne	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	e012      	b.n	8003486 <HAL_I2C_Init+0x18e>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	1e58      	subs	r0, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6859      	ldr	r1, [r3, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	0099      	lsls	r1, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	fbb0 f3f3 	udiv	r3, r0, r3
 8003476:	3301      	adds	r3, #1
 8003478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_I2C_Init+0x196>
 800348a:	2301      	movs	r3, #1
 800348c:	e022      	b.n	80034d4 <HAL_I2C_Init+0x1dc>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10e      	bne.n	80034b4 <HAL_I2C_Init+0x1bc>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1e58      	subs	r0, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6859      	ldr	r1, [r3, #4]
 800349e:	460b      	mov	r3, r1
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	440b      	add	r3, r1
 80034a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80034a8:	3301      	adds	r3, #1
 80034aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034b2:	e00f      	b.n	80034d4 <HAL_I2C_Init+0x1dc>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	1e58      	subs	r0, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6859      	ldr	r1, [r3, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	0099      	lsls	r1, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ca:	3301      	adds	r3, #1
 80034cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	6809      	ldr	r1, [r1, #0]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69da      	ldr	r2, [r3, #28]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003502:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6911      	ldr	r1, [r2, #16]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	68d2      	ldr	r2, [r2, #12]
 800350e:	4311      	orrs	r1, r2
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	430b      	orrs	r3, r1
 8003516:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695a      	ldr	r2, [r3, #20]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0201 	orr.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2220      	movs	r2, #32
 800354e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	000186a0 	.word	0x000186a0
 8003570:	001e847f 	.word	0x001e847f
 8003574:	003d08ff 	.word	0x003d08ff
 8003578:	431bde83 	.word	0x431bde83
 800357c:	10624dd3 	.word	0x10624dd3

08003580 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e021      	b.n	80035d6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2224      	movs	r2, #36	; 0x24
 8003596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0201 	bic.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7fe fad8 	bl	8001b60 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	4608      	mov	r0, r1
 80035ea:	4611      	mov	r1, r2
 80035ec:	461a      	mov	r2, r3
 80035ee:	4603      	mov	r3, r0
 80035f0:	817b      	strh	r3, [r7, #10]
 80035f2:	460b      	mov	r3, r1
 80035f4:	813b      	strh	r3, [r7, #8]
 80035f6:	4613      	mov	r3, r2
 80035f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035fa:	f7ff fab9 	bl	8002b70 <HAL_GetTick>
 80035fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b20      	cmp	r3, #32
 800360a:	f040 80d9 	bne.w	80037c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	2319      	movs	r3, #25
 8003614:	2201      	movs	r2, #1
 8003616:	496d      	ldr	r1, [pc, #436]	; (80037cc <HAL_I2C_Mem_Write+0x1ec>)
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 fc8d 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003624:	2302      	movs	r3, #2
 8003626:	e0cc      	b.n	80037c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800362e:	2b01      	cmp	r3, #1
 8003630:	d101      	bne.n	8003636 <HAL_I2C_Mem_Write+0x56>
 8003632:	2302      	movs	r3, #2
 8003634:	e0c5      	b.n	80037c2 <HAL_I2C_Mem_Write+0x1e2>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b01      	cmp	r3, #1
 800364a:	d007      	beq.n	800365c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0201 	orr.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800366a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2221      	movs	r2, #33	; 0x21
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2240      	movs	r2, #64	; 0x40
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a3a      	ldr	r2, [r7, #32]
 8003686:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800368c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4a4d      	ldr	r2, [pc, #308]	; (80037d0 <HAL_I2C_Mem_Write+0x1f0>)
 800369c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800369e:	88f8      	ldrh	r0, [r7, #6]
 80036a0:	893a      	ldrh	r2, [r7, #8]
 80036a2:	8979      	ldrh	r1, [r7, #10]
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	9301      	str	r3, [sp, #4]
 80036a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	4603      	mov	r3, r0
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 fac4 	bl	8003c3c <I2C_RequestMemoryWrite>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d052      	beq.n	8003760 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e081      	b.n	80037c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 fd0e 	bl	80040e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00d      	beq.n	80036ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d107      	bne.n	80036e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e06b      	b.n	80037c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	781a      	ldrb	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	1c5a      	adds	r2, r3, #1
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003704:	3b01      	subs	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003710:	b29b      	uxth	r3, r3
 8003712:	3b01      	subs	r3, #1
 8003714:	b29a      	uxth	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b04      	cmp	r3, #4
 8003726:	d11b      	bne.n	8003760 <HAL_I2C_Mem_Write+0x180>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372c:	2b00      	cmp	r3, #0
 800372e:	d017      	beq.n	8003760 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	781a      	ldrb	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374a:	3b01      	subs	r3, #1
 800374c:	b29a      	uxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003756:	b29b      	uxth	r3, r3
 8003758:	3b01      	subs	r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1aa      	bne.n	80036be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 fcfa 	bl	8004166 <I2C_WaitOnBTFFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00d      	beq.n	8003794 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	2b04      	cmp	r3, #4
 800377e:	d107      	bne.n	8003790 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800378e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e016      	b.n	80037c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	e000      	b.n	80037c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80037c0:	2302      	movs	r3, #2
  }
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	00100002 	.word	0x00100002
 80037d0:	ffff0000 	.word	0xffff0000

080037d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08c      	sub	sp, #48	; 0x30
 80037d8:	af02      	add	r7, sp, #8
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	4608      	mov	r0, r1
 80037de:	4611      	mov	r1, r2
 80037e0:	461a      	mov	r2, r3
 80037e2:	4603      	mov	r3, r0
 80037e4:	817b      	strh	r3, [r7, #10]
 80037e6:	460b      	mov	r3, r1
 80037e8:	813b      	strh	r3, [r7, #8]
 80037ea:	4613      	mov	r3, r2
 80037ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037ee:	f7ff f9bf 	bl	8002b70 <HAL_GetTick>
 80037f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b20      	cmp	r3, #32
 80037fe:	f040 8208 	bne.w	8003c12 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	2319      	movs	r3, #25
 8003808:	2201      	movs	r2, #1
 800380a:	497b      	ldr	r1, [pc, #492]	; (80039f8 <HAL_I2C_Mem_Read+0x224>)
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 fb93 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003818:	2302      	movs	r3, #2
 800381a:	e1fb      	b.n	8003c14 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003822:	2b01      	cmp	r3, #1
 8003824:	d101      	bne.n	800382a <HAL_I2C_Mem_Read+0x56>
 8003826:	2302      	movs	r3, #2
 8003828:	e1f4      	b.n	8003c14 <HAL_I2C_Mem_Read+0x440>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b01      	cmp	r3, #1
 800383e:	d007      	beq.n	8003850 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800385e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2222      	movs	r2, #34	; 0x22
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2240      	movs	r2, #64	; 0x40
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800387a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003880:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003886:	b29a      	uxth	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4a5b      	ldr	r2, [pc, #364]	; (80039fc <HAL_I2C_Mem_Read+0x228>)
 8003890:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003892:	88f8      	ldrh	r0, [r7, #6]
 8003894:	893a      	ldrh	r2, [r7, #8]
 8003896:	8979      	ldrh	r1, [r7, #10]
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	9301      	str	r3, [sp, #4]
 800389c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	4603      	mov	r3, r0
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 fa60 	bl	8003d68 <I2C_RequestMemoryRead>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e1b0      	b.n	8003c14 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d113      	bne.n	80038e2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ba:	2300      	movs	r3, #0
 80038bc:	623b      	str	r3, [r7, #32]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	623b      	str	r3, [r7, #32]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	623b      	str	r3, [r7, #32]
 80038ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	e184      	b.n	8003bec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d11b      	bne.n	8003922 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	61fb      	str	r3, [r7, #28]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	61fb      	str	r3, [r7, #28]
 800390e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	e164      	b.n	8003bec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003926:	2b02      	cmp	r3, #2
 8003928:	d11b      	bne.n	8003962 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003938:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003948:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800394a:	2300      	movs	r3, #0
 800394c:	61bb      	str	r3, [r7, #24]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	61bb      	str	r3, [r7, #24]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	e144      	b.n	8003bec <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003978:	e138      	b.n	8003bec <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397e:	2b03      	cmp	r3, #3
 8003980:	f200 80f1 	bhi.w	8003b66 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003988:	2b01      	cmp	r3, #1
 800398a:	d123      	bne.n	80039d4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800398c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800398e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 fc29 	bl	80041e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e139      	b.n	8003c14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	691a      	ldr	r2, [r3, #16]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039d2:	e10b      	b.n	8003bec <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d14e      	bne.n	8003a7a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e2:	2200      	movs	r2, #0
 80039e4:	4906      	ldr	r1, [pc, #24]	; (8003a00 <HAL_I2C_Mem_Read+0x22c>)
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 faa6 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d008      	beq.n	8003a04 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e10e      	b.n	8003c14 <HAL_I2C_Mem_Read+0x440>
 80039f6:	bf00      	nop
 80039f8:	00100002 	.word	0x00100002
 80039fc:	ffff0000 	.word	0xffff0000
 8003a00:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	691a      	ldr	r2, [r3, #16]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	691a      	ldr	r2, [r3, #16]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a78:	e0b8      	b.n	8003bec <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a80:	2200      	movs	r2, #0
 8003a82:	4966      	ldr	r1, [pc, #408]	; (8003c1c <HAL_I2C_Mem_Read+0x448>)
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 fa57 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e0bf      	b.n	8003c14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	691a      	ldr	r2, [r3, #16]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003adc:	2200      	movs	r2, #0
 8003ade:	494f      	ldr	r1, [pc, #316]	; (8003c1c <HAL_I2C_Mem_Read+0x448>)
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 fa29 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e091      	b.n	8003c14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003afe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	691a      	ldr	r2, [r3, #16]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	691a      	ldr	r2, [r3, #16]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b64:	e042      	b.n	8003bec <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 fb3c 	bl	80041e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e04c      	b.n	8003c14 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	b2d2      	uxtb	r2, r2
 8003b86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f003 0304 	and.w	r3, r3, #4
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d118      	bne.n	8003bec <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	691a      	ldr	r2, [r3, #16]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	1c5a      	adds	r2, r3, #1
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f47f aec2 	bne.w	800397a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	e000      	b.n	8003c14 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003c12:	2302      	movs	r3, #2
  }
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3728      	adds	r7, #40	; 0x28
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	00010004 	.word	0x00010004

08003c20 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2e:	b2db      	uxtb	r3, r3
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af02      	add	r7, sp, #8
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	4608      	mov	r0, r1
 8003c46:	4611      	mov	r1, r2
 8003c48:	461a      	mov	r2, r3
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	817b      	strh	r3, [r7, #10]
 8003c4e:	460b      	mov	r3, r1
 8003c50:	813b      	strh	r3, [r7, #8]
 8003c52:	4613      	mov	r3, r2
 8003c54:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 f960 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00d      	beq.n	8003c9a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c8c:	d103      	bne.n	8003c96 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e05f      	b.n	8003d5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c9a:	897b      	ldrh	r3, [r7, #10]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ca8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	6a3a      	ldr	r2, [r7, #32]
 8003cae:	492d      	ldr	r1, [pc, #180]	; (8003d64 <I2C_RequestMemoryWrite+0x128>)
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 f998 	bl	8003fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e04c      	b.n	8003d5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd8:	6a39      	ldr	r1, [r7, #32]
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 fa02 	bl	80040e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00d      	beq.n	8003d02 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d107      	bne.n	8003cfe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e02b      	b.n	8003d5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d02:	88fb      	ldrh	r3, [r7, #6]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d105      	bne.n	8003d14 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d08:	893b      	ldrh	r3, [r7, #8]
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	611a      	str	r2, [r3, #16]
 8003d12:	e021      	b.n	8003d58 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d14:	893b      	ldrh	r3, [r7, #8]
 8003d16:	0a1b      	lsrs	r3, r3, #8
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d24:	6a39      	ldr	r1, [r7, #32]
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 f9dc 	bl	80040e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00d      	beq.n	8003d4e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	d107      	bne.n	8003d4a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e005      	b.n	8003d5a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d4e:	893b      	ldrh	r3, [r7, #8]
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3718      	adds	r7, #24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	00010002 	.word	0x00010002

08003d68 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	4608      	mov	r0, r1
 8003d72:	4611      	mov	r1, r2
 8003d74:	461a      	mov	r2, r3
 8003d76:	4603      	mov	r3, r0
 8003d78:	817b      	strh	r3, [r7, #10]
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	813b      	strh	r3, [r7, #8]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d90:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003da0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 f8c2 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00d      	beq.n	8003dd6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dc8:	d103      	bne.n	8003dd2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dd0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e0aa      	b.n	8003f2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dd6:	897b      	ldrh	r3, [r7, #10]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	461a      	mov	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003de4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	6a3a      	ldr	r2, [r7, #32]
 8003dea:	4952      	ldr	r1, [pc, #328]	; (8003f34 <I2C_RequestMemoryRead+0x1cc>)
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 f8fa 	bl	8003fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e097      	b.n	8003f2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	617b      	str	r3, [r7, #20]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e14:	6a39      	ldr	r1, [r7, #32]
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 f964 	bl	80040e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00d      	beq.n	8003e3e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d107      	bne.n	8003e3a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e076      	b.n	8003f2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e3e:	88fb      	ldrh	r3, [r7, #6]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d105      	bne.n	8003e50 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e44:	893b      	ldrh	r3, [r7, #8]
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	611a      	str	r2, [r3, #16]
 8003e4e:	e021      	b.n	8003e94 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e50:	893b      	ldrh	r3, [r7, #8]
 8003e52:	0a1b      	lsrs	r3, r3, #8
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e60:	6a39      	ldr	r1, [r7, #32]
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 f93e 	bl	80040e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00d      	beq.n	8003e8a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d107      	bne.n	8003e86 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e050      	b.n	8003f2c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e8a:	893b      	ldrh	r3, [r7, #8]
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e96:	6a39      	ldr	r1, [r7, #32]
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 f923 	bl	80040e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00d      	beq.n	8003ec0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d107      	bne.n	8003ebc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e035      	b.n	8003f2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ece:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 f82b 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00d      	beq.n	8003f04 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ef6:	d103      	bne.n	8003f00 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003efe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e013      	b.n	8003f2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f04:	897b      	ldrh	r3, [r7, #10]
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	f043 0301 	orr.w	r3, r3, #1
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	6a3a      	ldr	r2, [r7, #32]
 8003f18:	4906      	ldr	r1, [pc, #24]	; (8003f34 <I2C_RequestMemoryRead+0x1cc>)
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f863 	bl	8003fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e000      	b.n	8003f2c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	00010002 	.word	0x00010002

08003f38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f48:	e025      	b.n	8003f96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f50:	d021      	beq.n	8003f96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f52:	f7fe fe0d 	bl	8002b70 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d302      	bcc.n	8003f68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d116      	bne.n	8003f96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	f043 0220 	orr.w	r2, r3, #32
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e023      	b.n	8003fde <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	0c1b      	lsrs	r3, r3, #16
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d10d      	bne.n	8003fbc <I2C_WaitOnFlagUntilTimeout+0x84>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	43da      	mvns	r2, r3
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	4013      	ands	r3, r2
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	bf0c      	ite	eq
 8003fb2:	2301      	moveq	r3, #1
 8003fb4:	2300      	movne	r3, #0
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	e00c      	b.n	8003fd6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	43da      	mvns	r2, r3
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	bf0c      	ite	eq
 8003fce:	2301      	moveq	r3, #1
 8003fd0:	2300      	movne	r3, #0
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	79fb      	ldrb	r3, [r7, #7]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d0b6      	beq.n	8003f4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b084      	sub	sp, #16
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	60f8      	str	r0, [r7, #12]
 8003fee:	60b9      	str	r1, [r7, #8]
 8003ff0:	607a      	str	r2, [r7, #4]
 8003ff2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ff4:	e051      	b.n	800409a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004004:	d123      	bne.n	800404e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004014:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800401e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	f043 0204 	orr.w	r2, r3, #4
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e046      	b.n	80040dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004054:	d021      	beq.n	800409a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004056:	f7fe fd8b 	bl	8002b70 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	429a      	cmp	r2, r3
 8004064:	d302      	bcc.n	800406c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d116      	bne.n	800409a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	f043 0220 	orr.w	r2, r3, #32
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e020      	b.n	80040dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	0c1b      	lsrs	r3, r3, #16
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d10c      	bne.n	80040be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	43da      	mvns	r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4013      	ands	r3, r2
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	bf14      	ite	ne
 80040b6:	2301      	movne	r3, #1
 80040b8:	2300      	moveq	r3, #0
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	e00b      	b.n	80040d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	43da      	mvns	r2, r3
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	4013      	ands	r3, r2
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	bf14      	ite	ne
 80040d0:	2301      	movne	r3, #1
 80040d2:	2300      	moveq	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d18d      	bne.n	8003ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040f0:	e02d      	b.n	800414e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 f8ce 	bl	8004294 <I2C_IsAcknowledgeFailed>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e02d      	b.n	800415e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004108:	d021      	beq.n	800414e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800410a:	f7fe fd31 	bl	8002b70 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	429a      	cmp	r2, r3
 8004118:	d302      	bcc.n	8004120 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d116      	bne.n	800414e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2220      	movs	r2, #32
 800412a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	f043 0220 	orr.w	r2, r3, #32
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e007      	b.n	800415e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004158:	2b80      	cmp	r3, #128	; 0x80
 800415a:	d1ca      	bne.n	80040f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b084      	sub	sp, #16
 800416a:	af00      	add	r7, sp, #0
 800416c:	60f8      	str	r0, [r7, #12]
 800416e:	60b9      	str	r1, [r7, #8]
 8004170:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004172:	e02d      	b.n	80041d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 f88d 	bl	8004294 <I2C_IsAcknowledgeFailed>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e02d      	b.n	80041e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418a:	d021      	beq.n	80041d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800418c:	f7fe fcf0 	bl	8002b70 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	429a      	cmp	r2, r3
 800419a:	d302      	bcc.n	80041a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d116      	bne.n	80041d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	f043 0220 	orr.w	r2, r3, #32
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e007      	b.n	80041e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	f003 0304 	and.w	r3, r3, #4
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d1ca      	bne.n	8004174 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041f4:	e042      	b.n	800427c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	f003 0310 	and.w	r3, r3, #16
 8004200:	2b10      	cmp	r3, #16
 8004202:	d119      	bne.n	8004238 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f06f 0210 	mvn.w	r2, #16
 800420c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e029      	b.n	800428c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004238:	f7fe fc9a 	bl	8002b70 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	429a      	cmp	r2, r3
 8004246:	d302      	bcc.n	800424e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d116      	bne.n	800427c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	f043 0220 	orr.w	r2, r3, #32
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e007      	b.n	800428c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004286:	2b40      	cmp	r3, #64	; 0x40
 8004288:	d1b5      	bne.n	80041f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042aa:	d11b      	bne.n	80042e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2220      	movs	r2, #32
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	f043 0204 	orr.w	r2, r3, #4
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e000      	b.n	80042e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
	...

080042f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e267      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d075      	beq.n	80043fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004312:	4b88      	ldr	r3, [pc, #544]	; (8004534 <HAL_RCC_OscConfig+0x240>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 030c 	and.w	r3, r3, #12
 800431a:	2b04      	cmp	r3, #4
 800431c:	d00c      	beq.n	8004338 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800431e:	4b85      	ldr	r3, [pc, #532]	; (8004534 <HAL_RCC_OscConfig+0x240>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004326:	2b08      	cmp	r3, #8
 8004328:	d112      	bne.n	8004350 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800432a:	4b82      	ldr	r3, [pc, #520]	; (8004534 <HAL_RCC_OscConfig+0x240>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004332:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004336:	d10b      	bne.n	8004350 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004338:	4b7e      	ldr	r3, [pc, #504]	; (8004534 <HAL_RCC_OscConfig+0x240>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d05b      	beq.n	80043fc <HAL_RCC_OscConfig+0x108>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d157      	bne.n	80043fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e242      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004358:	d106      	bne.n	8004368 <HAL_RCC_OscConfig+0x74>
 800435a:	4b76      	ldr	r3, [pc, #472]	; (8004534 <HAL_RCC_OscConfig+0x240>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a75      	ldr	r2, [pc, #468]	; (8004534 <HAL_RCC_OscConfig+0x240>)
 8004360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	e01d      	b.n	80043a4 <HAL_RCC_OscConfig+0xb0>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004370:	d10c      	bne.n	800438c <HAL_RCC_OscConfig+0x98>
 8004372:	4b70      	ldr	r3, [pc, #448]	; (8004534 <HAL_RCC_OscConfig+0x240>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a6f      	ldr	r2, [pc, #444]	; (8004534 <HAL_RCC_OscConfig+0x240>)
 8004378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800437c:	6013      	str	r3, [r2, #0]
 800437e:	4b6d      	ldr	r3, [pc, #436]	; (8004534 <HAL_RCC_OscConfig+0x240>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a6c      	ldr	r2, [pc, #432]	; (8004534 <HAL_RCC_OscConfig+0x240>)
 8004384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	e00b      	b.n	80043a4 <HAL_RCC_OscConfig+0xb0>
 800438c:	4b69      	ldr	r3, [pc, #420]	; (8004534 <HAL_RCC_OscConfig+0x240>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a68      	ldr	r2, [pc, #416]	; (8004534 <HAL_RCC_OscConfig+0x240>)
 8004392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004396:	6013      	str	r3, [r2, #0]
 8004398:	4b66      	ldr	r3, [pc, #408]	; (8004534 <HAL_RCC_OscConfig+0x240>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a65      	ldr	r2, [pc, #404]	; (8004534 <HAL_RCC_OscConfig+0x240>)
 800439e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d013      	beq.n	80043d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ac:	f7fe fbe0 	bl	8002b70 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043b4:	f7fe fbdc 	bl	8002b70 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b64      	cmp	r3, #100	; 0x64
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e207      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043c6:	4b5b      	ldr	r3, [pc, #364]	; (8004534 <HAL_RCC_OscConfig+0x240>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d0f0      	beq.n	80043b4 <HAL_RCC_OscConfig+0xc0>
 80043d2:	e014      	b.n	80043fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d4:	f7fe fbcc 	bl	8002b70 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043dc:	f7fe fbc8 	bl	8002b70 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b64      	cmp	r3, #100	; 0x64
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e1f3      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ee:	4b51      	ldr	r3, [pc, #324]	; (8004534 <HAL_RCC_OscConfig+0x240>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1f0      	bne.n	80043dc <HAL_RCC_OscConfig+0xe8>
 80043fa:	e000      	b.n	80043fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d063      	beq.n	80044d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800440a:	4b4a      	ldr	r3, [pc, #296]	; (8004534 <HAL_RCC_OscConfig+0x240>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 030c 	and.w	r3, r3, #12
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00b      	beq.n	800442e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004416:	4b47      	ldr	r3, [pc, #284]	; (8004534 <HAL_RCC_OscConfig+0x240>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800441e:	2b08      	cmp	r3, #8
 8004420:	d11c      	bne.n	800445c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004422:	4b44      	ldr	r3, [pc, #272]	; (8004534 <HAL_RCC_OscConfig+0x240>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d116      	bne.n	800445c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800442e:	4b41      	ldr	r3, [pc, #260]	; (8004534 <HAL_RCC_OscConfig+0x240>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d005      	beq.n	8004446 <HAL_RCC_OscConfig+0x152>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d001      	beq.n	8004446 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e1c7      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004446:	4b3b      	ldr	r3, [pc, #236]	; (8004534 <HAL_RCC_OscConfig+0x240>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	4937      	ldr	r1, [pc, #220]	; (8004534 <HAL_RCC_OscConfig+0x240>)
 8004456:	4313      	orrs	r3, r2
 8004458:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800445a:	e03a      	b.n	80044d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d020      	beq.n	80044a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004464:	4b34      	ldr	r3, [pc, #208]	; (8004538 <HAL_RCC_OscConfig+0x244>)
 8004466:	2201      	movs	r2, #1
 8004468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446a:	f7fe fb81 	bl	8002b70 <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004472:	f7fe fb7d 	bl	8002b70 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e1a8      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004484:	4b2b      	ldr	r3, [pc, #172]	; (8004534 <HAL_RCC_OscConfig+0x240>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0f0      	beq.n	8004472 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004490:	4b28      	ldr	r3, [pc, #160]	; (8004534 <HAL_RCC_OscConfig+0x240>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	4925      	ldr	r1, [pc, #148]	; (8004534 <HAL_RCC_OscConfig+0x240>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	600b      	str	r3, [r1, #0]
 80044a4:	e015      	b.n	80044d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044a6:	4b24      	ldr	r3, [pc, #144]	; (8004538 <HAL_RCC_OscConfig+0x244>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ac:	f7fe fb60 	bl	8002b70 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044b4:	f7fe fb5c 	bl	8002b70 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e187      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044c6:	4b1b      	ldr	r3, [pc, #108]	; (8004534 <HAL_RCC_OscConfig+0x240>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f0      	bne.n	80044b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d036      	beq.n	800454c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d016      	beq.n	8004514 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044e6:	4b15      	ldr	r3, [pc, #84]	; (800453c <HAL_RCC_OscConfig+0x248>)
 80044e8:	2201      	movs	r2, #1
 80044ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ec:	f7fe fb40 	bl	8002b70 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044f4:	f7fe fb3c 	bl	8002b70 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e167      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004506:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <HAL_RCC_OscConfig+0x240>)
 8004508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCC_OscConfig+0x200>
 8004512:	e01b      	b.n	800454c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004514:	4b09      	ldr	r3, [pc, #36]	; (800453c <HAL_RCC_OscConfig+0x248>)
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800451a:	f7fe fb29 	bl	8002b70 <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004520:	e00e      	b.n	8004540 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004522:	f7fe fb25 	bl	8002b70 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d907      	bls.n	8004540 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e150      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
 8004534:	40023800 	.word	0x40023800
 8004538:	42470000 	.word	0x42470000
 800453c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004540:	4b88      	ldr	r3, [pc, #544]	; (8004764 <HAL_RCC_OscConfig+0x470>)
 8004542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1ea      	bne.n	8004522 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 8097 	beq.w	8004688 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800455a:	2300      	movs	r3, #0
 800455c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800455e:	4b81      	ldr	r3, [pc, #516]	; (8004764 <HAL_RCC_OscConfig+0x470>)
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10f      	bne.n	800458a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800456a:	2300      	movs	r3, #0
 800456c:	60bb      	str	r3, [r7, #8]
 800456e:	4b7d      	ldr	r3, [pc, #500]	; (8004764 <HAL_RCC_OscConfig+0x470>)
 8004570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004572:	4a7c      	ldr	r2, [pc, #496]	; (8004764 <HAL_RCC_OscConfig+0x470>)
 8004574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004578:	6413      	str	r3, [r2, #64]	; 0x40
 800457a:	4b7a      	ldr	r3, [pc, #488]	; (8004764 <HAL_RCC_OscConfig+0x470>)
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004582:	60bb      	str	r3, [r7, #8]
 8004584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004586:	2301      	movs	r3, #1
 8004588:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800458a:	4b77      	ldr	r3, [pc, #476]	; (8004768 <HAL_RCC_OscConfig+0x474>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004592:	2b00      	cmp	r3, #0
 8004594:	d118      	bne.n	80045c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004596:	4b74      	ldr	r3, [pc, #464]	; (8004768 <HAL_RCC_OscConfig+0x474>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a73      	ldr	r2, [pc, #460]	; (8004768 <HAL_RCC_OscConfig+0x474>)
 800459c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045a2:	f7fe fae5 	bl	8002b70 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045aa:	f7fe fae1 	bl	8002b70 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e10c      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045bc:	4b6a      	ldr	r3, [pc, #424]	; (8004768 <HAL_RCC_OscConfig+0x474>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d106      	bne.n	80045de <HAL_RCC_OscConfig+0x2ea>
 80045d0:	4b64      	ldr	r3, [pc, #400]	; (8004764 <HAL_RCC_OscConfig+0x470>)
 80045d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d4:	4a63      	ldr	r2, [pc, #396]	; (8004764 <HAL_RCC_OscConfig+0x470>)
 80045d6:	f043 0301 	orr.w	r3, r3, #1
 80045da:	6713      	str	r3, [r2, #112]	; 0x70
 80045dc:	e01c      	b.n	8004618 <HAL_RCC_OscConfig+0x324>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	2b05      	cmp	r3, #5
 80045e4:	d10c      	bne.n	8004600 <HAL_RCC_OscConfig+0x30c>
 80045e6:	4b5f      	ldr	r3, [pc, #380]	; (8004764 <HAL_RCC_OscConfig+0x470>)
 80045e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ea:	4a5e      	ldr	r2, [pc, #376]	; (8004764 <HAL_RCC_OscConfig+0x470>)
 80045ec:	f043 0304 	orr.w	r3, r3, #4
 80045f0:	6713      	str	r3, [r2, #112]	; 0x70
 80045f2:	4b5c      	ldr	r3, [pc, #368]	; (8004764 <HAL_RCC_OscConfig+0x470>)
 80045f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f6:	4a5b      	ldr	r2, [pc, #364]	; (8004764 <HAL_RCC_OscConfig+0x470>)
 80045f8:	f043 0301 	orr.w	r3, r3, #1
 80045fc:	6713      	str	r3, [r2, #112]	; 0x70
 80045fe:	e00b      	b.n	8004618 <HAL_RCC_OscConfig+0x324>
 8004600:	4b58      	ldr	r3, [pc, #352]	; (8004764 <HAL_RCC_OscConfig+0x470>)
 8004602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004604:	4a57      	ldr	r2, [pc, #348]	; (8004764 <HAL_RCC_OscConfig+0x470>)
 8004606:	f023 0301 	bic.w	r3, r3, #1
 800460a:	6713      	str	r3, [r2, #112]	; 0x70
 800460c:	4b55      	ldr	r3, [pc, #340]	; (8004764 <HAL_RCC_OscConfig+0x470>)
 800460e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004610:	4a54      	ldr	r2, [pc, #336]	; (8004764 <HAL_RCC_OscConfig+0x470>)
 8004612:	f023 0304 	bic.w	r3, r3, #4
 8004616:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d015      	beq.n	800464c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004620:	f7fe faa6 	bl	8002b70 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004626:	e00a      	b.n	800463e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004628:	f7fe faa2 	bl	8002b70 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	f241 3288 	movw	r2, #5000	; 0x1388
 8004636:	4293      	cmp	r3, r2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e0cb      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800463e:	4b49      	ldr	r3, [pc, #292]	; (8004764 <HAL_RCC_OscConfig+0x470>)
 8004640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0ee      	beq.n	8004628 <HAL_RCC_OscConfig+0x334>
 800464a:	e014      	b.n	8004676 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800464c:	f7fe fa90 	bl	8002b70 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004652:	e00a      	b.n	800466a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004654:	f7fe fa8c 	bl	8002b70 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004662:	4293      	cmp	r3, r2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e0b5      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800466a:	4b3e      	ldr	r3, [pc, #248]	; (8004764 <HAL_RCC_OscConfig+0x470>)
 800466c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1ee      	bne.n	8004654 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004676:	7dfb      	ldrb	r3, [r7, #23]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d105      	bne.n	8004688 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800467c:	4b39      	ldr	r3, [pc, #228]	; (8004764 <HAL_RCC_OscConfig+0x470>)
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	4a38      	ldr	r2, [pc, #224]	; (8004764 <HAL_RCC_OscConfig+0x470>)
 8004682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004686:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 80a1 	beq.w	80047d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004692:	4b34      	ldr	r3, [pc, #208]	; (8004764 <HAL_RCC_OscConfig+0x470>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 030c 	and.w	r3, r3, #12
 800469a:	2b08      	cmp	r3, #8
 800469c:	d05c      	beq.n	8004758 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d141      	bne.n	800472a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046a6:	4b31      	ldr	r3, [pc, #196]	; (800476c <HAL_RCC_OscConfig+0x478>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ac:	f7fe fa60 	bl	8002b70 <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046b4:	f7fe fa5c 	bl	8002b70 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e087      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046c6:	4b27      	ldr	r3, [pc, #156]	; (8004764 <HAL_RCC_OscConfig+0x470>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1f0      	bne.n	80046b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69da      	ldr	r2, [r3, #28]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	019b      	lsls	r3, r3, #6
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e8:	085b      	lsrs	r3, r3, #1
 80046ea:	3b01      	subs	r3, #1
 80046ec:	041b      	lsls	r3, r3, #16
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f4:	061b      	lsls	r3, r3, #24
 80046f6:	491b      	ldr	r1, [pc, #108]	; (8004764 <HAL_RCC_OscConfig+0x470>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046fc:	4b1b      	ldr	r3, [pc, #108]	; (800476c <HAL_RCC_OscConfig+0x478>)
 80046fe:	2201      	movs	r2, #1
 8004700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004702:	f7fe fa35 	bl	8002b70 <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004708:	e008      	b.n	800471c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800470a:	f7fe fa31 	bl	8002b70 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e05c      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800471c:	4b11      	ldr	r3, [pc, #68]	; (8004764 <HAL_RCC_OscConfig+0x470>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0f0      	beq.n	800470a <HAL_RCC_OscConfig+0x416>
 8004728:	e054      	b.n	80047d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800472a:	4b10      	ldr	r3, [pc, #64]	; (800476c <HAL_RCC_OscConfig+0x478>)
 800472c:	2200      	movs	r2, #0
 800472e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004730:	f7fe fa1e 	bl	8002b70 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004738:	f7fe fa1a 	bl	8002b70 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e045      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800474a:	4b06      	ldr	r3, [pc, #24]	; (8004764 <HAL_RCC_OscConfig+0x470>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1f0      	bne.n	8004738 <HAL_RCC_OscConfig+0x444>
 8004756:	e03d      	b.n	80047d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d107      	bne.n	8004770 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e038      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
 8004764:	40023800 	.word	0x40023800
 8004768:	40007000 	.word	0x40007000
 800476c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004770:	4b1b      	ldr	r3, [pc, #108]	; (80047e0 <HAL_RCC_OscConfig+0x4ec>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d028      	beq.n	80047d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004788:	429a      	cmp	r2, r3
 800478a:	d121      	bne.n	80047d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004796:	429a      	cmp	r2, r3
 8004798:	d11a      	bne.n	80047d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047a0:	4013      	ands	r3, r2
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d111      	bne.n	80047d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b6:	085b      	lsrs	r3, r3, #1
 80047b8:	3b01      	subs	r3, #1
 80047ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047bc:	429a      	cmp	r2, r3
 80047be:	d107      	bne.n	80047d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d001      	beq.n	80047d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e000      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	40023800 	.word	0x40023800

080047e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e0cc      	b.n	8004992 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047f8:	4b68      	ldr	r3, [pc, #416]	; (800499c <HAL_RCC_ClockConfig+0x1b8>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	429a      	cmp	r2, r3
 8004804:	d90c      	bls.n	8004820 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004806:	4b65      	ldr	r3, [pc, #404]	; (800499c <HAL_RCC_ClockConfig+0x1b8>)
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800480e:	4b63      	ldr	r3, [pc, #396]	; (800499c <HAL_RCC_ClockConfig+0x1b8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d001      	beq.n	8004820 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e0b8      	b.n	8004992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d020      	beq.n	800486e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	d005      	beq.n	8004844 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004838:	4b59      	ldr	r3, [pc, #356]	; (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	4a58      	ldr	r2, [pc, #352]	; (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 800483e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004842:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b00      	cmp	r3, #0
 800484e:	d005      	beq.n	800485c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004850:	4b53      	ldr	r3, [pc, #332]	; (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	4a52      	ldr	r2, [pc, #328]	; (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004856:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800485a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800485c:	4b50      	ldr	r3, [pc, #320]	; (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	494d      	ldr	r1, [pc, #308]	; (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	4313      	orrs	r3, r2
 800486c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d044      	beq.n	8004904 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d107      	bne.n	8004892 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004882:	4b47      	ldr	r3, [pc, #284]	; (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d119      	bne.n	80048c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e07f      	b.n	8004992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b02      	cmp	r3, #2
 8004898:	d003      	beq.n	80048a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800489e:	2b03      	cmp	r3, #3
 80048a0:	d107      	bne.n	80048b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048a2:	4b3f      	ldr	r3, [pc, #252]	; (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d109      	bne.n	80048c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e06f      	b.n	8004992 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048b2:	4b3b      	ldr	r3, [pc, #236]	; (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e067      	b.n	8004992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048c2:	4b37      	ldr	r3, [pc, #220]	; (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f023 0203 	bic.w	r2, r3, #3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	4934      	ldr	r1, [pc, #208]	; (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048d4:	f7fe f94c 	bl	8002b70 <HAL_GetTick>
 80048d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048da:	e00a      	b.n	80048f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048dc:	f7fe f948 	bl	8002b70 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e04f      	b.n	8004992 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f2:	4b2b      	ldr	r3, [pc, #172]	; (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 020c 	and.w	r2, r3, #12
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	429a      	cmp	r2, r3
 8004902:	d1eb      	bne.n	80048dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004904:	4b25      	ldr	r3, [pc, #148]	; (800499c <HAL_RCC_ClockConfig+0x1b8>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	429a      	cmp	r2, r3
 8004910:	d20c      	bcs.n	800492c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004912:	4b22      	ldr	r3, [pc, #136]	; (800499c <HAL_RCC_ClockConfig+0x1b8>)
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800491a:	4b20      	ldr	r3, [pc, #128]	; (800499c <HAL_RCC_ClockConfig+0x1b8>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	429a      	cmp	r2, r3
 8004926:	d001      	beq.n	800492c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e032      	b.n	8004992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b00      	cmp	r3, #0
 8004936:	d008      	beq.n	800494a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004938:	4b19      	ldr	r3, [pc, #100]	; (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	4916      	ldr	r1, [pc, #88]	; (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004946:	4313      	orrs	r3, r2
 8004948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b00      	cmp	r3, #0
 8004954:	d009      	beq.n	800496a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004956:	4b12      	ldr	r3, [pc, #72]	; (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	00db      	lsls	r3, r3, #3
 8004964:	490e      	ldr	r1, [pc, #56]	; (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	4313      	orrs	r3, r2
 8004968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800496a:	f000 f821 	bl	80049b0 <HAL_RCC_GetSysClockFreq>
 800496e:	4602      	mov	r2, r0
 8004970:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	091b      	lsrs	r3, r3, #4
 8004976:	f003 030f 	and.w	r3, r3, #15
 800497a:	490a      	ldr	r1, [pc, #40]	; (80049a4 <HAL_RCC_ClockConfig+0x1c0>)
 800497c:	5ccb      	ldrb	r3, [r1, r3]
 800497e:	fa22 f303 	lsr.w	r3, r2, r3
 8004982:	4a09      	ldr	r2, [pc, #36]	; (80049a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004986:	4b09      	ldr	r3, [pc, #36]	; (80049ac <HAL_RCC_ClockConfig+0x1c8>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f7fe f8ac 	bl	8002ae8 <HAL_InitTick>

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	40023c00 	.word	0x40023c00
 80049a0:	40023800 	.word	0x40023800
 80049a4:	0800a3dc 	.word	0x0800a3dc
 80049a8:	20000008 	.word	0x20000008
 80049ac:	20000078 	.word	0x20000078

080049b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049b4:	b094      	sub	sp, #80	; 0x50
 80049b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049b8:	2300      	movs	r3, #0
 80049ba:	647b      	str	r3, [r7, #68]	; 0x44
 80049bc:	2300      	movs	r3, #0
 80049be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049c0:	2300      	movs	r3, #0
 80049c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049c8:	4b79      	ldr	r3, [pc, #484]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f003 030c 	and.w	r3, r3, #12
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	d00d      	beq.n	80049f0 <HAL_RCC_GetSysClockFreq+0x40>
 80049d4:	2b08      	cmp	r3, #8
 80049d6:	f200 80e1 	bhi.w	8004b9c <HAL_RCC_GetSysClockFreq+0x1ec>
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d002      	beq.n	80049e4 <HAL_RCC_GetSysClockFreq+0x34>
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d003      	beq.n	80049ea <HAL_RCC_GetSysClockFreq+0x3a>
 80049e2:	e0db      	b.n	8004b9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049e4:	4b73      	ldr	r3, [pc, #460]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0x204>)
 80049e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80049e8:	e0db      	b.n	8004ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049ea:	4b73      	ldr	r3, [pc, #460]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x208>)
 80049ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049ee:	e0d8      	b.n	8004ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049f0:	4b6f      	ldr	r3, [pc, #444]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049fa:	4b6d      	ldr	r3, [pc, #436]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d063      	beq.n	8004ace <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a06:	4b6a      	ldr	r3, [pc, #424]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	099b      	lsrs	r3, r3, #6
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a18:	633b      	str	r3, [r7, #48]	; 0x30
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a22:	4622      	mov	r2, r4
 8004a24:	462b      	mov	r3, r5
 8004a26:	f04f 0000 	mov.w	r0, #0
 8004a2a:	f04f 0100 	mov.w	r1, #0
 8004a2e:	0159      	lsls	r1, r3, #5
 8004a30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a34:	0150      	lsls	r0, r2, #5
 8004a36:	4602      	mov	r2, r0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	4621      	mov	r1, r4
 8004a3c:	1a51      	subs	r1, r2, r1
 8004a3e:	6139      	str	r1, [r7, #16]
 8004a40:	4629      	mov	r1, r5
 8004a42:	eb63 0301 	sbc.w	r3, r3, r1
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	f04f 0300 	mov.w	r3, #0
 8004a50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a54:	4659      	mov	r1, fp
 8004a56:	018b      	lsls	r3, r1, #6
 8004a58:	4651      	mov	r1, sl
 8004a5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a5e:	4651      	mov	r1, sl
 8004a60:	018a      	lsls	r2, r1, #6
 8004a62:	4651      	mov	r1, sl
 8004a64:	ebb2 0801 	subs.w	r8, r2, r1
 8004a68:	4659      	mov	r1, fp
 8004a6a:	eb63 0901 	sbc.w	r9, r3, r1
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	f04f 0300 	mov.w	r3, #0
 8004a76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a82:	4690      	mov	r8, r2
 8004a84:	4699      	mov	r9, r3
 8004a86:	4623      	mov	r3, r4
 8004a88:	eb18 0303 	adds.w	r3, r8, r3
 8004a8c:	60bb      	str	r3, [r7, #8]
 8004a8e:	462b      	mov	r3, r5
 8004a90:	eb49 0303 	adc.w	r3, r9, r3
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	f04f 0200 	mov.w	r2, #0
 8004a9a:	f04f 0300 	mov.w	r3, #0
 8004a9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004aa2:	4629      	mov	r1, r5
 8004aa4:	024b      	lsls	r3, r1, #9
 8004aa6:	4621      	mov	r1, r4
 8004aa8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004aac:	4621      	mov	r1, r4
 8004aae:	024a      	lsls	r2, r1, #9
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004abc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ac0:	f7fc f8ea 	bl	8000c98 <__aeabi_uldivmod>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4613      	mov	r3, r2
 8004aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004acc:	e058      	b.n	8004b80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ace:	4b38      	ldr	r3, [pc, #224]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	099b      	lsrs	r3, r3, #6
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	4611      	mov	r1, r2
 8004ada:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ade:	623b      	str	r3, [r7, #32]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ae4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ae8:	4642      	mov	r2, r8
 8004aea:	464b      	mov	r3, r9
 8004aec:	f04f 0000 	mov.w	r0, #0
 8004af0:	f04f 0100 	mov.w	r1, #0
 8004af4:	0159      	lsls	r1, r3, #5
 8004af6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004afa:	0150      	lsls	r0, r2, #5
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	4641      	mov	r1, r8
 8004b02:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b06:	4649      	mov	r1, r9
 8004b08:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b0c:	f04f 0200 	mov.w	r2, #0
 8004b10:	f04f 0300 	mov.w	r3, #0
 8004b14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b20:	ebb2 040a 	subs.w	r4, r2, sl
 8004b24:	eb63 050b 	sbc.w	r5, r3, fp
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	f04f 0300 	mov.w	r3, #0
 8004b30:	00eb      	lsls	r3, r5, #3
 8004b32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b36:	00e2      	lsls	r2, r4, #3
 8004b38:	4614      	mov	r4, r2
 8004b3a:	461d      	mov	r5, r3
 8004b3c:	4643      	mov	r3, r8
 8004b3e:	18e3      	adds	r3, r4, r3
 8004b40:	603b      	str	r3, [r7, #0]
 8004b42:	464b      	mov	r3, r9
 8004b44:	eb45 0303 	adc.w	r3, r5, r3
 8004b48:	607b      	str	r3, [r7, #4]
 8004b4a:	f04f 0200 	mov.w	r2, #0
 8004b4e:	f04f 0300 	mov.w	r3, #0
 8004b52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b56:	4629      	mov	r1, r5
 8004b58:	028b      	lsls	r3, r1, #10
 8004b5a:	4621      	mov	r1, r4
 8004b5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b60:	4621      	mov	r1, r4
 8004b62:	028a      	lsls	r2, r1, #10
 8004b64:	4610      	mov	r0, r2
 8004b66:	4619      	mov	r1, r3
 8004b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	61bb      	str	r3, [r7, #24]
 8004b6e:	61fa      	str	r2, [r7, #28]
 8004b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b74:	f7fc f890 	bl	8000c98 <__aeabi_uldivmod>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b80:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	0c1b      	lsrs	r3, r3, #16
 8004b86:	f003 0303 	and.w	r3, r3, #3
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004b90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b9a:	e002      	b.n	8004ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b9c:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ba0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3750      	adds	r7, #80	; 0x50
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bae:	bf00      	nop
 8004bb0:	40023800 	.word	0x40023800
 8004bb4:	00f42400 	.word	0x00f42400
 8004bb8:	007a1200 	.word	0x007a1200

08004bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bc0:	4b03      	ldr	r3, [pc, #12]	; (8004bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	20000008 	.word	0x20000008

08004bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bd8:	f7ff fff0 	bl	8004bbc <HAL_RCC_GetHCLKFreq>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	0a9b      	lsrs	r3, r3, #10
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	4903      	ldr	r1, [pc, #12]	; (8004bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bea:	5ccb      	ldrb	r3, [r1, r3]
 8004bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	0800a3ec 	.word	0x0800a3ec

08004bfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e07b      	b.n	8004d06 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d108      	bne.n	8004c28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c1e:	d009      	beq.n	8004c34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	61da      	str	r2, [r3, #28]
 8004c26:	e005      	b.n	8004c34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d106      	bne.n	8004c54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fc ffbe 	bl	8001bd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	431a      	orrs	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb8:	ea42 0103 	orr.w	r1, r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	0c1b      	lsrs	r3, r3, #16
 8004cd2:	f003 0104 	and.w	r1, r3, #4
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	f003 0210 	and.w	r2, r3, #16
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	69da      	ldr	r2, [r3, #28]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cf4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
	...

08004d10 <__errno>:
 8004d10:	4b01      	ldr	r3, [pc, #4]	; (8004d18 <__errno+0x8>)
 8004d12:	6818      	ldr	r0, [r3, #0]
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	20000080 	.word	0x20000080

08004d1c <__libc_init_array>:
 8004d1c:	b570      	push	{r4, r5, r6, lr}
 8004d1e:	4d0d      	ldr	r5, [pc, #52]	; (8004d54 <__libc_init_array+0x38>)
 8004d20:	4c0d      	ldr	r4, [pc, #52]	; (8004d58 <__libc_init_array+0x3c>)
 8004d22:	1b64      	subs	r4, r4, r5
 8004d24:	10a4      	asrs	r4, r4, #2
 8004d26:	2600      	movs	r6, #0
 8004d28:	42a6      	cmp	r6, r4
 8004d2a:	d109      	bne.n	8004d40 <__libc_init_array+0x24>
 8004d2c:	4d0b      	ldr	r5, [pc, #44]	; (8004d5c <__libc_init_array+0x40>)
 8004d2e:	4c0c      	ldr	r4, [pc, #48]	; (8004d60 <__libc_init_array+0x44>)
 8004d30:	f004 fc92 	bl	8009658 <_init>
 8004d34:	1b64      	subs	r4, r4, r5
 8004d36:	10a4      	asrs	r4, r4, #2
 8004d38:	2600      	movs	r6, #0
 8004d3a:	42a6      	cmp	r6, r4
 8004d3c:	d105      	bne.n	8004d4a <__libc_init_array+0x2e>
 8004d3e:	bd70      	pop	{r4, r5, r6, pc}
 8004d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d44:	4798      	blx	r3
 8004d46:	3601      	adds	r6, #1
 8004d48:	e7ee      	b.n	8004d28 <__libc_init_array+0xc>
 8004d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d4e:	4798      	blx	r3
 8004d50:	3601      	adds	r6, #1
 8004d52:	e7f2      	b.n	8004d3a <__libc_init_array+0x1e>
 8004d54:	0800a8a4 	.word	0x0800a8a4
 8004d58:	0800a8a4 	.word	0x0800a8a4
 8004d5c:	0800a8a4 	.word	0x0800a8a4
 8004d60:	0800a8a8 	.word	0x0800a8a8

08004d64 <memset>:
 8004d64:	4402      	add	r2, r0
 8004d66:	4603      	mov	r3, r0
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d100      	bne.n	8004d6e <memset+0xa>
 8004d6c:	4770      	bx	lr
 8004d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d72:	e7f9      	b.n	8004d68 <memset+0x4>

08004d74 <__cvt>:
 8004d74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d78:	ec55 4b10 	vmov	r4, r5, d0
 8004d7c:	2d00      	cmp	r5, #0
 8004d7e:	460e      	mov	r6, r1
 8004d80:	4619      	mov	r1, r3
 8004d82:	462b      	mov	r3, r5
 8004d84:	bfbb      	ittet	lt
 8004d86:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004d8a:	461d      	movlt	r5, r3
 8004d8c:	2300      	movge	r3, #0
 8004d8e:	232d      	movlt	r3, #45	; 0x2d
 8004d90:	700b      	strb	r3, [r1, #0]
 8004d92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d94:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004d98:	4691      	mov	r9, r2
 8004d9a:	f023 0820 	bic.w	r8, r3, #32
 8004d9e:	bfbc      	itt	lt
 8004da0:	4622      	movlt	r2, r4
 8004da2:	4614      	movlt	r4, r2
 8004da4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004da8:	d005      	beq.n	8004db6 <__cvt+0x42>
 8004daa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004dae:	d100      	bne.n	8004db2 <__cvt+0x3e>
 8004db0:	3601      	adds	r6, #1
 8004db2:	2102      	movs	r1, #2
 8004db4:	e000      	b.n	8004db8 <__cvt+0x44>
 8004db6:	2103      	movs	r1, #3
 8004db8:	ab03      	add	r3, sp, #12
 8004dba:	9301      	str	r3, [sp, #4]
 8004dbc:	ab02      	add	r3, sp, #8
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	ec45 4b10 	vmov	d0, r4, r5
 8004dc4:	4653      	mov	r3, sl
 8004dc6:	4632      	mov	r2, r6
 8004dc8:	f001 fdae 	bl	8006928 <_dtoa_r>
 8004dcc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004dd0:	4607      	mov	r7, r0
 8004dd2:	d102      	bne.n	8004dda <__cvt+0x66>
 8004dd4:	f019 0f01 	tst.w	r9, #1
 8004dd8:	d022      	beq.n	8004e20 <__cvt+0xac>
 8004dda:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004dde:	eb07 0906 	add.w	r9, r7, r6
 8004de2:	d110      	bne.n	8004e06 <__cvt+0x92>
 8004de4:	783b      	ldrb	r3, [r7, #0]
 8004de6:	2b30      	cmp	r3, #48	; 0x30
 8004de8:	d10a      	bne.n	8004e00 <__cvt+0x8c>
 8004dea:	2200      	movs	r2, #0
 8004dec:	2300      	movs	r3, #0
 8004dee:	4620      	mov	r0, r4
 8004df0:	4629      	mov	r1, r5
 8004df2:	f7fb fe71 	bl	8000ad8 <__aeabi_dcmpeq>
 8004df6:	b918      	cbnz	r0, 8004e00 <__cvt+0x8c>
 8004df8:	f1c6 0601 	rsb	r6, r6, #1
 8004dfc:	f8ca 6000 	str.w	r6, [sl]
 8004e00:	f8da 3000 	ldr.w	r3, [sl]
 8004e04:	4499      	add	r9, r3
 8004e06:	2200      	movs	r2, #0
 8004e08:	2300      	movs	r3, #0
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	4629      	mov	r1, r5
 8004e0e:	f7fb fe63 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e12:	b108      	cbz	r0, 8004e18 <__cvt+0xa4>
 8004e14:	f8cd 900c 	str.w	r9, [sp, #12]
 8004e18:	2230      	movs	r2, #48	; 0x30
 8004e1a:	9b03      	ldr	r3, [sp, #12]
 8004e1c:	454b      	cmp	r3, r9
 8004e1e:	d307      	bcc.n	8004e30 <__cvt+0xbc>
 8004e20:	9b03      	ldr	r3, [sp, #12]
 8004e22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e24:	1bdb      	subs	r3, r3, r7
 8004e26:	4638      	mov	r0, r7
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	b004      	add	sp, #16
 8004e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e30:	1c59      	adds	r1, r3, #1
 8004e32:	9103      	str	r1, [sp, #12]
 8004e34:	701a      	strb	r2, [r3, #0]
 8004e36:	e7f0      	b.n	8004e1a <__cvt+0xa6>

08004e38 <__exponent>:
 8004e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2900      	cmp	r1, #0
 8004e3e:	bfb8      	it	lt
 8004e40:	4249      	neglt	r1, r1
 8004e42:	f803 2b02 	strb.w	r2, [r3], #2
 8004e46:	bfb4      	ite	lt
 8004e48:	222d      	movlt	r2, #45	; 0x2d
 8004e4a:	222b      	movge	r2, #43	; 0x2b
 8004e4c:	2909      	cmp	r1, #9
 8004e4e:	7042      	strb	r2, [r0, #1]
 8004e50:	dd2a      	ble.n	8004ea8 <__exponent+0x70>
 8004e52:	f10d 0407 	add.w	r4, sp, #7
 8004e56:	46a4      	mov	ip, r4
 8004e58:	270a      	movs	r7, #10
 8004e5a:	46a6      	mov	lr, r4
 8004e5c:	460a      	mov	r2, r1
 8004e5e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004e62:	fb07 1516 	mls	r5, r7, r6, r1
 8004e66:	3530      	adds	r5, #48	; 0x30
 8004e68:	2a63      	cmp	r2, #99	; 0x63
 8004e6a:	f104 34ff 	add.w	r4, r4, #4294967295
 8004e6e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004e72:	4631      	mov	r1, r6
 8004e74:	dcf1      	bgt.n	8004e5a <__exponent+0x22>
 8004e76:	3130      	adds	r1, #48	; 0x30
 8004e78:	f1ae 0502 	sub.w	r5, lr, #2
 8004e7c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004e80:	1c44      	adds	r4, r0, #1
 8004e82:	4629      	mov	r1, r5
 8004e84:	4561      	cmp	r1, ip
 8004e86:	d30a      	bcc.n	8004e9e <__exponent+0x66>
 8004e88:	f10d 0209 	add.w	r2, sp, #9
 8004e8c:	eba2 020e 	sub.w	r2, r2, lr
 8004e90:	4565      	cmp	r5, ip
 8004e92:	bf88      	it	hi
 8004e94:	2200      	movhi	r2, #0
 8004e96:	4413      	add	r3, r2
 8004e98:	1a18      	subs	r0, r3, r0
 8004e9a:	b003      	add	sp, #12
 8004e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ea2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004ea6:	e7ed      	b.n	8004e84 <__exponent+0x4c>
 8004ea8:	2330      	movs	r3, #48	; 0x30
 8004eaa:	3130      	adds	r1, #48	; 0x30
 8004eac:	7083      	strb	r3, [r0, #2]
 8004eae:	70c1      	strb	r1, [r0, #3]
 8004eb0:	1d03      	adds	r3, r0, #4
 8004eb2:	e7f1      	b.n	8004e98 <__exponent+0x60>

08004eb4 <_printf_float>:
 8004eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb8:	ed2d 8b02 	vpush	{d8}
 8004ebc:	b08d      	sub	sp, #52	; 0x34
 8004ebe:	460c      	mov	r4, r1
 8004ec0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004ec4:	4616      	mov	r6, r2
 8004ec6:	461f      	mov	r7, r3
 8004ec8:	4605      	mov	r5, r0
 8004eca:	f002 fe8b 	bl	8007be4 <_localeconv_r>
 8004ece:	f8d0 a000 	ldr.w	sl, [r0]
 8004ed2:	4650      	mov	r0, sl
 8004ed4:	f7fb f984 	bl	80001e0 <strlen>
 8004ed8:	2300      	movs	r3, #0
 8004eda:	930a      	str	r3, [sp, #40]	; 0x28
 8004edc:	6823      	ldr	r3, [r4, #0]
 8004ede:	9305      	str	r3, [sp, #20]
 8004ee0:	f8d8 3000 	ldr.w	r3, [r8]
 8004ee4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004ee8:	3307      	adds	r3, #7
 8004eea:	f023 0307 	bic.w	r3, r3, #7
 8004eee:	f103 0208 	add.w	r2, r3, #8
 8004ef2:	f8c8 2000 	str.w	r2, [r8]
 8004ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004efe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004f02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004f06:	9307      	str	r3, [sp, #28]
 8004f08:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f0c:	ee08 0a10 	vmov	s16, r0
 8004f10:	4b9f      	ldr	r3, [pc, #636]	; (8005190 <_printf_float+0x2dc>)
 8004f12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f16:	f04f 32ff 	mov.w	r2, #4294967295
 8004f1a:	f7fb fe0f 	bl	8000b3c <__aeabi_dcmpun>
 8004f1e:	bb88      	cbnz	r0, 8004f84 <_printf_float+0xd0>
 8004f20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f24:	4b9a      	ldr	r3, [pc, #616]	; (8005190 <_printf_float+0x2dc>)
 8004f26:	f04f 32ff 	mov.w	r2, #4294967295
 8004f2a:	f7fb fde9 	bl	8000b00 <__aeabi_dcmple>
 8004f2e:	bb48      	cbnz	r0, 8004f84 <_printf_float+0xd0>
 8004f30:	2200      	movs	r2, #0
 8004f32:	2300      	movs	r3, #0
 8004f34:	4640      	mov	r0, r8
 8004f36:	4649      	mov	r1, r9
 8004f38:	f7fb fdd8 	bl	8000aec <__aeabi_dcmplt>
 8004f3c:	b110      	cbz	r0, 8004f44 <_printf_float+0x90>
 8004f3e:	232d      	movs	r3, #45	; 0x2d
 8004f40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f44:	4b93      	ldr	r3, [pc, #588]	; (8005194 <_printf_float+0x2e0>)
 8004f46:	4894      	ldr	r0, [pc, #592]	; (8005198 <_printf_float+0x2e4>)
 8004f48:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004f4c:	bf94      	ite	ls
 8004f4e:	4698      	movls	r8, r3
 8004f50:	4680      	movhi	r8, r0
 8004f52:	2303      	movs	r3, #3
 8004f54:	6123      	str	r3, [r4, #16]
 8004f56:	9b05      	ldr	r3, [sp, #20]
 8004f58:	f023 0204 	bic.w	r2, r3, #4
 8004f5c:	6022      	str	r2, [r4, #0]
 8004f5e:	f04f 0900 	mov.w	r9, #0
 8004f62:	9700      	str	r7, [sp, #0]
 8004f64:	4633      	mov	r3, r6
 8004f66:	aa0b      	add	r2, sp, #44	; 0x2c
 8004f68:	4621      	mov	r1, r4
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	f000 f9d8 	bl	8005320 <_printf_common>
 8004f70:	3001      	adds	r0, #1
 8004f72:	f040 8090 	bne.w	8005096 <_printf_float+0x1e2>
 8004f76:	f04f 30ff 	mov.w	r0, #4294967295
 8004f7a:	b00d      	add	sp, #52	; 0x34
 8004f7c:	ecbd 8b02 	vpop	{d8}
 8004f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f84:	4642      	mov	r2, r8
 8004f86:	464b      	mov	r3, r9
 8004f88:	4640      	mov	r0, r8
 8004f8a:	4649      	mov	r1, r9
 8004f8c:	f7fb fdd6 	bl	8000b3c <__aeabi_dcmpun>
 8004f90:	b140      	cbz	r0, 8004fa4 <_printf_float+0xf0>
 8004f92:	464b      	mov	r3, r9
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	bfbc      	itt	lt
 8004f98:	232d      	movlt	r3, #45	; 0x2d
 8004f9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f9e:	487f      	ldr	r0, [pc, #508]	; (800519c <_printf_float+0x2e8>)
 8004fa0:	4b7f      	ldr	r3, [pc, #508]	; (80051a0 <_printf_float+0x2ec>)
 8004fa2:	e7d1      	b.n	8004f48 <_printf_float+0x94>
 8004fa4:	6863      	ldr	r3, [r4, #4]
 8004fa6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004faa:	9206      	str	r2, [sp, #24]
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	d13f      	bne.n	8005030 <_printf_float+0x17c>
 8004fb0:	2306      	movs	r3, #6
 8004fb2:	6063      	str	r3, [r4, #4]
 8004fb4:	9b05      	ldr	r3, [sp, #20]
 8004fb6:	6861      	ldr	r1, [r4, #4]
 8004fb8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	9303      	str	r3, [sp, #12]
 8004fc0:	ab0a      	add	r3, sp, #40	; 0x28
 8004fc2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004fc6:	ab09      	add	r3, sp, #36	; 0x24
 8004fc8:	ec49 8b10 	vmov	d0, r8, r9
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	6022      	str	r2, [r4, #0]
 8004fd0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	f7ff fecd 	bl	8004d74 <__cvt>
 8004fda:	9b06      	ldr	r3, [sp, #24]
 8004fdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004fde:	2b47      	cmp	r3, #71	; 0x47
 8004fe0:	4680      	mov	r8, r0
 8004fe2:	d108      	bne.n	8004ff6 <_printf_float+0x142>
 8004fe4:	1cc8      	adds	r0, r1, #3
 8004fe6:	db02      	blt.n	8004fee <_printf_float+0x13a>
 8004fe8:	6863      	ldr	r3, [r4, #4]
 8004fea:	4299      	cmp	r1, r3
 8004fec:	dd41      	ble.n	8005072 <_printf_float+0x1be>
 8004fee:	f1ab 0b02 	sub.w	fp, fp, #2
 8004ff2:	fa5f fb8b 	uxtb.w	fp, fp
 8004ff6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004ffa:	d820      	bhi.n	800503e <_printf_float+0x18a>
 8004ffc:	3901      	subs	r1, #1
 8004ffe:	465a      	mov	r2, fp
 8005000:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005004:	9109      	str	r1, [sp, #36]	; 0x24
 8005006:	f7ff ff17 	bl	8004e38 <__exponent>
 800500a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800500c:	1813      	adds	r3, r2, r0
 800500e:	2a01      	cmp	r2, #1
 8005010:	4681      	mov	r9, r0
 8005012:	6123      	str	r3, [r4, #16]
 8005014:	dc02      	bgt.n	800501c <_printf_float+0x168>
 8005016:	6822      	ldr	r2, [r4, #0]
 8005018:	07d2      	lsls	r2, r2, #31
 800501a:	d501      	bpl.n	8005020 <_printf_float+0x16c>
 800501c:	3301      	adds	r3, #1
 800501e:	6123      	str	r3, [r4, #16]
 8005020:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005024:	2b00      	cmp	r3, #0
 8005026:	d09c      	beq.n	8004f62 <_printf_float+0xae>
 8005028:	232d      	movs	r3, #45	; 0x2d
 800502a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800502e:	e798      	b.n	8004f62 <_printf_float+0xae>
 8005030:	9a06      	ldr	r2, [sp, #24]
 8005032:	2a47      	cmp	r2, #71	; 0x47
 8005034:	d1be      	bne.n	8004fb4 <_printf_float+0x100>
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1bc      	bne.n	8004fb4 <_printf_float+0x100>
 800503a:	2301      	movs	r3, #1
 800503c:	e7b9      	b.n	8004fb2 <_printf_float+0xfe>
 800503e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005042:	d118      	bne.n	8005076 <_printf_float+0x1c2>
 8005044:	2900      	cmp	r1, #0
 8005046:	6863      	ldr	r3, [r4, #4]
 8005048:	dd0b      	ble.n	8005062 <_printf_float+0x1ae>
 800504a:	6121      	str	r1, [r4, #16]
 800504c:	b913      	cbnz	r3, 8005054 <_printf_float+0x1a0>
 800504e:	6822      	ldr	r2, [r4, #0]
 8005050:	07d0      	lsls	r0, r2, #31
 8005052:	d502      	bpl.n	800505a <_printf_float+0x1a6>
 8005054:	3301      	adds	r3, #1
 8005056:	440b      	add	r3, r1
 8005058:	6123      	str	r3, [r4, #16]
 800505a:	65a1      	str	r1, [r4, #88]	; 0x58
 800505c:	f04f 0900 	mov.w	r9, #0
 8005060:	e7de      	b.n	8005020 <_printf_float+0x16c>
 8005062:	b913      	cbnz	r3, 800506a <_printf_float+0x1b6>
 8005064:	6822      	ldr	r2, [r4, #0]
 8005066:	07d2      	lsls	r2, r2, #31
 8005068:	d501      	bpl.n	800506e <_printf_float+0x1ba>
 800506a:	3302      	adds	r3, #2
 800506c:	e7f4      	b.n	8005058 <_printf_float+0x1a4>
 800506e:	2301      	movs	r3, #1
 8005070:	e7f2      	b.n	8005058 <_printf_float+0x1a4>
 8005072:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005078:	4299      	cmp	r1, r3
 800507a:	db05      	blt.n	8005088 <_printf_float+0x1d4>
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	6121      	str	r1, [r4, #16]
 8005080:	07d8      	lsls	r0, r3, #31
 8005082:	d5ea      	bpl.n	800505a <_printf_float+0x1a6>
 8005084:	1c4b      	adds	r3, r1, #1
 8005086:	e7e7      	b.n	8005058 <_printf_float+0x1a4>
 8005088:	2900      	cmp	r1, #0
 800508a:	bfd4      	ite	le
 800508c:	f1c1 0202 	rsble	r2, r1, #2
 8005090:	2201      	movgt	r2, #1
 8005092:	4413      	add	r3, r2
 8005094:	e7e0      	b.n	8005058 <_printf_float+0x1a4>
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	055a      	lsls	r2, r3, #21
 800509a:	d407      	bmi.n	80050ac <_printf_float+0x1f8>
 800509c:	6923      	ldr	r3, [r4, #16]
 800509e:	4642      	mov	r2, r8
 80050a0:	4631      	mov	r1, r6
 80050a2:	4628      	mov	r0, r5
 80050a4:	47b8      	blx	r7
 80050a6:	3001      	adds	r0, #1
 80050a8:	d12c      	bne.n	8005104 <_printf_float+0x250>
 80050aa:	e764      	b.n	8004f76 <_printf_float+0xc2>
 80050ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80050b0:	f240 80e0 	bls.w	8005274 <_printf_float+0x3c0>
 80050b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80050b8:	2200      	movs	r2, #0
 80050ba:	2300      	movs	r3, #0
 80050bc:	f7fb fd0c 	bl	8000ad8 <__aeabi_dcmpeq>
 80050c0:	2800      	cmp	r0, #0
 80050c2:	d034      	beq.n	800512e <_printf_float+0x27a>
 80050c4:	4a37      	ldr	r2, [pc, #220]	; (80051a4 <_printf_float+0x2f0>)
 80050c6:	2301      	movs	r3, #1
 80050c8:	4631      	mov	r1, r6
 80050ca:	4628      	mov	r0, r5
 80050cc:	47b8      	blx	r7
 80050ce:	3001      	adds	r0, #1
 80050d0:	f43f af51 	beq.w	8004f76 <_printf_float+0xc2>
 80050d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050d8:	429a      	cmp	r2, r3
 80050da:	db02      	blt.n	80050e2 <_printf_float+0x22e>
 80050dc:	6823      	ldr	r3, [r4, #0]
 80050de:	07d8      	lsls	r0, r3, #31
 80050e0:	d510      	bpl.n	8005104 <_printf_float+0x250>
 80050e2:	ee18 3a10 	vmov	r3, s16
 80050e6:	4652      	mov	r2, sl
 80050e8:	4631      	mov	r1, r6
 80050ea:	4628      	mov	r0, r5
 80050ec:	47b8      	blx	r7
 80050ee:	3001      	adds	r0, #1
 80050f0:	f43f af41 	beq.w	8004f76 <_printf_float+0xc2>
 80050f4:	f04f 0800 	mov.w	r8, #0
 80050f8:	f104 091a 	add.w	r9, r4, #26
 80050fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050fe:	3b01      	subs	r3, #1
 8005100:	4543      	cmp	r3, r8
 8005102:	dc09      	bgt.n	8005118 <_printf_float+0x264>
 8005104:	6823      	ldr	r3, [r4, #0]
 8005106:	079b      	lsls	r3, r3, #30
 8005108:	f100 8105 	bmi.w	8005316 <_printf_float+0x462>
 800510c:	68e0      	ldr	r0, [r4, #12]
 800510e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005110:	4298      	cmp	r0, r3
 8005112:	bfb8      	it	lt
 8005114:	4618      	movlt	r0, r3
 8005116:	e730      	b.n	8004f7a <_printf_float+0xc6>
 8005118:	2301      	movs	r3, #1
 800511a:	464a      	mov	r2, r9
 800511c:	4631      	mov	r1, r6
 800511e:	4628      	mov	r0, r5
 8005120:	47b8      	blx	r7
 8005122:	3001      	adds	r0, #1
 8005124:	f43f af27 	beq.w	8004f76 <_printf_float+0xc2>
 8005128:	f108 0801 	add.w	r8, r8, #1
 800512c:	e7e6      	b.n	80050fc <_printf_float+0x248>
 800512e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005130:	2b00      	cmp	r3, #0
 8005132:	dc39      	bgt.n	80051a8 <_printf_float+0x2f4>
 8005134:	4a1b      	ldr	r2, [pc, #108]	; (80051a4 <_printf_float+0x2f0>)
 8005136:	2301      	movs	r3, #1
 8005138:	4631      	mov	r1, r6
 800513a:	4628      	mov	r0, r5
 800513c:	47b8      	blx	r7
 800513e:	3001      	adds	r0, #1
 8005140:	f43f af19 	beq.w	8004f76 <_printf_float+0xc2>
 8005144:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005148:	4313      	orrs	r3, r2
 800514a:	d102      	bne.n	8005152 <_printf_float+0x29e>
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	07d9      	lsls	r1, r3, #31
 8005150:	d5d8      	bpl.n	8005104 <_printf_float+0x250>
 8005152:	ee18 3a10 	vmov	r3, s16
 8005156:	4652      	mov	r2, sl
 8005158:	4631      	mov	r1, r6
 800515a:	4628      	mov	r0, r5
 800515c:	47b8      	blx	r7
 800515e:	3001      	adds	r0, #1
 8005160:	f43f af09 	beq.w	8004f76 <_printf_float+0xc2>
 8005164:	f04f 0900 	mov.w	r9, #0
 8005168:	f104 0a1a 	add.w	sl, r4, #26
 800516c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800516e:	425b      	negs	r3, r3
 8005170:	454b      	cmp	r3, r9
 8005172:	dc01      	bgt.n	8005178 <_printf_float+0x2c4>
 8005174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005176:	e792      	b.n	800509e <_printf_float+0x1ea>
 8005178:	2301      	movs	r3, #1
 800517a:	4652      	mov	r2, sl
 800517c:	4631      	mov	r1, r6
 800517e:	4628      	mov	r0, r5
 8005180:	47b8      	blx	r7
 8005182:	3001      	adds	r0, #1
 8005184:	f43f aef7 	beq.w	8004f76 <_printf_float+0xc2>
 8005188:	f109 0901 	add.w	r9, r9, #1
 800518c:	e7ee      	b.n	800516c <_printf_float+0x2b8>
 800518e:	bf00      	nop
 8005190:	7fefffff 	.word	0x7fefffff
 8005194:	0800a3f8 	.word	0x0800a3f8
 8005198:	0800a3fc 	.word	0x0800a3fc
 800519c:	0800a404 	.word	0x0800a404
 80051a0:	0800a400 	.word	0x0800a400
 80051a4:	0800a408 	.word	0x0800a408
 80051a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051ac:	429a      	cmp	r2, r3
 80051ae:	bfa8      	it	ge
 80051b0:	461a      	movge	r2, r3
 80051b2:	2a00      	cmp	r2, #0
 80051b4:	4691      	mov	r9, r2
 80051b6:	dc37      	bgt.n	8005228 <_printf_float+0x374>
 80051b8:	f04f 0b00 	mov.w	fp, #0
 80051bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051c0:	f104 021a 	add.w	r2, r4, #26
 80051c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051c6:	9305      	str	r3, [sp, #20]
 80051c8:	eba3 0309 	sub.w	r3, r3, r9
 80051cc:	455b      	cmp	r3, fp
 80051ce:	dc33      	bgt.n	8005238 <_printf_float+0x384>
 80051d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051d4:	429a      	cmp	r2, r3
 80051d6:	db3b      	blt.n	8005250 <_printf_float+0x39c>
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	07da      	lsls	r2, r3, #31
 80051dc:	d438      	bmi.n	8005250 <_printf_float+0x39c>
 80051de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051e0:	9a05      	ldr	r2, [sp, #20]
 80051e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051e4:	1a9a      	subs	r2, r3, r2
 80051e6:	eba3 0901 	sub.w	r9, r3, r1
 80051ea:	4591      	cmp	r9, r2
 80051ec:	bfa8      	it	ge
 80051ee:	4691      	movge	r9, r2
 80051f0:	f1b9 0f00 	cmp.w	r9, #0
 80051f4:	dc35      	bgt.n	8005262 <_printf_float+0x3ae>
 80051f6:	f04f 0800 	mov.w	r8, #0
 80051fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051fe:	f104 0a1a 	add.w	sl, r4, #26
 8005202:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005206:	1a9b      	subs	r3, r3, r2
 8005208:	eba3 0309 	sub.w	r3, r3, r9
 800520c:	4543      	cmp	r3, r8
 800520e:	f77f af79 	ble.w	8005104 <_printf_float+0x250>
 8005212:	2301      	movs	r3, #1
 8005214:	4652      	mov	r2, sl
 8005216:	4631      	mov	r1, r6
 8005218:	4628      	mov	r0, r5
 800521a:	47b8      	blx	r7
 800521c:	3001      	adds	r0, #1
 800521e:	f43f aeaa 	beq.w	8004f76 <_printf_float+0xc2>
 8005222:	f108 0801 	add.w	r8, r8, #1
 8005226:	e7ec      	b.n	8005202 <_printf_float+0x34e>
 8005228:	4613      	mov	r3, r2
 800522a:	4631      	mov	r1, r6
 800522c:	4642      	mov	r2, r8
 800522e:	4628      	mov	r0, r5
 8005230:	47b8      	blx	r7
 8005232:	3001      	adds	r0, #1
 8005234:	d1c0      	bne.n	80051b8 <_printf_float+0x304>
 8005236:	e69e      	b.n	8004f76 <_printf_float+0xc2>
 8005238:	2301      	movs	r3, #1
 800523a:	4631      	mov	r1, r6
 800523c:	4628      	mov	r0, r5
 800523e:	9205      	str	r2, [sp, #20]
 8005240:	47b8      	blx	r7
 8005242:	3001      	adds	r0, #1
 8005244:	f43f ae97 	beq.w	8004f76 <_printf_float+0xc2>
 8005248:	9a05      	ldr	r2, [sp, #20]
 800524a:	f10b 0b01 	add.w	fp, fp, #1
 800524e:	e7b9      	b.n	80051c4 <_printf_float+0x310>
 8005250:	ee18 3a10 	vmov	r3, s16
 8005254:	4652      	mov	r2, sl
 8005256:	4631      	mov	r1, r6
 8005258:	4628      	mov	r0, r5
 800525a:	47b8      	blx	r7
 800525c:	3001      	adds	r0, #1
 800525e:	d1be      	bne.n	80051de <_printf_float+0x32a>
 8005260:	e689      	b.n	8004f76 <_printf_float+0xc2>
 8005262:	9a05      	ldr	r2, [sp, #20]
 8005264:	464b      	mov	r3, r9
 8005266:	4442      	add	r2, r8
 8005268:	4631      	mov	r1, r6
 800526a:	4628      	mov	r0, r5
 800526c:	47b8      	blx	r7
 800526e:	3001      	adds	r0, #1
 8005270:	d1c1      	bne.n	80051f6 <_printf_float+0x342>
 8005272:	e680      	b.n	8004f76 <_printf_float+0xc2>
 8005274:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005276:	2a01      	cmp	r2, #1
 8005278:	dc01      	bgt.n	800527e <_printf_float+0x3ca>
 800527a:	07db      	lsls	r3, r3, #31
 800527c:	d538      	bpl.n	80052f0 <_printf_float+0x43c>
 800527e:	2301      	movs	r3, #1
 8005280:	4642      	mov	r2, r8
 8005282:	4631      	mov	r1, r6
 8005284:	4628      	mov	r0, r5
 8005286:	47b8      	blx	r7
 8005288:	3001      	adds	r0, #1
 800528a:	f43f ae74 	beq.w	8004f76 <_printf_float+0xc2>
 800528e:	ee18 3a10 	vmov	r3, s16
 8005292:	4652      	mov	r2, sl
 8005294:	4631      	mov	r1, r6
 8005296:	4628      	mov	r0, r5
 8005298:	47b8      	blx	r7
 800529a:	3001      	adds	r0, #1
 800529c:	f43f ae6b 	beq.w	8004f76 <_printf_float+0xc2>
 80052a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052a4:	2200      	movs	r2, #0
 80052a6:	2300      	movs	r3, #0
 80052a8:	f7fb fc16 	bl	8000ad8 <__aeabi_dcmpeq>
 80052ac:	b9d8      	cbnz	r0, 80052e6 <_printf_float+0x432>
 80052ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052b0:	f108 0201 	add.w	r2, r8, #1
 80052b4:	3b01      	subs	r3, #1
 80052b6:	4631      	mov	r1, r6
 80052b8:	4628      	mov	r0, r5
 80052ba:	47b8      	blx	r7
 80052bc:	3001      	adds	r0, #1
 80052be:	d10e      	bne.n	80052de <_printf_float+0x42a>
 80052c0:	e659      	b.n	8004f76 <_printf_float+0xc2>
 80052c2:	2301      	movs	r3, #1
 80052c4:	4652      	mov	r2, sl
 80052c6:	4631      	mov	r1, r6
 80052c8:	4628      	mov	r0, r5
 80052ca:	47b8      	blx	r7
 80052cc:	3001      	adds	r0, #1
 80052ce:	f43f ae52 	beq.w	8004f76 <_printf_float+0xc2>
 80052d2:	f108 0801 	add.w	r8, r8, #1
 80052d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052d8:	3b01      	subs	r3, #1
 80052da:	4543      	cmp	r3, r8
 80052dc:	dcf1      	bgt.n	80052c2 <_printf_float+0x40e>
 80052de:	464b      	mov	r3, r9
 80052e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80052e4:	e6dc      	b.n	80050a0 <_printf_float+0x1ec>
 80052e6:	f04f 0800 	mov.w	r8, #0
 80052ea:	f104 0a1a 	add.w	sl, r4, #26
 80052ee:	e7f2      	b.n	80052d6 <_printf_float+0x422>
 80052f0:	2301      	movs	r3, #1
 80052f2:	4642      	mov	r2, r8
 80052f4:	e7df      	b.n	80052b6 <_printf_float+0x402>
 80052f6:	2301      	movs	r3, #1
 80052f8:	464a      	mov	r2, r9
 80052fa:	4631      	mov	r1, r6
 80052fc:	4628      	mov	r0, r5
 80052fe:	47b8      	blx	r7
 8005300:	3001      	adds	r0, #1
 8005302:	f43f ae38 	beq.w	8004f76 <_printf_float+0xc2>
 8005306:	f108 0801 	add.w	r8, r8, #1
 800530a:	68e3      	ldr	r3, [r4, #12]
 800530c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800530e:	1a5b      	subs	r3, r3, r1
 8005310:	4543      	cmp	r3, r8
 8005312:	dcf0      	bgt.n	80052f6 <_printf_float+0x442>
 8005314:	e6fa      	b.n	800510c <_printf_float+0x258>
 8005316:	f04f 0800 	mov.w	r8, #0
 800531a:	f104 0919 	add.w	r9, r4, #25
 800531e:	e7f4      	b.n	800530a <_printf_float+0x456>

08005320 <_printf_common>:
 8005320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005324:	4616      	mov	r6, r2
 8005326:	4699      	mov	r9, r3
 8005328:	688a      	ldr	r2, [r1, #8]
 800532a:	690b      	ldr	r3, [r1, #16]
 800532c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005330:	4293      	cmp	r3, r2
 8005332:	bfb8      	it	lt
 8005334:	4613      	movlt	r3, r2
 8005336:	6033      	str	r3, [r6, #0]
 8005338:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800533c:	4607      	mov	r7, r0
 800533e:	460c      	mov	r4, r1
 8005340:	b10a      	cbz	r2, 8005346 <_printf_common+0x26>
 8005342:	3301      	adds	r3, #1
 8005344:	6033      	str	r3, [r6, #0]
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	0699      	lsls	r1, r3, #26
 800534a:	bf42      	ittt	mi
 800534c:	6833      	ldrmi	r3, [r6, #0]
 800534e:	3302      	addmi	r3, #2
 8005350:	6033      	strmi	r3, [r6, #0]
 8005352:	6825      	ldr	r5, [r4, #0]
 8005354:	f015 0506 	ands.w	r5, r5, #6
 8005358:	d106      	bne.n	8005368 <_printf_common+0x48>
 800535a:	f104 0a19 	add.w	sl, r4, #25
 800535e:	68e3      	ldr	r3, [r4, #12]
 8005360:	6832      	ldr	r2, [r6, #0]
 8005362:	1a9b      	subs	r3, r3, r2
 8005364:	42ab      	cmp	r3, r5
 8005366:	dc26      	bgt.n	80053b6 <_printf_common+0x96>
 8005368:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800536c:	1e13      	subs	r3, r2, #0
 800536e:	6822      	ldr	r2, [r4, #0]
 8005370:	bf18      	it	ne
 8005372:	2301      	movne	r3, #1
 8005374:	0692      	lsls	r2, r2, #26
 8005376:	d42b      	bmi.n	80053d0 <_printf_common+0xb0>
 8005378:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800537c:	4649      	mov	r1, r9
 800537e:	4638      	mov	r0, r7
 8005380:	47c0      	blx	r8
 8005382:	3001      	adds	r0, #1
 8005384:	d01e      	beq.n	80053c4 <_printf_common+0xa4>
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	68e5      	ldr	r5, [r4, #12]
 800538a:	6832      	ldr	r2, [r6, #0]
 800538c:	f003 0306 	and.w	r3, r3, #6
 8005390:	2b04      	cmp	r3, #4
 8005392:	bf08      	it	eq
 8005394:	1aad      	subeq	r5, r5, r2
 8005396:	68a3      	ldr	r3, [r4, #8]
 8005398:	6922      	ldr	r2, [r4, #16]
 800539a:	bf0c      	ite	eq
 800539c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053a0:	2500      	movne	r5, #0
 80053a2:	4293      	cmp	r3, r2
 80053a4:	bfc4      	itt	gt
 80053a6:	1a9b      	subgt	r3, r3, r2
 80053a8:	18ed      	addgt	r5, r5, r3
 80053aa:	2600      	movs	r6, #0
 80053ac:	341a      	adds	r4, #26
 80053ae:	42b5      	cmp	r5, r6
 80053b0:	d11a      	bne.n	80053e8 <_printf_common+0xc8>
 80053b2:	2000      	movs	r0, #0
 80053b4:	e008      	b.n	80053c8 <_printf_common+0xa8>
 80053b6:	2301      	movs	r3, #1
 80053b8:	4652      	mov	r2, sl
 80053ba:	4649      	mov	r1, r9
 80053bc:	4638      	mov	r0, r7
 80053be:	47c0      	blx	r8
 80053c0:	3001      	adds	r0, #1
 80053c2:	d103      	bne.n	80053cc <_printf_common+0xac>
 80053c4:	f04f 30ff 	mov.w	r0, #4294967295
 80053c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053cc:	3501      	adds	r5, #1
 80053ce:	e7c6      	b.n	800535e <_printf_common+0x3e>
 80053d0:	18e1      	adds	r1, r4, r3
 80053d2:	1c5a      	adds	r2, r3, #1
 80053d4:	2030      	movs	r0, #48	; 0x30
 80053d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053da:	4422      	add	r2, r4
 80053dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053e4:	3302      	adds	r3, #2
 80053e6:	e7c7      	b.n	8005378 <_printf_common+0x58>
 80053e8:	2301      	movs	r3, #1
 80053ea:	4622      	mov	r2, r4
 80053ec:	4649      	mov	r1, r9
 80053ee:	4638      	mov	r0, r7
 80053f0:	47c0      	blx	r8
 80053f2:	3001      	adds	r0, #1
 80053f4:	d0e6      	beq.n	80053c4 <_printf_common+0xa4>
 80053f6:	3601      	adds	r6, #1
 80053f8:	e7d9      	b.n	80053ae <_printf_common+0x8e>
	...

080053fc <_printf_i>:
 80053fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005400:	7e0f      	ldrb	r7, [r1, #24]
 8005402:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005404:	2f78      	cmp	r7, #120	; 0x78
 8005406:	4691      	mov	r9, r2
 8005408:	4680      	mov	r8, r0
 800540a:	460c      	mov	r4, r1
 800540c:	469a      	mov	sl, r3
 800540e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005412:	d807      	bhi.n	8005424 <_printf_i+0x28>
 8005414:	2f62      	cmp	r7, #98	; 0x62
 8005416:	d80a      	bhi.n	800542e <_printf_i+0x32>
 8005418:	2f00      	cmp	r7, #0
 800541a:	f000 80d8 	beq.w	80055ce <_printf_i+0x1d2>
 800541e:	2f58      	cmp	r7, #88	; 0x58
 8005420:	f000 80a3 	beq.w	800556a <_printf_i+0x16e>
 8005424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005428:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800542c:	e03a      	b.n	80054a4 <_printf_i+0xa8>
 800542e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005432:	2b15      	cmp	r3, #21
 8005434:	d8f6      	bhi.n	8005424 <_printf_i+0x28>
 8005436:	a101      	add	r1, pc, #4	; (adr r1, 800543c <_printf_i+0x40>)
 8005438:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800543c:	08005495 	.word	0x08005495
 8005440:	080054a9 	.word	0x080054a9
 8005444:	08005425 	.word	0x08005425
 8005448:	08005425 	.word	0x08005425
 800544c:	08005425 	.word	0x08005425
 8005450:	08005425 	.word	0x08005425
 8005454:	080054a9 	.word	0x080054a9
 8005458:	08005425 	.word	0x08005425
 800545c:	08005425 	.word	0x08005425
 8005460:	08005425 	.word	0x08005425
 8005464:	08005425 	.word	0x08005425
 8005468:	080055b5 	.word	0x080055b5
 800546c:	080054d9 	.word	0x080054d9
 8005470:	08005597 	.word	0x08005597
 8005474:	08005425 	.word	0x08005425
 8005478:	08005425 	.word	0x08005425
 800547c:	080055d7 	.word	0x080055d7
 8005480:	08005425 	.word	0x08005425
 8005484:	080054d9 	.word	0x080054d9
 8005488:	08005425 	.word	0x08005425
 800548c:	08005425 	.word	0x08005425
 8005490:	0800559f 	.word	0x0800559f
 8005494:	682b      	ldr	r3, [r5, #0]
 8005496:	1d1a      	adds	r2, r3, #4
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	602a      	str	r2, [r5, #0]
 800549c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054a4:	2301      	movs	r3, #1
 80054a6:	e0a3      	b.n	80055f0 <_printf_i+0x1f4>
 80054a8:	6820      	ldr	r0, [r4, #0]
 80054aa:	6829      	ldr	r1, [r5, #0]
 80054ac:	0606      	lsls	r6, r0, #24
 80054ae:	f101 0304 	add.w	r3, r1, #4
 80054b2:	d50a      	bpl.n	80054ca <_printf_i+0xce>
 80054b4:	680e      	ldr	r6, [r1, #0]
 80054b6:	602b      	str	r3, [r5, #0]
 80054b8:	2e00      	cmp	r6, #0
 80054ba:	da03      	bge.n	80054c4 <_printf_i+0xc8>
 80054bc:	232d      	movs	r3, #45	; 0x2d
 80054be:	4276      	negs	r6, r6
 80054c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054c4:	485e      	ldr	r0, [pc, #376]	; (8005640 <_printf_i+0x244>)
 80054c6:	230a      	movs	r3, #10
 80054c8:	e019      	b.n	80054fe <_printf_i+0x102>
 80054ca:	680e      	ldr	r6, [r1, #0]
 80054cc:	602b      	str	r3, [r5, #0]
 80054ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80054d2:	bf18      	it	ne
 80054d4:	b236      	sxthne	r6, r6
 80054d6:	e7ef      	b.n	80054b8 <_printf_i+0xbc>
 80054d8:	682b      	ldr	r3, [r5, #0]
 80054da:	6820      	ldr	r0, [r4, #0]
 80054dc:	1d19      	adds	r1, r3, #4
 80054de:	6029      	str	r1, [r5, #0]
 80054e0:	0601      	lsls	r1, r0, #24
 80054e2:	d501      	bpl.n	80054e8 <_printf_i+0xec>
 80054e4:	681e      	ldr	r6, [r3, #0]
 80054e6:	e002      	b.n	80054ee <_printf_i+0xf2>
 80054e8:	0646      	lsls	r6, r0, #25
 80054ea:	d5fb      	bpl.n	80054e4 <_printf_i+0xe8>
 80054ec:	881e      	ldrh	r6, [r3, #0]
 80054ee:	4854      	ldr	r0, [pc, #336]	; (8005640 <_printf_i+0x244>)
 80054f0:	2f6f      	cmp	r7, #111	; 0x6f
 80054f2:	bf0c      	ite	eq
 80054f4:	2308      	moveq	r3, #8
 80054f6:	230a      	movne	r3, #10
 80054f8:	2100      	movs	r1, #0
 80054fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054fe:	6865      	ldr	r5, [r4, #4]
 8005500:	60a5      	str	r5, [r4, #8]
 8005502:	2d00      	cmp	r5, #0
 8005504:	bfa2      	ittt	ge
 8005506:	6821      	ldrge	r1, [r4, #0]
 8005508:	f021 0104 	bicge.w	r1, r1, #4
 800550c:	6021      	strge	r1, [r4, #0]
 800550e:	b90e      	cbnz	r6, 8005514 <_printf_i+0x118>
 8005510:	2d00      	cmp	r5, #0
 8005512:	d04d      	beq.n	80055b0 <_printf_i+0x1b4>
 8005514:	4615      	mov	r5, r2
 8005516:	fbb6 f1f3 	udiv	r1, r6, r3
 800551a:	fb03 6711 	mls	r7, r3, r1, r6
 800551e:	5dc7      	ldrb	r7, [r0, r7]
 8005520:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005524:	4637      	mov	r7, r6
 8005526:	42bb      	cmp	r3, r7
 8005528:	460e      	mov	r6, r1
 800552a:	d9f4      	bls.n	8005516 <_printf_i+0x11a>
 800552c:	2b08      	cmp	r3, #8
 800552e:	d10b      	bne.n	8005548 <_printf_i+0x14c>
 8005530:	6823      	ldr	r3, [r4, #0]
 8005532:	07de      	lsls	r6, r3, #31
 8005534:	d508      	bpl.n	8005548 <_printf_i+0x14c>
 8005536:	6923      	ldr	r3, [r4, #16]
 8005538:	6861      	ldr	r1, [r4, #4]
 800553a:	4299      	cmp	r1, r3
 800553c:	bfde      	ittt	le
 800553e:	2330      	movle	r3, #48	; 0x30
 8005540:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005544:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005548:	1b52      	subs	r2, r2, r5
 800554a:	6122      	str	r2, [r4, #16]
 800554c:	f8cd a000 	str.w	sl, [sp]
 8005550:	464b      	mov	r3, r9
 8005552:	aa03      	add	r2, sp, #12
 8005554:	4621      	mov	r1, r4
 8005556:	4640      	mov	r0, r8
 8005558:	f7ff fee2 	bl	8005320 <_printf_common>
 800555c:	3001      	adds	r0, #1
 800555e:	d14c      	bne.n	80055fa <_printf_i+0x1fe>
 8005560:	f04f 30ff 	mov.w	r0, #4294967295
 8005564:	b004      	add	sp, #16
 8005566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800556a:	4835      	ldr	r0, [pc, #212]	; (8005640 <_printf_i+0x244>)
 800556c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005570:	6829      	ldr	r1, [r5, #0]
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	f851 6b04 	ldr.w	r6, [r1], #4
 8005578:	6029      	str	r1, [r5, #0]
 800557a:	061d      	lsls	r5, r3, #24
 800557c:	d514      	bpl.n	80055a8 <_printf_i+0x1ac>
 800557e:	07df      	lsls	r7, r3, #31
 8005580:	bf44      	itt	mi
 8005582:	f043 0320 	orrmi.w	r3, r3, #32
 8005586:	6023      	strmi	r3, [r4, #0]
 8005588:	b91e      	cbnz	r6, 8005592 <_printf_i+0x196>
 800558a:	6823      	ldr	r3, [r4, #0]
 800558c:	f023 0320 	bic.w	r3, r3, #32
 8005590:	6023      	str	r3, [r4, #0]
 8005592:	2310      	movs	r3, #16
 8005594:	e7b0      	b.n	80054f8 <_printf_i+0xfc>
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	f043 0320 	orr.w	r3, r3, #32
 800559c:	6023      	str	r3, [r4, #0]
 800559e:	2378      	movs	r3, #120	; 0x78
 80055a0:	4828      	ldr	r0, [pc, #160]	; (8005644 <_printf_i+0x248>)
 80055a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055a6:	e7e3      	b.n	8005570 <_printf_i+0x174>
 80055a8:	0659      	lsls	r1, r3, #25
 80055aa:	bf48      	it	mi
 80055ac:	b2b6      	uxthmi	r6, r6
 80055ae:	e7e6      	b.n	800557e <_printf_i+0x182>
 80055b0:	4615      	mov	r5, r2
 80055b2:	e7bb      	b.n	800552c <_printf_i+0x130>
 80055b4:	682b      	ldr	r3, [r5, #0]
 80055b6:	6826      	ldr	r6, [r4, #0]
 80055b8:	6961      	ldr	r1, [r4, #20]
 80055ba:	1d18      	adds	r0, r3, #4
 80055bc:	6028      	str	r0, [r5, #0]
 80055be:	0635      	lsls	r5, r6, #24
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	d501      	bpl.n	80055c8 <_printf_i+0x1cc>
 80055c4:	6019      	str	r1, [r3, #0]
 80055c6:	e002      	b.n	80055ce <_printf_i+0x1d2>
 80055c8:	0670      	lsls	r0, r6, #25
 80055ca:	d5fb      	bpl.n	80055c4 <_printf_i+0x1c8>
 80055cc:	8019      	strh	r1, [r3, #0]
 80055ce:	2300      	movs	r3, #0
 80055d0:	6123      	str	r3, [r4, #16]
 80055d2:	4615      	mov	r5, r2
 80055d4:	e7ba      	b.n	800554c <_printf_i+0x150>
 80055d6:	682b      	ldr	r3, [r5, #0]
 80055d8:	1d1a      	adds	r2, r3, #4
 80055da:	602a      	str	r2, [r5, #0]
 80055dc:	681d      	ldr	r5, [r3, #0]
 80055de:	6862      	ldr	r2, [r4, #4]
 80055e0:	2100      	movs	r1, #0
 80055e2:	4628      	mov	r0, r5
 80055e4:	f7fa fe04 	bl	80001f0 <memchr>
 80055e8:	b108      	cbz	r0, 80055ee <_printf_i+0x1f2>
 80055ea:	1b40      	subs	r0, r0, r5
 80055ec:	6060      	str	r0, [r4, #4]
 80055ee:	6863      	ldr	r3, [r4, #4]
 80055f0:	6123      	str	r3, [r4, #16]
 80055f2:	2300      	movs	r3, #0
 80055f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055f8:	e7a8      	b.n	800554c <_printf_i+0x150>
 80055fa:	6923      	ldr	r3, [r4, #16]
 80055fc:	462a      	mov	r2, r5
 80055fe:	4649      	mov	r1, r9
 8005600:	4640      	mov	r0, r8
 8005602:	47d0      	blx	sl
 8005604:	3001      	adds	r0, #1
 8005606:	d0ab      	beq.n	8005560 <_printf_i+0x164>
 8005608:	6823      	ldr	r3, [r4, #0]
 800560a:	079b      	lsls	r3, r3, #30
 800560c:	d413      	bmi.n	8005636 <_printf_i+0x23a>
 800560e:	68e0      	ldr	r0, [r4, #12]
 8005610:	9b03      	ldr	r3, [sp, #12]
 8005612:	4298      	cmp	r0, r3
 8005614:	bfb8      	it	lt
 8005616:	4618      	movlt	r0, r3
 8005618:	e7a4      	b.n	8005564 <_printf_i+0x168>
 800561a:	2301      	movs	r3, #1
 800561c:	4632      	mov	r2, r6
 800561e:	4649      	mov	r1, r9
 8005620:	4640      	mov	r0, r8
 8005622:	47d0      	blx	sl
 8005624:	3001      	adds	r0, #1
 8005626:	d09b      	beq.n	8005560 <_printf_i+0x164>
 8005628:	3501      	adds	r5, #1
 800562a:	68e3      	ldr	r3, [r4, #12]
 800562c:	9903      	ldr	r1, [sp, #12]
 800562e:	1a5b      	subs	r3, r3, r1
 8005630:	42ab      	cmp	r3, r5
 8005632:	dcf2      	bgt.n	800561a <_printf_i+0x21e>
 8005634:	e7eb      	b.n	800560e <_printf_i+0x212>
 8005636:	2500      	movs	r5, #0
 8005638:	f104 0619 	add.w	r6, r4, #25
 800563c:	e7f5      	b.n	800562a <_printf_i+0x22e>
 800563e:	bf00      	nop
 8005640:	0800a40a 	.word	0x0800a40a
 8005644:	0800a41b 	.word	0x0800a41b

08005648 <_scanf_float>:
 8005648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800564c:	b087      	sub	sp, #28
 800564e:	4617      	mov	r7, r2
 8005650:	9303      	str	r3, [sp, #12]
 8005652:	688b      	ldr	r3, [r1, #8]
 8005654:	1e5a      	subs	r2, r3, #1
 8005656:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800565a:	bf83      	ittte	hi
 800565c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005660:	195b      	addhi	r3, r3, r5
 8005662:	9302      	strhi	r3, [sp, #8]
 8005664:	2300      	movls	r3, #0
 8005666:	bf86      	itte	hi
 8005668:	f240 135d 	movwhi	r3, #349	; 0x15d
 800566c:	608b      	strhi	r3, [r1, #8]
 800566e:	9302      	strls	r3, [sp, #8]
 8005670:	680b      	ldr	r3, [r1, #0]
 8005672:	468b      	mov	fp, r1
 8005674:	2500      	movs	r5, #0
 8005676:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800567a:	f84b 3b1c 	str.w	r3, [fp], #28
 800567e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005682:	4680      	mov	r8, r0
 8005684:	460c      	mov	r4, r1
 8005686:	465e      	mov	r6, fp
 8005688:	46aa      	mov	sl, r5
 800568a:	46a9      	mov	r9, r5
 800568c:	9501      	str	r5, [sp, #4]
 800568e:	68a2      	ldr	r2, [r4, #8]
 8005690:	b152      	cbz	r2, 80056a8 <_scanf_float+0x60>
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2b4e      	cmp	r3, #78	; 0x4e
 8005698:	d864      	bhi.n	8005764 <_scanf_float+0x11c>
 800569a:	2b40      	cmp	r3, #64	; 0x40
 800569c:	d83c      	bhi.n	8005718 <_scanf_float+0xd0>
 800569e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80056a2:	b2c8      	uxtb	r0, r1
 80056a4:	280e      	cmp	r0, #14
 80056a6:	d93a      	bls.n	800571e <_scanf_float+0xd6>
 80056a8:	f1b9 0f00 	cmp.w	r9, #0
 80056ac:	d003      	beq.n	80056b6 <_scanf_float+0x6e>
 80056ae:	6823      	ldr	r3, [r4, #0]
 80056b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056b4:	6023      	str	r3, [r4, #0]
 80056b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056ba:	f1ba 0f01 	cmp.w	sl, #1
 80056be:	f200 8113 	bhi.w	80058e8 <_scanf_float+0x2a0>
 80056c2:	455e      	cmp	r6, fp
 80056c4:	f200 8105 	bhi.w	80058d2 <_scanf_float+0x28a>
 80056c8:	2501      	movs	r5, #1
 80056ca:	4628      	mov	r0, r5
 80056cc:	b007      	add	sp, #28
 80056ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056d2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80056d6:	2a0d      	cmp	r2, #13
 80056d8:	d8e6      	bhi.n	80056a8 <_scanf_float+0x60>
 80056da:	a101      	add	r1, pc, #4	; (adr r1, 80056e0 <_scanf_float+0x98>)
 80056dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80056e0:	0800581f 	.word	0x0800581f
 80056e4:	080056a9 	.word	0x080056a9
 80056e8:	080056a9 	.word	0x080056a9
 80056ec:	080056a9 	.word	0x080056a9
 80056f0:	0800587f 	.word	0x0800587f
 80056f4:	08005857 	.word	0x08005857
 80056f8:	080056a9 	.word	0x080056a9
 80056fc:	080056a9 	.word	0x080056a9
 8005700:	0800582d 	.word	0x0800582d
 8005704:	080056a9 	.word	0x080056a9
 8005708:	080056a9 	.word	0x080056a9
 800570c:	080056a9 	.word	0x080056a9
 8005710:	080056a9 	.word	0x080056a9
 8005714:	080057e5 	.word	0x080057e5
 8005718:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800571c:	e7db      	b.n	80056d6 <_scanf_float+0x8e>
 800571e:	290e      	cmp	r1, #14
 8005720:	d8c2      	bhi.n	80056a8 <_scanf_float+0x60>
 8005722:	a001      	add	r0, pc, #4	; (adr r0, 8005728 <_scanf_float+0xe0>)
 8005724:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005728:	080057d7 	.word	0x080057d7
 800572c:	080056a9 	.word	0x080056a9
 8005730:	080057d7 	.word	0x080057d7
 8005734:	0800586b 	.word	0x0800586b
 8005738:	080056a9 	.word	0x080056a9
 800573c:	08005785 	.word	0x08005785
 8005740:	080057c1 	.word	0x080057c1
 8005744:	080057c1 	.word	0x080057c1
 8005748:	080057c1 	.word	0x080057c1
 800574c:	080057c1 	.word	0x080057c1
 8005750:	080057c1 	.word	0x080057c1
 8005754:	080057c1 	.word	0x080057c1
 8005758:	080057c1 	.word	0x080057c1
 800575c:	080057c1 	.word	0x080057c1
 8005760:	080057c1 	.word	0x080057c1
 8005764:	2b6e      	cmp	r3, #110	; 0x6e
 8005766:	d809      	bhi.n	800577c <_scanf_float+0x134>
 8005768:	2b60      	cmp	r3, #96	; 0x60
 800576a:	d8b2      	bhi.n	80056d2 <_scanf_float+0x8a>
 800576c:	2b54      	cmp	r3, #84	; 0x54
 800576e:	d077      	beq.n	8005860 <_scanf_float+0x218>
 8005770:	2b59      	cmp	r3, #89	; 0x59
 8005772:	d199      	bne.n	80056a8 <_scanf_float+0x60>
 8005774:	2d07      	cmp	r5, #7
 8005776:	d197      	bne.n	80056a8 <_scanf_float+0x60>
 8005778:	2508      	movs	r5, #8
 800577a:	e029      	b.n	80057d0 <_scanf_float+0x188>
 800577c:	2b74      	cmp	r3, #116	; 0x74
 800577e:	d06f      	beq.n	8005860 <_scanf_float+0x218>
 8005780:	2b79      	cmp	r3, #121	; 0x79
 8005782:	e7f6      	b.n	8005772 <_scanf_float+0x12a>
 8005784:	6821      	ldr	r1, [r4, #0]
 8005786:	05c8      	lsls	r0, r1, #23
 8005788:	d51a      	bpl.n	80057c0 <_scanf_float+0x178>
 800578a:	9b02      	ldr	r3, [sp, #8]
 800578c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005790:	6021      	str	r1, [r4, #0]
 8005792:	f109 0901 	add.w	r9, r9, #1
 8005796:	b11b      	cbz	r3, 80057a0 <_scanf_float+0x158>
 8005798:	3b01      	subs	r3, #1
 800579a:	3201      	adds	r2, #1
 800579c:	9302      	str	r3, [sp, #8]
 800579e:	60a2      	str	r2, [r4, #8]
 80057a0:	68a3      	ldr	r3, [r4, #8]
 80057a2:	3b01      	subs	r3, #1
 80057a4:	60a3      	str	r3, [r4, #8]
 80057a6:	6923      	ldr	r3, [r4, #16]
 80057a8:	3301      	adds	r3, #1
 80057aa:	6123      	str	r3, [r4, #16]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3b01      	subs	r3, #1
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	607b      	str	r3, [r7, #4]
 80057b4:	f340 8084 	ble.w	80058c0 <_scanf_float+0x278>
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	3301      	adds	r3, #1
 80057bc:	603b      	str	r3, [r7, #0]
 80057be:	e766      	b.n	800568e <_scanf_float+0x46>
 80057c0:	eb1a 0f05 	cmn.w	sl, r5
 80057c4:	f47f af70 	bne.w	80056a8 <_scanf_float+0x60>
 80057c8:	6822      	ldr	r2, [r4, #0]
 80057ca:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80057ce:	6022      	str	r2, [r4, #0]
 80057d0:	f806 3b01 	strb.w	r3, [r6], #1
 80057d4:	e7e4      	b.n	80057a0 <_scanf_float+0x158>
 80057d6:	6822      	ldr	r2, [r4, #0]
 80057d8:	0610      	lsls	r0, r2, #24
 80057da:	f57f af65 	bpl.w	80056a8 <_scanf_float+0x60>
 80057de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057e2:	e7f4      	b.n	80057ce <_scanf_float+0x186>
 80057e4:	f1ba 0f00 	cmp.w	sl, #0
 80057e8:	d10e      	bne.n	8005808 <_scanf_float+0x1c0>
 80057ea:	f1b9 0f00 	cmp.w	r9, #0
 80057ee:	d10e      	bne.n	800580e <_scanf_float+0x1c6>
 80057f0:	6822      	ldr	r2, [r4, #0]
 80057f2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80057f6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80057fa:	d108      	bne.n	800580e <_scanf_float+0x1c6>
 80057fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005800:	6022      	str	r2, [r4, #0]
 8005802:	f04f 0a01 	mov.w	sl, #1
 8005806:	e7e3      	b.n	80057d0 <_scanf_float+0x188>
 8005808:	f1ba 0f02 	cmp.w	sl, #2
 800580c:	d055      	beq.n	80058ba <_scanf_float+0x272>
 800580e:	2d01      	cmp	r5, #1
 8005810:	d002      	beq.n	8005818 <_scanf_float+0x1d0>
 8005812:	2d04      	cmp	r5, #4
 8005814:	f47f af48 	bne.w	80056a8 <_scanf_float+0x60>
 8005818:	3501      	adds	r5, #1
 800581a:	b2ed      	uxtb	r5, r5
 800581c:	e7d8      	b.n	80057d0 <_scanf_float+0x188>
 800581e:	f1ba 0f01 	cmp.w	sl, #1
 8005822:	f47f af41 	bne.w	80056a8 <_scanf_float+0x60>
 8005826:	f04f 0a02 	mov.w	sl, #2
 800582a:	e7d1      	b.n	80057d0 <_scanf_float+0x188>
 800582c:	b97d      	cbnz	r5, 800584e <_scanf_float+0x206>
 800582e:	f1b9 0f00 	cmp.w	r9, #0
 8005832:	f47f af3c 	bne.w	80056ae <_scanf_float+0x66>
 8005836:	6822      	ldr	r2, [r4, #0]
 8005838:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800583c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005840:	f47f af39 	bne.w	80056b6 <_scanf_float+0x6e>
 8005844:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005848:	6022      	str	r2, [r4, #0]
 800584a:	2501      	movs	r5, #1
 800584c:	e7c0      	b.n	80057d0 <_scanf_float+0x188>
 800584e:	2d03      	cmp	r5, #3
 8005850:	d0e2      	beq.n	8005818 <_scanf_float+0x1d0>
 8005852:	2d05      	cmp	r5, #5
 8005854:	e7de      	b.n	8005814 <_scanf_float+0x1cc>
 8005856:	2d02      	cmp	r5, #2
 8005858:	f47f af26 	bne.w	80056a8 <_scanf_float+0x60>
 800585c:	2503      	movs	r5, #3
 800585e:	e7b7      	b.n	80057d0 <_scanf_float+0x188>
 8005860:	2d06      	cmp	r5, #6
 8005862:	f47f af21 	bne.w	80056a8 <_scanf_float+0x60>
 8005866:	2507      	movs	r5, #7
 8005868:	e7b2      	b.n	80057d0 <_scanf_float+0x188>
 800586a:	6822      	ldr	r2, [r4, #0]
 800586c:	0591      	lsls	r1, r2, #22
 800586e:	f57f af1b 	bpl.w	80056a8 <_scanf_float+0x60>
 8005872:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005876:	6022      	str	r2, [r4, #0]
 8005878:	f8cd 9004 	str.w	r9, [sp, #4]
 800587c:	e7a8      	b.n	80057d0 <_scanf_float+0x188>
 800587e:	6822      	ldr	r2, [r4, #0]
 8005880:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005884:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005888:	d006      	beq.n	8005898 <_scanf_float+0x250>
 800588a:	0550      	lsls	r0, r2, #21
 800588c:	f57f af0c 	bpl.w	80056a8 <_scanf_float+0x60>
 8005890:	f1b9 0f00 	cmp.w	r9, #0
 8005894:	f43f af0f 	beq.w	80056b6 <_scanf_float+0x6e>
 8005898:	0591      	lsls	r1, r2, #22
 800589a:	bf58      	it	pl
 800589c:	9901      	ldrpl	r1, [sp, #4]
 800589e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80058a2:	bf58      	it	pl
 80058a4:	eba9 0101 	subpl.w	r1, r9, r1
 80058a8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80058ac:	bf58      	it	pl
 80058ae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80058b2:	6022      	str	r2, [r4, #0]
 80058b4:	f04f 0900 	mov.w	r9, #0
 80058b8:	e78a      	b.n	80057d0 <_scanf_float+0x188>
 80058ba:	f04f 0a03 	mov.w	sl, #3
 80058be:	e787      	b.n	80057d0 <_scanf_float+0x188>
 80058c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80058c4:	4639      	mov	r1, r7
 80058c6:	4640      	mov	r0, r8
 80058c8:	4798      	blx	r3
 80058ca:	2800      	cmp	r0, #0
 80058cc:	f43f aedf 	beq.w	800568e <_scanf_float+0x46>
 80058d0:	e6ea      	b.n	80056a8 <_scanf_float+0x60>
 80058d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80058da:	463a      	mov	r2, r7
 80058dc:	4640      	mov	r0, r8
 80058de:	4798      	blx	r3
 80058e0:	6923      	ldr	r3, [r4, #16]
 80058e2:	3b01      	subs	r3, #1
 80058e4:	6123      	str	r3, [r4, #16]
 80058e6:	e6ec      	b.n	80056c2 <_scanf_float+0x7a>
 80058e8:	1e6b      	subs	r3, r5, #1
 80058ea:	2b06      	cmp	r3, #6
 80058ec:	d825      	bhi.n	800593a <_scanf_float+0x2f2>
 80058ee:	2d02      	cmp	r5, #2
 80058f0:	d836      	bhi.n	8005960 <_scanf_float+0x318>
 80058f2:	455e      	cmp	r6, fp
 80058f4:	f67f aee8 	bls.w	80056c8 <_scanf_float+0x80>
 80058f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058fc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005900:	463a      	mov	r2, r7
 8005902:	4640      	mov	r0, r8
 8005904:	4798      	blx	r3
 8005906:	6923      	ldr	r3, [r4, #16]
 8005908:	3b01      	subs	r3, #1
 800590a:	6123      	str	r3, [r4, #16]
 800590c:	e7f1      	b.n	80058f2 <_scanf_float+0x2aa>
 800590e:	9802      	ldr	r0, [sp, #8]
 8005910:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005914:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005918:	9002      	str	r0, [sp, #8]
 800591a:	463a      	mov	r2, r7
 800591c:	4640      	mov	r0, r8
 800591e:	4798      	blx	r3
 8005920:	6923      	ldr	r3, [r4, #16]
 8005922:	3b01      	subs	r3, #1
 8005924:	6123      	str	r3, [r4, #16]
 8005926:	f10a 3aff 	add.w	sl, sl, #4294967295
 800592a:	fa5f fa8a 	uxtb.w	sl, sl
 800592e:	f1ba 0f02 	cmp.w	sl, #2
 8005932:	d1ec      	bne.n	800590e <_scanf_float+0x2c6>
 8005934:	3d03      	subs	r5, #3
 8005936:	b2ed      	uxtb	r5, r5
 8005938:	1b76      	subs	r6, r6, r5
 800593a:	6823      	ldr	r3, [r4, #0]
 800593c:	05da      	lsls	r2, r3, #23
 800593e:	d52f      	bpl.n	80059a0 <_scanf_float+0x358>
 8005940:	055b      	lsls	r3, r3, #21
 8005942:	d510      	bpl.n	8005966 <_scanf_float+0x31e>
 8005944:	455e      	cmp	r6, fp
 8005946:	f67f aebf 	bls.w	80056c8 <_scanf_float+0x80>
 800594a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800594e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005952:	463a      	mov	r2, r7
 8005954:	4640      	mov	r0, r8
 8005956:	4798      	blx	r3
 8005958:	6923      	ldr	r3, [r4, #16]
 800595a:	3b01      	subs	r3, #1
 800595c:	6123      	str	r3, [r4, #16]
 800595e:	e7f1      	b.n	8005944 <_scanf_float+0x2fc>
 8005960:	46aa      	mov	sl, r5
 8005962:	9602      	str	r6, [sp, #8]
 8005964:	e7df      	b.n	8005926 <_scanf_float+0x2de>
 8005966:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800596a:	6923      	ldr	r3, [r4, #16]
 800596c:	2965      	cmp	r1, #101	; 0x65
 800596e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005972:	f106 35ff 	add.w	r5, r6, #4294967295
 8005976:	6123      	str	r3, [r4, #16]
 8005978:	d00c      	beq.n	8005994 <_scanf_float+0x34c>
 800597a:	2945      	cmp	r1, #69	; 0x45
 800597c:	d00a      	beq.n	8005994 <_scanf_float+0x34c>
 800597e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005982:	463a      	mov	r2, r7
 8005984:	4640      	mov	r0, r8
 8005986:	4798      	blx	r3
 8005988:	6923      	ldr	r3, [r4, #16]
 800598a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800598e:	3b01      	subs	r3, #1
 8005990:	1eb5      	subs	r5, r6, #2
 8005992:	6123      	str	r3, [r4, #16]
 8005994:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005998:	463a      	mov	r2, r7
 800599a:	4640      	mov	r0, r8
 800599c:	4798      	blx	r3
 800599e:	462e      	mov	r6, r5
 80059a0:	6825      	ldr	r5, [r4, #0]
 80059a2:	f015 0510 	ands.w	r5, r5, #16
 80059a6:	d159      	bne.n	8005a5c <_scanf_float+0x414>
 80059a8:	7035      	strb	r5, [r6, #0]
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80059b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059b4:	d11b      	bne.n	80059ee <_scanf_float+0x3a6>
 80059b6:	9b01      	ldr	r3, [sp, #4]
 80059b8:	454b      	cmp	r3, r9
 80059ba:	eba3 0209 	sub.w	r2, r3, r9
 80059be:	d123      	bne.n	8005a08 <_scanf_float+0x3c0>
 80059c0:	2200      	movs	r2, #0
 80059c2:	4659      	mov	r1, fp
 80059c4:	4640      	mov	r0, r8
 80059c6:	f000 fe99 	bl	80066fc <_strtod_r>
 80059ca:	6822      	ldr	r2, [r4, #0]
 80059cc:	9b03      	ldr	r3, [sp, #12]
 80059ce:	f012 0f02 	tst.w	r2, #2
 80059d2:	ec57 6b10 	vmov	r6, r7, d0
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	d021      	beq.n	8005a1e <_scanf_float+0x3d6>
 80059da:	9903      	ldr	r1, [sp, #12]
 80059dc:	1d1a      	adds	r2, r3, #4
 80059de:	600a      	str	r2, [r1, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	e9c3 6700 	strd	r6, r7, [r3]
 80059e6:	68e3      	ldr	r3, [r4, #12]
 80059e8:	3301      	adds	r3, #1
 80059ea:	60e3      	str	r3, [r4, #12]
 80059ec:	e66d      	b.n	80056ca <_scanf_float+0x82>
 80059ee:	9b04      	ldr	r3, [sp, #16]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d0e5      	beq.n	80059c0 <_scanf_float+0x378>
 80059f4:	9905      	ldr	r1, [sp, #20]
 80059f6:	230a      	movs	r3, #10
 80059f8:	462a      	mov	r2, r5
 80059fa:	3101      	adds	r1, #1
 80059fc:	4640      	mov	r0, r8
 80059fe:	f000 ff05 	bl	800680c <_strtol_r>
 8005a02:	9b04      	ldr	r3, [sp, #16]
 8005a04:	9e05      	ldr	r6, [sp, #20]
 8005a06:	1ac2      	subs	r2, r0, r3
 8005a08:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005a0c:	429e      	cmp	r6, r3
 8005a0e:	bf28      	it	cs
 8005a10:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005a14:	4912      	ldr	r1, [pc, #72]	; (8005a60 <_scanf_float+0x418>)
 8005a16:	4630      	mov	r0, r6
 8005a18:	f000 f82c 	bl	8005a74 <siprintf>
 8005a1c:	e7d0      	b.n	80059c0 <_scanf_float+0x378>
 8005a1e:	9903      	ldr	r1, [sp, #12]
 8005a20:	f012 0f04 	tst.w	r2, #4
 8005a24:	f103 0204 	add.w	r2, r3, #4
 8005a28:	600a      	str	r2, [r1, #0]
 8005a2a:	d1d9      	bne.n	80059e0 <_scanf_float+0x398>
 8005a2c:	f8d3 8000 	ldr.w	r8, [r3]
 8005a30:	ee10 2a10 	vmov	r2, s0
 8005a34:	ee10 0a10 	vmov	r0, s0
 8005a38:	463b      	mov	r3, r7
 8005a3a:	4639      	mov	r1, r7
 8005a3c:	f7fb f87e 	bl	8000b3c <__aeabi_dcmpun>
 8005a40:	b128      	cbz	r0, 8005a4e <_scanf_float+0x406>
 8005a42:	4808      	ldr	r0, [pc, #32]	; (8005a64 <_scanf_float+0x41c>)
 8005a44:	f000 f810 	bl	8005a68 <nanf>
 8005a48:	ed88 0a00 	vstr	s0, [r8]
 8005a4c:	e7cb      	b.n	80059e6 <_scanf_float+0x39e>
 8005a4e:	4630      	mov	r0, r6
 8005a50:	4639      	mov	r1, r7
 8005a52:	f7fb f8d1 	bl	8000bf8 <__aeabi_d2f>
 8005a56:	f8c8 0000 	str.w	r0, [r8]
 8005a5a:	e7c4      	b.n	80059e6 <_scanf_float+0x39e>
 8005a5c:	2500      	movs	r5, #0
 8005a5e:	e634      	b.n	80056ca <_scanf_float+0x82>
 8005a60:	0800a42c 	.word	0x0800a42c
 8005a64:	0800a838 	.word	0x0800a838

08005a68 <nanf>:
 8005a68:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005a70 <nanf+0x8>
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	7fc00000 	.word	0x7fc00000

08005a74 <siprintf>:
 8005a74:	b40e      	push	{r1, r2, r3}
 8005a76:	b500      	push	{lr}
 8005a78:	b09c      	sub	sp, #112	; 0x70
 8005a7a:	ab1d      	add	r3, sp, #116	; 0x74
 8005a7c:	9002      	str	r0, [sp, #8]
 8005a7e:	9006      	str	r0, [sp, #24]
 8005a80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a84:	4809      	ldr	r0, [pc, #36]	; (8005aac <siprintf+0x38>)
 8005a86:	9107      	str	r1, [sp, #28]
 8005a88:	9104      	str	r1, [sp, #16]
 8005a8a:	4909      	ldr	r1, [pc, #36]	; (8005ab0 <siprintf+0x3c>)
 8005a8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a90:	9105      	str	r1, [sp, #20]
 8005a92:	6800      	ldr	r0, [r0, #0]
 8005a94:	9301      	str	r3, [sp, #4]
 8005a96:	a902      	add	r1, sp, #8
 8005a98:	f002 fee4 	bl	8008864 <_svfiprintf_r>
 8005a9c:	9b02      	ldr	r3, [sp, #8]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	701a      	strb	r2, [r3, #0]
 8005aa2:	b01c      	add	sp, #112	; 0x70
 8005aa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005aa8:	b003      	add	sp, #12
 8005aaa:	4770      	bx	lr
 8005aac:	20000080 	.word	0x20000080
 8005ab0:	ffff0208 	.word	0xffff0208

08005ab4 <sulp>:
 8005ab4:	b570      	push	{r4, r5, r6, lr}
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	460d      	mov	r5, r1
 8005aba:	ec45 4b10 	vmov	d0, r4, r5
 8005abe:	4616      	mov	r6, r2
 8005ac0:	f002 fc2e 	bl	8008320 <__ulp>
 8005ac4:	ec51 0b10 	vmov	r0, r1, d0
 8005ac8:	b17e      	cbz	r6, 8005aea <sulp+0x36>
 8005aca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005ace:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	dd09      	ble.n	8005aea <sulp+0x36>
 8005ad6:	051b      	lsls	r3, r3, #20
 8005ad8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005adc:	2400      	movs	r4, #0
 8005ade:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005ae2:	4622      	mov	r2, r4
 8005ae4:	462b      	mov	r3, r5
 8005ae6:	f7fa fd8f 	bl	8000608 <__aeabi_dmul>
 8005aea:	bd70      	pop	{r4, r5, r6, pc}
 8005aec:	0000      	movs	r0, r0
	...

08005af0 <_strtod_l>:
 8005af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af4:	ed2d 8b02 	vpush	{d8}
 8005af8:	b09d      	sub	sp, #116	; 0x74
 8005afa:	461f      	mov	r7, r3
 8005afc:	2300      	movs	r3, #0
 8005afe:	9318      	str	r3, [sp, #96]	; 0x60
 8005b00:	4ba2      	ldr	r3, [pc, #648]	; (8005d8c <_strtod_l+0x29c>)
 8005b02:	9213      	str	r2, [sp, #76]	; 0x4c
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	9305      	str	r3, [sp, #20]
 8005b08:	4604      	mov	r4, r0
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	4688      	mov	r8, r1
 8005b0e:	f7fa fb67 	bl	80001e0 <strlen>
 8005b12:	f04f 0a00 	mov.w	sl, #0
 8005b16:	4605      	mov	r5, r0
 8005b18:	f04f 0b00 	mov.w	fp, #0
 8005b1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005b20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b22:	781a      	ldrb	r2, [r3, #0]
 8005b24:	2a2b      	cmp	r2, #43	; 0x2b
 8005b26:	d04e      	beq.n	8005bc6 <_strtod_l+0xd6>
 8005b28:	d83b      	bhi.n	8005ba2 <_strtod_l+0xb2>
 8005b2a:	2a0d      	cmp	r2, #13
 8005b2c:	d834      	bhi.n	8005b98 <_strtod_l+0xa8>
 8005b2e:	2a08      	cmp	r2, #8
 8005b30:	d834      	bhi.n	8005b9c <_strtod_l+0xac>
 8005b32:	2a00      	cmp	r2, #0
 8005b34:	d03e      	beq.n	8005bb4 <_strtod_l+0xc4>
 8005b36:	2300      	movs	r3, #0
 8005b38:	930a      	str	r3, [sp, #40]	; 0x28
 8005b3a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005b3c:	7833      	ldrb	r3, [r6, #0]
 8005b3e:	2b30      	cmp	r3, #48	; 0x30
 8005b40:	f040 80b0 	bne.w	8005ca4 <_strtod_l+0x1b4>
 8005b44:	7873      	ldrb	r3, [r6, #1]
 8005b46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005b4a:	2b58      	cmp	r3, #88	; 0x58
 8005b4c:	d168      	bne.n	8005c20 <_strtod_l+0x130>
 8005b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b50:	9301      	str	r3, [sp, #4]
 8005b52:	ab18      	add	r3, sp, #96	; 0x60
 8005b54:	9702      	str	r7, [sp, #8]
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	4a8d      	ldr	r2, [pc, #564]	; (8005d90 <_strtod_l+0x2a0>)
 8005b5a:	ab19      	add	r3, sp, #100	; 0x64
 8005b5c:	a917      	add	r1, sp, #92	; 0x5c
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f001 fd38 	bl	80075d4 <__gethex>
 8005b64:	f010 0707 	ands.w	r7, r0, #7
 8005b68:	4605      	mov	r5, r0
 8005b6a:	d005      	beq.n	8005b78 <_strtod_l+0x88>
 8005b6c:	2f06      	cmp	r7, #6
 8005b6e:	d12c      	bne.n	8005bca <_strtod_l+0xda>
 8005b70:	3601      	adds	r6, #1
 8005b72:	2300      	movs	r3, #0
 8005b74:	9617      	str	r6, [sp, #92]	; 0x5c
 8005b76:	930a      	str	r3, [sp, #40]	; 0x28
 8005b78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f040 8590 	bne.w	80066a0 <_strtod_l+0xbb0>
 8005b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b82:	b1eb      	cbz	r3, 8005bc0 <_strtod_l+0xd0>
 8005b84:	4652      	mov	r2, sl
 8005b86:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005b8a:	ec43 2b10 	vmov	d0, r2, r3
 8005b8e:	b01d      	add	sp, #116	; 0x74
 8005b90:	ecbd 8b02 	vpop	{d8}
 8005b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b98:	2a20      	cmp	r2, #32
 8005b9a:	d1cc      	bne.n	8005b36 <_strtod_l+0x46>
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005ba0:	e7be      	b.n	8005b20 <_strtod_l+0x30>
 8005ba2:	2a2d      	cmp	r2, #45	; 0x2d
 8005ba4:	d1c7      	bne.n	8005b36 <_strtod_l+0x46>
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	920a      	str	r2, [sp, #40]	; 0x28
 8005baa:	1c5a      	adds	r2, r3, #1
 8005bac:	9217      	str	r2, [sp, #92]	; 0x5c
 8005bae:	785b      	ldrb	r3, [r3, #1]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1c2      	bne.n	8005b3a <_strtod_l+0x4a>
 8005bb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005bb6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f040 856e 	bne.w	800669c <_strtod_l+0xbac>
 8005bc0:	4652      	mov	r2, sl
 8005bc2:	465b      	mov	r3, fp
 8005bc4:	e7e1      	b.n	8005b8a <_strtod_l+0x9a>
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	e7ee      	b.n	8005ba8 <_strtod_l+0xb8>
 8005bca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005bcc:	b13a      	cbz	r2, 8005bde <_strtod_l+0xee>
 8005bce:	2135      	movs	r1, #53	; 0x35
 8005bd0:	a81a      	add	r0, sp, #104	; 0x68
 8005bd2:	f002 fcb0 	bl	8008536 <__copybits>
 8005bd6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005bd8:	4620      	mov	r0, r4
 8005bda:	f002 f86f 	bl	8007cbc <_Bfree>
 8005bde:	3f01      	subs	r7, #1
 8005be0:	2f04      	cmp	r7, #4
 8005be2:	d806      	bhi.n	8005bf2 <_strtod_l+0x102>
 8005be4:	e8df f007 	tbb	[pc, r7]
 8005be8:	1714030a 	.word	0x1714030a
 8005bec:	0a          	.byte	0x0a
 8005bed:	00          	.byte	0x00
 8005bee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005bf2:	0728      	lsls	r0, r5, #28
 8005bf4:	d5c0      	bpl.n	8005b78 <_strtod_l+0x88>
 8005bf6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005bfa:	e7bd      	b.n	8005b78 <_strtod_l+0x88>
 8005bfc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005c00:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005c02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005c06:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005c0a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005c0e:	e7f0      	b.n	8005bf2 <_strtod_l+0x102>
 8005c10:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005d94 <_strtod_l+0x2a4>
 8005c14:	e7ed      	b.n	8005bf2 <_strtod_l+0x102>
 8005c16:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005c1a:	f04f 3aff 	mov.w	sl, #4294967295
 8005c1e:	e7e8      	b.n	8005bf2 <_strtod_l+0x102>
 8005c20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c22:	1c5a      	adds	r2, r3, #1
 8005c24:	9217      	str	r2, [sp, #92]	; 0x5c
 8005c26:	785b      	ldrb	r3, [r3, #1]
 8005c28:	2b30      	cmp	r3, #48	; 0x30
 8005c2a:	d0f9      	beq.n	8005c20 <_strtod_l+0x130>
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d0a3      	beq.n	8005b78 <_strtod_l+0x88>
 8005c30:	2301      	movs	r3, #1
 8005c32:	f04f 0900 	mov.w	r9, #0
 8005c36:	9304      	str	r3, [sp, #16]
 8005c38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c3a:	9308      	str	r3, [sp, #32]
 8005c3c:	f8cd 901c 	str.w	r9, [sp, #28]
 8005c40:	464f      	mov	r7, r9
 8005c42:	220a      	movs	r2, #10
 8005c44:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005c46:	7806      	ldrb	r6, [r0, #0]
 8005c48:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005c4c:	b2d9      	uxtb	r1, r3
 8005c4e:	2909      	cmp	r1, #9
 8005c50:	d92a      	bls.n	8005ca8 <_strtod_l+0x1b8>
 8005c52:	9905      	ldr	r1, [sp, #20]
 8005c54:	462a      	mov	r2, r5
 8005c56:	f002 ff1f 	bl	8008a98 <strncmp>
 8005c5a:	b398      	cbz	r0, 8005cc4 <_strtod_l+0x1d4>
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	4632      	mov	r2, r6
 8005c60:	463d      	mov	r5, r7
 8005c62:	9005      	str	r0, [sp, #20]
 8005c64:	4603      	mov	r3, r0
 8005c66:	2a65      	cmp	r2, #101	; 0x65
 8005c68:	d001      	beq.n	8005c6e <_strtod_l+0x17e>
 8005c6a:	2a45      	cmp	r2, #69	; 0x45
 8005c6c:	d118      	bne.n	8005ca0 <_strtod_l+0x1b0>
 8005c6e:	b91d      	cbnz	r5, 8005c78 <_strtod_l+0x188>
 8005c70:	9a04      	ldr	r2, [sp, #16]
 8005c72:	4302      	orrs	r2, r0
 8005c74:	d09e      	beq.n	8005bb4 <_strtod_l+0xc4>
 8005c76:	2500      	movs	r5, #0
 8005c78:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005c7c:	f108 0201 	add.w	r2, r8, #1
 8005c80:	9217      	str	r2, [sp, #92]	; 0x5c
 8005c82:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005c86:	2a2b      	cmp	r2, #43	; 0x2b
 8005c88:	d075      	beq.n	8005d76 <_strtod_l+0x286>
 8005c8a:	2a2d      	cmp	r2, #45	; 0x2d
 8005c8c:	d07b      	beq.n	8005d86 <_strtod_l+0x296>
 8005c8e:	f04f 0c00 	mov.w	ip, #0
 8005c92:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005c96:	2909      	cmp	r1, #9
 8005c98:	f240 8082 	bls.w	8005da0 <_strtod_l+0x2b0>
 8005c9c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005ca0:	2600      	movs	r6, #0
 8005ca2:	e09d      	b.n	8005de0 <_strtod_l+0x2f0>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	e7c4      	b.n	8005c32 <_strtod_l+0x142>
 8005ca8:	2f08      	cmp	r7, #8
 8005caa:	bfd8      	it	le
 8005cac:	9907      	ldrle	r1, [sp, #28]
 8005cae:	f100 0001 	add.w	r0, r0, #1
 8005cb2:	bfda      	itte	le
 8005cb4:	fb02 3301 	mlale	r3, r2, r1, r3
 8005cb8:	9307      	strle	r3, [sp, #28]
 8005cba:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005cbe:	3701      	adds	r7, #1
 8005cc0:	9017      	str	r0, [sp, #92]	; 0x5c
 8005cc2:	e7bf      	b.n	8005c44 <_strtod_l+0x154>
 8005cc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005cc6:	195a      	adds	r2, r3, r5
 8005cc8:	9217      	str	r2, [sp, #92]	; 0x5c
 8005cca:	5d5a      	ldrb	r2, [r3, r5]
 8005ccc:	2f00      	cmp	r7, #0
 8005cce:	d037      	beq.n	8005d40 <_strtod_l+0x250>
 8005cd0:	9005      	str	r0, [sp, #20]
 8005cd2:	463d      	mov	r5, r7
 8005cd4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005cd8:	2b09      	cmp	r3, #9
 8005cda:	d912      	bls.n	8005d02 <_strtod_l+0x212>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e7c2      	b.n	8005c66 <_strtod_l+0x176>
 8005ce0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	9217      	str	r2, [sp, #92]	; 0x5c
 8005ce6:	785a      	ldrb	r2, [r3, #1]
 8005ce8:	3001      	adds	r0, #1
 8005cea:	2a30      	cmp	r2, #48	; 0x30
 8005cec:	d0f8      	beq.n	8005ce0 <_strtod_l+0x1f0>
 8005cee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005cf2:	2b08      	cmp	r3, #8
 8005cf4:	f200 84d9 	bhi.w	80066aa <_strtod_l+0xbba>
 8005cf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005cfa:	9005      	str	r0, [sp, #20]
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	9308      	str	r3, [sp, #32]
 8005d00:	4605      	mov	r5, r0
 8005d02:	3a30      	subs	r2, #48	; 0x30
 8005d04:	f100 0301 	add.w	r3, r0, #1
 8005d08:	d014      	beq.n	8005d34 <_strtod_l+0x244>
 8005d0a:	9905      	ldr	r1, [sp, #20]
 8005d0c:	4419      	add	r1, r3
 8005d0e:	9105      	str	r1, [sp, #20]
 8005d10:	462b      	mov	r3, r5
 8005d12:	eb00 0e05 	add.w	lr, r0, r5
 8005d16:	210a      	movs	r1, #10
 8005d18:	4573      	cmp	r3, lr
 8005d1a:	d113      	bne.n	8005d44 <_strtod_l+0x254>
 8005d1c:	182b      	adds	r3, r5, r0
 8005d1e:	2b08      	cmp	r3, #8
 8005d20:	f105 0501 	add.w	r5, r5, #1
 8005d24:	4405      	add	r5, r0
 8005d26:	dc1c      	bgt.n	8005d62 <_strtod_l+0x272>
 8005d28:	9907      	ldr	r1, [sp, #28]
 8005d2a:	230a      	movs	r3, #10
 8005d2c:	fb03 2301 	mla	r3, r3, r1, r2
 8005d30:	9307      	str	r3, [sp, #28]
 8005d32:	2300      	movs	r3, #0
 8005d34:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005d36:	1c51      	adds	r1, r2, #1
 8005d38:	9117      	str	r1, [sp, #92]	; 0x5c
 8005d3a:	7852      	ldrb	r2, [r2, #1]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	e7c9      	b.n	8005cd4 <_strtod_l+0x1e4>
 8005d40:	4638      	mov	r0, r7
 8005d42:	e7d2      	b.n	8005cea <_strtod_l+0x1fa>
 8005d44:	2b08      	cmp	r3, #8
 8005d46:	dc04      	bgt.n	8005d52 <_strtod_l+0x262>
 8005d48:	9e07      	ldr	r6, [sp, #28]
 8005d4a:	434e      	muls	r6, r1
 8005d4c:	9607      	str	r6, [sp, #28]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	e7e2      	b.n	8005d18 <_strtod_l+0x228>
 8005d52:	f103 0c01 	add.w	ip, r3, #1
 8005d56:	f1bc 0f10 	cmp.w	ip, #16
 8005d5a:	bfd8      	it	le
 8005d5c:	fb01 f909 	mulle.w	r9, r1, r9
 8005d60:	e7f5      	b.n	8005d4e <_strtod_l+0x25e>
 8005d62:	2d10      	cmp	r5, #16
 8005d64:	bfdc      	itt	le
 8005d66:	230a      	movle	r3, #10
 8005d68:	fb03 2909 	mlale	r9, r3, r9, r2
 8005d6c:	e7e1      	b.n	8005d32 <_strtod_l+0x242>
 8005d6e:	2300      	movs	r3, #0
 8005d70:	9305      	str	r3, [sp, #20]
 8005d72:	2301      	movs	r3, #1
 8005d74:	e77c      	b.n	8005c70 <_strtod_l+0x180>
 8005d76:	f04f 0c00 	mov.w	ip, #0
 8005d7a:	f108 0202 	add.w	r2, r8, #2
 8005d7e:	9217      	str	r2, [sp, #92]	; 0x5c
 8005d80:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005d84:	e785      	b.n	8005c92 <_strtod_l+0x1a2>
 8005d86:	f04f 0c01 	mov.w	ip, #1
 8005d8a:	e7f6      	b.n	8005d7a <_strtod_l+0x28a>
 8005d8c:	0800a680 	.word	0x0800a680
 8005d90:	0800a434 	.word	0x0800a434
 8005d94:	7ff00000 	.word	0x7ff00000
 8005d98:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005d9a:	1c51      	adds	r1, r2, #1
 8005d9c:	9117      	str	r1, [sp, #92]	; 0x5c
 8005d9e:	7852      	ldrb	r2, [r2, #1]
 8005da0:	2a30      	cmp	r2, #48	; 0x30
 8005da2:	d0f9      	beq.n	8005d98 <_strtod_l+0x2a8>
 8005da4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005da8:	2908      	cmp	r1, #8
 8005daa:	f63f af79 	bhi.w	8005ca0 <_strtod_l+0x1b0>
 8005dae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005db2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005db4:	9206      	str	r2, [sp, #24]
 8005db6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005db8:	1c51      	adds	r1, r2, #1
 8005dba:	9117      	str	r1, [sp, #92]	; 0x5c
 8005dbc:	7852      	ldrb	r2, [r2, #1]
 8005dbe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005dc2:	2e09      	cmp	r6, #9
 8005dc4:	d937      	bls.n	8005e36 <_strtod_l+0x346>
 8005dc6:	9e06      	ldr	r6, [sp, #24]
 8005dc8:	1b89      	subs	r1, r1, r6
 8005dca:	2908      	cmp	r1, #8
 8005dcc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005dd0:	dc02      	bgt.n	8005dd8 <_strtod_l+0x2e8>
 8005dd2:	4576      	cmp	r6, lr
 8005dd4:	bfa8      	it	ge
 8005dd6:	4676      	movge	r6, lr
 8005dd8:	f1bc 0f00 	cmp.w	ip, #0
 8005ddc:	d000      	beq.n	8005de0 <_strtod_l+0x2f0>
 8005dde:	4276      	negs	r6, r6
 8005de0:	2d00      	cmp	r5, #0
 8005de2:	d14d      	bne.n	8005e80 <_strtod_l+0x390>
 8005de4:	9904      	ldr	r1, [sp, #16]
 8005de6:	4301      	orrs	r1, r0
 8005de8:	f47f aec6 	bne.w	8005b78 <_strtod_l+0x88>
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f47f aee1 	bne.w	8005bb4 <_strtod_l+0xc4>
 8005df2:	2a69      	cmp	r2, #105	; 0x69
 8005df4:	d027      	beq.n	8005e46 <_strtod_l+0x356>
 8005df6:	dc24      	bgt.n	8005e42 <_strtod_l+0x352>
 8005df8:	2a49      	cmp	r2, #73	; 0x49
 8005dfa:	d024      	beq.n	8005e46 <_strtod_l+0x356>
 8005dfc:	2a4e      	cmp	r2, #78	; 0x4e
 8005dfe:	f47f aed9 	bne.w	8005bb4 <_strtod_l+0xc4>
 8005e02:	499f      	ldr	r1, [pc, #636]	; (8006080 <_strtod_l+0x590>)
 8005e04:	a817      	add	r0, sp, #92	; 0x5c
 8005e06:	f001 fe3d 	bl	8007a84 <__match>
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	f43f aed2 	beq.w	8005bb4 <_strtod_l+0xc4>
 8005e10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	2b28      	cmp	r3, #40	; 0x28
 8005e16:	d12d      	bne.n	8005e74 <_strtod_l+0x384>
 8005e18:	499a      	ldr	r1, [pc, #616]	; (8006084 <_strtod_l+0x594>)
 8005e1a:	aa1a      	add	r2, sp, #104	; 0x68
 8005e1c:	a817      	add	r0, sp, #92	; 0x5c
 8005e1e:	f001 fe45 	bl	8007aac <__hexnan>
 8005e22:	2805      	cmp	r0, #5
 8005e24:	d126      	bne.n	8005e74 <_strtod_l+0x384>
 8005e26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e28:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005e2c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005e30:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005e34:	e6a0      	b.n	8005b78 <_strtod_l+0x88>
 8005e36:	210a      	movs	r1, #10
 8005e38:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005e3c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005e40:	e7b9      	b.n	8005db6 <_strtod_l+0x2c6>
 8005e42:	2a6e      	cmp	r2, #110	; 0x6e
 8005e44:	e7db      	b.n	8005dfe <_strtod_l+0x30e>
 8005e46:	4990      	ldr	r1, [pc, #576]	; (8006088 <_strtod_l+0x598>)
 8005e48:	a817      	add	r0, sp, #92	; 0x5c
 8005e4a:	f001 fe1b 	bl	8007a84 <__match>
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	f43f aeb0 	beq.w	8005bb4 <_strtod_l+0xc4>
 8005e54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e56:	498d      	ldr	r1, [pc, #564]	; (800608c <_strtod_l+0x59c>)
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	a817      	add	r0, sp, #92	; 0x5c
 8005e5c:	9317      	str	r3, [sp, #92]	; 0x5c
 8005e5e:	f001 fe11 	bl	8007a84 <__match>
 8005e62:	b910      	cbnz	r0, 8005e6a <_strtod_l+0x37a>
 8005e64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e66:	3301      	adds	r3, #1
 8005e68:	9317      	str	r3, [sp, #92]	; 0x5c
 8005e6a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800609c <_strtod_l+0x5ac>
 8005e6e:	f04f 0a00 	mov.w	sl, #0
 8005e72:	e681      	b.n	8005b78 <_strtod_l+0x88>
 8005e74:	4886      	ldr	r0, [pc, #536]	; (8006090 <_strtod_l+0x5a0>)
 8005e76:	f002 fdf7 	bl	8008a68 <nan>
 8005e7a:	ec5b ab10 	vmov	sl, fp, d0
 8005e7e:	e67b      	b.n	8005b78 <_strtod_l+0x88>
 8005e80:	9b05      	ldr	r3, [sp, #20]
 8005e82:	9807      	ldr	r0, [sp, #28]
 8005e84:	1af3      	subs	r3, r6, r3
 8005e86:	2f00      	cmp	r7, #0
 8005e88:	bf08      	it	eq
 8005e8a:	462f      	moveq	r7, r5
 8005e8c:	2d10      	cmp	r5, #16
 8005e8e:	9306      	str	r3, [sp, #24]
 8005e90:	46a8      	mov	r8, r5
 8005e92:	bfa8      	it	ge
 8005e94:	f04f 0810 	movge.w	r8, #16
 8005e98:	f7fa fb3c 	bl	8000514 <__aeabi_ui2d>
 8005e9c:	2d09      	cmp	r5, #9
 8005e9e:	4682      	mov	sl, r0
 8005ea0:	468b      	mov	fp, r1
 8005ea2:	dd13      	ble.n	8005ecc <_strtod_l+0x3dc>
 8005ea4:	4b7b      	ldr	r3, [pc, #492]	; (8006094 <_strtod_l+0x5a4>)
 8005ea6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005eaa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005eae:	f7fa fbab 	bl	8000608 <__aeabi_dmul>
 8005eb2:	4682      	mov	sl, r0
 8005eb4:	4648      	mov	r0, r9
 8005eb6:	468b      	mov	fp, r1
 8005eb8:	f7fa fb2c 	bl	8000514 <__aeabi_ui2d>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	4650      	mov	r0, sl
 8005ec2:	4659      	mov	r1, fp
 8005ec4:	f7fa f9ea 	bl	800029c <__adddf3>
 8005ec8:	4682      	mov	sl, r0
 8005eca:	468b      	mov	fp, r1
 8005ecc:	2d0f      	cmp	r5, #15
 8005ece:	dc38      	bgt.n	8005f42 <_strtod_l+0x452>
 8005ed0:	9b06      	ldr	r3, [sp, #24]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f43f ae50 	beq.w	8005b78 <_strtod_l+0x88>
 8005ed8:	dd24      	ble.n	8005f24 <_strtod_l+0x434>
 8005eda:	2b16      	cmp	r3, #22
 8005edc:	dc0b      	bgt.n	8005ef6 <_strtod_l+0x406>
 8005ede:	496d      	ldr	r1, [pc, #436]	; (8006094 <_strtod_l+0x5a4>)
 8005ee0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005ee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ee8:	4652      	mov	r2, sl
 8005eea:	465b      	mov	r3, fp
 8005eec:	f7fa fb8c 	bl	8000608 <__aeabi_dmul>
 8005ef0:	4682      	mov	sl, r0
 8005ef2:	468b      	mov	fp, r1
 8005ef4:	e640      	b.n	8005b78 <_strtod_l+0x88>
 8005ef6:	9a06      	ldr	r2, [sp, #24]
 8005ef8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005efc:	4293      	cmp	r3, r2
 8005efe:	db20      	blt.n	8005f42 <_strtod_l+0x452>
 8005f00:	4c64      	ldr	r4, [pc, #400]	; (8006094 <_strtod_l+0x5a4>)
 8005f02:	f1c5 050f 	rsb	r5, r5, #15
 8005f06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005f0a:	4652      	mov	r2, sl
 8005f0c:	465b      	mov	r3, fp
 8005f0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f12:	f7fa fb79 	bl	8000608 <__aeabi_dmul>
 8005f16:	9b06      	ldr	r3, [sp, #24]
 8005f18:	1b5d      	subs	r5, r3, r5
 8005f1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005f1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005f22:	e7e3      	b.n	8005eec <_strtod_l+0x3fc>
 8005f24:	9b06      	ldr	r3, [sp, #24]
 8005f26:	3316      	adds	r3, #22
 8005f28:	db0b      	blt.n	8005f42 <_strtod_l+0x452>
 8005f2a:	9b05      	ldr	r3, [sp, #20]
 8005f2c:	1b9e      	subs	r6, r3, r6
 8005f2e:	4b59      	ldr	r3, [pc, #356]	; (8006094 <_strtod_l+0x5a4>)
 8005f30:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005f34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005f38:	4650      	mov	r0, sl
 8005f3a:	4659      	mov	r1, fp
 8005f3c:	f7fa fc8e 	bl	800085c <__aeabi_ddiv>
 8005f40:	e7d6      	b.n	8005ef0 <_strtod_l+0x400>
 8005f42:	9b06      	ldr	r3, [sp, #24]
 8005f44:	eba5 0808 	sub.w	r8, r5, r8
 8005f48:	4498      	add	r8, r3
 8005f4a:	f1b8 0f00 	cmp.w	r8, #0
 8005f4e:	dd74      	ble.n	800603a <_strtod_l+0x54a>
 8005f50:	f018 030f 	ands.w	r3, r8, #15
 8005f54:	d00a      	beq.n	8005f6c <_strtod_l+0x47c>
 8005f56:	494f      	ldr	r1, [pc, #316]	; (8006094 <_strtod_l+0x5a4>)
 8005f58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005f5c:	4652      	mov	r2, sl
 8005f5e:	465b      	mov	r3, fp
 8005f60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f64:	f7fa fb50 	bl	8000608 <__aeabi_dmul>
 8005f68:	4682      	mov	sl, r0
 8005f6a:	468b      	mov	fp, r1
 8005f6c:	f038 080f 	bics.w	r8, r8, #15
 8005f70:	d04f      	beq.n	8006012 <_strtod_l+0x522>
 8005f72:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005f76:	dd22      	ble.n	8005fbe <_strtod_l+0x4ce>
 8005f78:	2500      	movs	r5, #0
 8005f7a:	462e      	mov	r6, r5
 8005f7c:	9507      	str	r5, [sp, #28]
 8005f7e:	9505      	str	r5, [sp, #20]
 8005f80:	2322      	movs	r3, #34	; 0x22
 8005f82:	f8df b118 	ldr.w	fp, [pc, #280]	; 800609c <_strtod_l+0x5ac>
 8005f86:	6023      	str	r3, [r4, #0]
 8005f88:	f04f 0a00 	mov.w	sl, #0
 8005f8c:	9b07      	ldr	r3, [sp, #28]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f43f adf2 	beq.w	8005b78 <_strtod_l+0x88>
 8005f94:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005f96:	4620      	mov	r0, r4
 8005f98:	f001 fe90 	bl	8007cbc <_Bfree>
 8005f9c:	9905      	ldr	r1, [sp, #20]
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	f001 fe8c 	bl	8007cbc <_Bfree>
 8005fa4:	4631      	mov	r1, r6
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	f001 fe88 	bl	8007cbc <_Bfree>
 8005fac:	9907      	ldr	r1, [sp, #28]
 8005fae:	4620      	mov	r0, r4
 8005fb0:	f001 fe84 	bl	8007cbc <_Bfree>
 8005fb4:	4629      	mov	r1, r5
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f001 fe80 	bl	8007cbc <_Bfree>
 8005fbc:	e5dc      	b.n	8005b78 <_strtod_l+0x88>
 8005fbe:	4b36      	ldr	r3, [pc, #216]	; (8006098 <_strtod_l+0x5a8>)
 8005fc0:	9304      	str	r3, [sp, #16]
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005fc8:	4650      	mov	r0, sl
 8005fca:	4659      	mov	r1, fp
 8005fcc:	4699      	mov	r9, r3
 8005fce:	f1b8 0f01 	cmp.w	r8, #1
 8005fd2:	dc21      	bgt.n	8006018 <_strtod_l+0x528>
 8005fd4:	b10b      	cbz	r3, 8005fda <_strtod_l+0x4ea>
 8005fd6:	4682      	mov	sl, r0
 8005fd8:	468b      	mov	fp, r1
 8005fda:	4b2f      	ldr	r3, [pc, #188]	; (8006098 <_strtod_l+0x5a8>)
 8005fdc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005fe0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005fe4:	4652      	mov	r2, sl
 8005fe6:	465b      	mov	r3, fp
 8005fe8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005fec:	f7fa fb0c 	bl	8000608 <__aeabi_dmul>
 8005ff0:	4b2a      	ldr	r3, [pc, #168]	; (800609c <_strtod_l+0x5ac>)
 8005ff2:	460a      	mov	r2, r1
 8005ff4:	400b      	ands	r3, r1
 8005ff6:	492a      	ldr	r1, [pc, #168]	; (80060a0 <_strtod_l+0x5b0>)
 8005ff8:	428b      	cmp	r3, r1
 8005ffa:	4682      	mov	sl, r0
 8005ffc:	d8bc      	bhi.n	8005f78 <_strtod_l+0x488>
 8005ffe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006002:	428b      	cmp	r3, r1
 8006004:	bf86      	itte	hi
 8006006:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80060a4 <_strtod_l+0x5b4>
 800600a:	f04f 3aff 	movhi.w	sl, #4294967295
 800600e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006012:	2300      	movs	r3, #0
 8006014:	9304      	str	r3, [sp, #16]
 8006016:	e084      	b.n	8006122 <_strtod_l+0x632>
 8006018:	f018 0f01 	tst.w	r8, #1
 800601c:	d005      	beq.n	800602a <_strtod_l+0x53a>
 800601e:	9b04      	ldr	r3, [sp, #16]
 8006020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006024:	f7fa faf0 	bl	8000608 <__aeabi_dmul>
 8006028:	2301      	movs	r3, #1
 800602a:	9a04      	ldr	r2, [sp, #16]
 800602c:	3208      	adds	r2, #8
 800602e:	f109 0901 	add.w	r9, r9, #1
 8006032:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006036:	9204      	str	r2, [sp, #16]
 8006038:	e7c9      	b.n	8005fce <_strtod_l+0x4de>
 800603a:	d0ea      	beq.n	8006012 <_strtod_l+0x522>
 800603c:	f1c8 0800 	rsb	r8, r8, #0
 8006040:	f018 020f 	ands.w	r2, r8, #15
 8006044:	d00a      	beq.n	800605c <_strtod_l+0x56c>
 8006046:	4b13      	ldr	r3, [pc, #76]	; (8006094 <_strtod_l+0x5a4>)
 8006048:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800604c:	4650      	mov	r0, sl
 800604e:	4659      	mov	r1, fp
 8006050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006054:	f7fa fc02 	bl	800085c <__aeabi_ddiv>
 8006058:	4682      	mov	sl, r0
 800605a:	468b      	mov	fp, r1
 800605c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006060:	d0d7      	beq.n	8006012 <_strtod_l+0x522>
 8006062:	f1b8 0f1f 	cmp.w	r8, #31
 8006066:	dd1f      	ble.n	80060a8 <_strtod_l+0x5b8>
 8006068:	2500      	movs	r5, #0
 800606a:	462e      	mov	r6, r5
 800606c:	9507      	str	r5, [sp, #28]
 800606e:	9505      	str	r5, [sp, #20]
 8006070:	2322      	movs	r3, #34	; 0x22
 8006072:	f04f 0a00 	mov.w	sl, #0
 8006076:	f04f 0b00 	mov.w	fp, #0
 800607a:	6023      	str	r3, [r4, #0]
 800607c:	e786      	b.n	8005f8c <_strtod_l+0x49c>
 800607e:	bf00      	nop
 8006080:	0800a405 	.word	0x0800a405
 8006084:	0800a448 	.word	0x0800a448
 8006088:	0800a3fd 	.word	0x0800a3fd
 800608c:	0800a58c 	.word	0x0800a58c
 8006090:	0800a838 	.word	0x0800a838
 8006094:	0800a718 	.word	0x0800a718
 8006098:	0800a6f0 	.word	0x0800a6f0
 800609c:	7ff00000 	.word	0x7ff00000
 80060a0:	7ca00000 	.word	0x7ca00000
 80060a4:	7fefffff 	.word	0x7fefffff
 80060a8:	f018 0310 	ands.w	r3, r8, #16
 80060ac:	bf18      	it	ne
 80060ae:	236a      	movne	r3, #106	; 0x6a
 80060b0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006460 <_strtod_l+0x970>
 80060b4:	9304      	str	r3, [sp, #16]
 80060b6:	4650      	mov	r0, sl
 80060b8:	4659      	mov	r1, fp
 80060ba:	2300      	movs	r3, #0
 80060bc:	f018 0f01 	tst.w	r8, #1
 80060c0:	d004      	beq.n	80060cc <_strtod_l+0x5dc>
 80060c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80060c6:	f7fa fa9f 	bl	8000608 <__aeabi_dmul>
 80060ca:	2301      	movs	r3, #1
 80060cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80060d0:	f109 0908 	add.w	r9, r9, #8
 80060d4:	d1f2      	bne.n	80060bc <_strtod_l+0x5cc>
 80060d6:	b10b      	cbz	r3, 80060dc <_strtod_l+0x5ec>
 80060d8:	4682      	mov	sl, r0
 80060da:	468b      	mov	fp, r1
 80060dc:	9b04      	ldr	r3, [sp, #16]
 80060de:	b1c3      	cbz	r3, 8006112 <_strtod_l+0x622>
 80060e0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80060e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	4659      	mov	r1, fp
 80060ec:	dd11      	ble.n	8006112 <_strtod_l+0x622>
 80060ee:	2b1f      	cmp	r3, #31
 80060f0:	f340 8124 	ble.w	800633c <_strtod_l+0x84c>
 80060f4:	2b34      	cmp	r3, #52	; 0x34
 80060f6:	bfde      	ittt	le
 80060f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80060fc:	f04f 33ff 	movle.w	r3, #4294967295
 8006100:	fa03 f202 	lslle.w	r2, r3, r2
 8006104:	f04f 0a00 	mov.w	sl, #0
 8006108:	bfcc      	ite	gt
 800610a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800610e:	ea02 0b01 	andle.w	fp, r2, r1
 8006112:	2200      	movs	r2, #0
 8006114:	2300      	movs	r3, #0
 8006116:	4650      	mov	r0, sl
 8006118:	4659      	mov	r1, fp
 800611a:	f7fa fcdd 	bl	8000ad8 <__aeabi_dcmpeq>
 800611e:	2800      	cmp	r0, #0
 8006120:	d1a2      	bne.n	8006068 <_strtod_l+0x578>
 8006122:	9b07      	ldr	r3, [sp, #28]
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	9908      	ldr	r1, [sp, #32]
 8006128:	462b      	mov	r3, r5
 800612a:	463a      	mov	r2, r7
 800612c:	4620      	mov	r0, r4
 800612e:	f001 fe2d 	bl	8007d8c <__s2b>
 8006132:	9007      	str	r0, [sp, #28]
 8006134:	2800      	cmp	r0, #0
 8006136:	f43f af1f 	beq.w	8005f78 <_strtod_l+0x488>
 800613a:	9b05      	ldr	r3, [sp, #20]
 800613c:	1b9e      	subs	r6, r3, r6
 800613e:	9b06      	ldr	r3, [sp, #24]
 8006140:	2b00      	cmp	r3, #0
 8006142:	bfb4      	ite	lt
 8006144:	4633      	movlt	r3, r6
 8006146:	2300      	movge	r3, #0
 8006148:	930c      	str	r3, [sp, #48]	; 0x30
 800614a:	9b06      	ldr	r3, [sp, #24]
 800614c:	2500      	movs	r5, #0
 800614e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006152:	9312      	str	r3, [sp, #72]	; 0x48
 8006154:	462e      	mov	r6, r5
 8006156:	9b07      	ldr	r3, [sp, #28]
 8006158:	4620      	mov	r0, r4
 800615a:	6859      	ldr	r1, [r3, #4]
 800615c:	f001 fd6e 	bl	8007c3c <_Balloc>
 8006160:	9005      	str	r0, [sp, #20]
 8006162:	2800      	cmp	r0, #0
 8006164:	f43f af0c 	beq.w	8005f80 <_strtod_l+0x490>
 8006168:	9b07      	ldr	r3, [sp, #28]
 800616a:	691a      	ldr	r2, [r3, #16]
 800616c:	3202      	adds	r2, #2
 800616e:	f103 010c 	add.w	r1, r3, #12
 8006172:	0092      	lsls	r2, r2, #2
 8006174:	300c      	adds	r0, #12
 8006176:	f001 fd53 	bl	8007c20 <memcpy>
 800617a:	ec4b ab10 	vmov	d0, sl, fp
 800617e:	aa1a      	add	r2, sp, #104	; 0x68
 8006180:	a919      	add	r1, sp, #100	; 0x64
 8006182:	4620      	mov	r0, r4
 8006184:	f002 f948 	bl	8008418 <__d2b>
 8006188:	ec4b ab18 	vmov	d8, sl, fp
 800618c:	9018      	str	r0, [sp, #96]	; 0x60
 800618e:	2800      	cmp	r0, #0
 8006190:	f43f aef6 	beq.w	8005f80 <_strtod_l+0x490>
 8006194:	2101      	movs	r1, #1
 8006196:	4620      	mov	r0, r4
 8006198:	f001 fe92 	bl	8007ec0 <__i2b>
 800619c:	4606      	mov	r6, r0
 800619e:	2800      	cmp	r0, #0
 80061a0:	f43f aeee 	beq.w	8005f80 <_strtod_l+0x490>
 80061a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80061a6:	9904      	ldr	r1, [sp, #16]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	bfab      	itete	ge
 80061ac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80061ae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80061b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80061b2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80061b6:	bfac      	ite	ge
 80061b8:	eb03 0902 	addge.w	r9, r3, r2
 80061bc:	1ad7      	sublt	r7, r2, r3
 80061be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80061c0:	eba3 0801 	sub.w	r8, r3, r1
 80061c4:	4490      	add	r8, r2
 80061c6:	4ba1      	ldr	r3, [pc, #644]	; (800644c <_strtod_l+0x95c>)
 80061c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80061cc:	4598      	cmp	r8, r3
 80061ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80061d2:	f280 80c7 	bge.w	8006364 <_strtod_l+0x874>
 80061d6:	eba3 0308 	sub.w	r3, r3, r8
 80061da:	2b1f      	cmp	r3, #31
 80061dc:	eba2 0203 	sub.w	r2, r2, r3
 80061e0:	f04f 0101 	mov.w	r1, #1
 80061e4:	f300 80b1 	bgt.w	800634a <_strtod_l+0x85a>
 80061e8:	fa01 f303 	lsl.w	r3, r1, r3
 80061ec:	930d      	str	r3, [sp, #52]	; 0x34
 80061ee:	2300      	movs	r3, #0
 80061f0:	9308      	str	r3, [sp, #32]
 80061f2:	eb09 0802 	add.w	r8, r9, r2
 80061f6:	9b04      	ldr	r3, [sp, #16]
 80061f8:	45c1      	cmp	r9, r8
 80061fa:	4417      	add	r7, r2
 80061fc:	441f      	add	r7, r3
 80061fe:	464b      	mov	r3, r9
 8006200:	bfa8      	it	ge
 8006202:	4643      	movge	r3, r8
 8006204:	42bb      	cmp	r3, r7
 8006206:	bfa8      	it	ge
 8006208:	463b      	movge	r3, r7
 800620a:	2b00      	cmp	r3, #0
 800620c:	bfc2      	ittt	gt
 800620e:	eba8 0803 	subgt.w	r8, r8, r3
 8006212:	1aff      	subgt	r7, r7, r3
 8006214:	eba9 0903 	subgt.w	r9, r9, r3
 8006218:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800621a:	2b00      	cmp	r3, #0
 800621c:	dd17      	ble.n	800624e <_strtod_l+0x75e>
 800621e:	4631      	mov	r1, r6
 8006220:	461a      	mov	r2, r3
 8006222:	4620      	mov	r0, r4
 8006224:	f001 ff0c 	bl	8008040 <__pow5mult>
 8006228:	4606      	mov	r6, r0
 800622a:	2800      	cmp	r0, #0
 800622c:	f43f aea8 	beq.w	8005f80 <_strtod_l+0x490>
 8006230:	4601      	mov	r1, r0
 8006232:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006234:	4620      	mov	r0, r4
 8006236:	f001 fe59 	bl	8007eec <__multiply>
 800623a:	900b      	str	r0, [sp, #44]	; 0x2c
 800623c:	2800      	cmp	r0, #0
 800623e:	f43f ae9f 	beq.w	8005f80 <_strtod_l+0x490>
 8006242:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006244:	4620      	mov	r0, r4
 8006246:	f001 fd39 	bl	8007cbc <_Bfree>
 800624a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800624c:	9318      	str	r3, [sp, #96]	; 0x60
 800624e:	f1b8 0f00 	cmp.w	r8, #0
 8006252:	f300 808c 	bgt.w	800636e <_strtod_l+0x87e>
 8006256:	9b06      	ldr	r3, [sp, #24]
 8006258:	2b00      	cmp	r3, #0
 800625a:	dd08      	ble.n	800626e <_strtod_l+0x77e>
 800625c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800625e:	9905      	ldr	r1, [sp, #20]
 8006260:	4620      	mov	r0, r4
 8006262:	f001 feed 	bl	8008040 <__pow5mult>
 8006266:	9005      	str	r0, [sp, #20]
 8006268:	2800      	cmp	r0, #0
 800626a:	f43f ae89 	beq.w	8005f80 <_strtod_l+0x490>
 800626e:	2f00      	cmp	r7, #0
 8006270:	dd08      	ble.n	8006284 <_strtod_l+0x794>
 8006272:	9905      	ldr	r1, [sp, #20]
 8006274:	463a      	mov	r2, r7
 8006276:	4620      	mov	r0, r4
 8006278:	f001 ff3c 	bl	80080f4 <__lshift>
 800627c:	9005      	str	r0, [sp, #20]
 800627e:	2800      	cmp	r0, #0
 8006280:	f43f ae7e 	beq.w	8005f80 <_strtod_l+0x490>
 8006284:	f1b9 0f00 	cmp.w	r9, #0
 8006288:	dd08      	ble.n	800629c <_strtod_l+0x7ac>
 800628a:	4631      	mov	r1, r6
 800628c:	464a      	mov	r2, r9
 800628e:	4620      	mov	r0, r4
 8006290:	f001 ff30 	bl	80080f4 <__lshift>
 8006294:	4606      	mov	r6, r0
 8006296:	2800      	cmp	r0, #0
 8006298:	f43f ae72 	beq.w	8005f80 <_strtod_l+0x490>
 800629c:	9a05      	ldr	r2, [sp, #20]
 800629e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80062a0:	4620      	mov	r0, r4
 80062a2:	f001 ffb3 	bl	800820c <__mdiff>
 80062a6:	4605      	mov	r5, r0
 80062a8:	2800      	cmp	r0, #0
 80062aa:	f43f ae69 	beq.w	8005f80 <_strtod_l+0x490>
 80062ae:	68c3      	ldr	r3, [r0, #12]
 80062b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80062b2:	2300      	movs	r3, #0
 80062b4:	60c3      	str	r3, [r0, #12]
 80062b6:	4631      	mov	r1, r6
 80062b8:	f001 ff8c 	bl	80081d4 <__mcmp>
 80062bc:	2800      	cmp	r0, #0
 80062be:	da60      	bge.n	8006382 <_strtod_l+0x892>
 80062c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062c2:	ea53 030a 	orrs.w	r3, r3, sl
 80062c6:	f040 8082 	bne.w	80063ce <_strtod_l+0x8de>
 80062ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d17d      	bne.n	80063ce <_strtod_l+0x8de>
 80062d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80062d6:	0d1b      	lsrs	r3, r3, #20
 80062d8:	051b      	lsls	r3, r3, #20
 80062da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80062de:	d976      	bls.n	80063ce <_strtod_l+0x8de>
 80062e0:	696b      	ldr	r3, [r5, #20]
 80062e2:	b913      	cbnz	r3, 80062ea <_strtod_l+0x7fa>
 80062e4:	692b      	ldr	r3, [r5, #16]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	dd71      	ble.n	80063ce <_strtod_l+0x8de>
 80062ea:	4629      	mov	r1, r5
 80062ec:	2201      	movs	r2, #1
 80062ee:	4620      	mov	r0, r4
 80062f0:	f001 ff00 	bl	80080f4 <__lshift>
 80062f4:	4631      	mov	r1, r6
 80062f6:	4605      	mov	r5, r0
 80062f8:	f001 ff6c 	bl	80081d4 <__mcmp>
 80062fc:	2800      	cmp	r0, #0
 80062fe:	dd66      	ble.n	80063ce <_strtod_l+0x8de>
 8006300:	9904      	ldr	r1, [sp, #16]
 8006302:	4a53      	ldr	r2, [pc, #332]	; (8006450 <_strtod_l+0x960>)
 8006304:	465b      	mov	r3, fp
 8006306:	2900      	cmp	r1, #0
 8006308:	f000 8081 	beq.w	800640e <_strtod_l+0x91e>
 800630c:	ea02 010b 	and.w	r1, r2, fp
 8006310:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006314:	dc7b      	bgt.n	800640e <_strtod_l+0x91e>
 8006316:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800631a:	f77f aea9 	ble.w	8006070 <_strtod_l+0x580>
 800631e:	4b4d      	ldr	r3, [pc, #308]	; (8006454 <_strtod_l+0x964>)
 8006320:	4650      	mov	r0, sl
 8006322:	4659      	mov	r1, fp
 8006324:	2200      	movs	r2, #0
 8006326:	f7fa f96f 	bl	8000608 <__aeabi_dmul>
 800632a:	460b      	mov	r3, r1
 800632c:	4303      	orrs	r3, r0
 800632e:	bf08      	it	eq
 8006330:	2322      	moveq	r3, #34	; 0x22
 8006332:	4682      	mov	sl, r0
 8006334:	468b      	mov	fp, r1
 8006336:	bf08      	it	eq
 8006338:	6023      	streq	r3, [r4, #0]
 800633a:	e62b      	b.n	8005f94 <_strtod_l+0x4a4>
 800633c:	f04f 32ff 	mov.w	r2, #4294967295
 8006340:	fa02 f303 	lsl.w	r3, r2, r3
 8006344:	ea03 0a0a 	and.w	sl, r3, sl
 8006348:	e6e3      	b.n	8006112 <_strtod_l+0x622>
 800634a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800634e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006352:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006356:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800635a:	fa01 f308 	lsl.w	r3, r1, r8
 800635e:	9308      	str	r3, [sp, #32]
 8006360:	910d      	str	r1, [sp, #52]	; 0x34
 8006362:	e746      	b.n	80061f2 <_strtod_l+0x702>
 8006364:	2300      	movs	r3, #0
 8006366:	9308      	str	r3, [sp, #32]
 8006368:	2301      	movs	r3, #1
 800636a:	930d      	str	r3, [sp, #52]	; 0x34
 800636c:	e741      	b.n	80061f2 <_strtod_l+0x702>
 800636e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006370:	4642      	mov	r2, r8
 8006372:	4620      	mov	r0, r4
 8006374:	f001 febe 	bl	80080f4 <__lshift>
 8006378:	9018      	str	r0, [sp, #96]	; 0x60
 800637a:	2800      	cmp	r0, #0
 800637c:	f47f af6b 	bne.w	8006256 <_strtod_l+0x766>
 8006380:	e5fe      	b.n	8005f80 <_strtod_l+0x490>
 8006382:	465f      	mov	r7, fp
 8006384:	d16e      	bne.n	8006464 <_strtod_l+0x974>
 8006386:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006388:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800638c:	b342      	cbz	r2, 80063e0 <_strtod_l+0x8f0>
 800638e:	4a32      	ldr	r2, [pc, #200]	; (8006458 <_strtod_l+0x968>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d128      	bne.n	80063e6 <_strtod_l+0x8f6>
 8006394:	9b04      	ldr	r3, [sp, #16]
 8006396:	4651      	mov	r1, sl
 8006398:	b1eb      	cbz	r3, 80063d6 <_strtod_l+0x8e6>
 800639a:	4b2d      	ldr	r3, [pc, #180]	; (8006450 <_strtod_l+0x960>)
 800639c:	403b      	ands	r3, r7
 800639e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80063a2:	f04f 32ff 	mov.w	r2, #4294967295
 80063a6:	d819      	bhi.n	80063dc <_strtod_l+0x8ec>
 80063a8:	0d1b      	lsrs	r3, r3, #20
 80063aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80063ae:	fa02 f303 	lsl.w	r3, r2, r3
 80063b2:	4299      	cmp	r1, r3
 80063b4:	d117      	bne.n	80063e6 <_strtod_l+0x8f6>
 80063b6:	4b29      	ldr	r3, [pc, #164]	; (800645c <_strtod_l+0x96c>)
 80063b8:	429f      	cmp	r7, r3
 80063ba:	d102      	bne.n	80063c2 <_strtod_l+0x8d2>
 80063bc:	3101      	adds	r1, #1
 80063be:	f43f addf 	beq.w	8005f80 <_strtod_l+0x490>
 80063c2:	4b23      	ldr	r3, [pc, #140]	; (8006450 <_strtod_l+0x960>)
 80063c4:	403b      	ands	r3, r7
 80063c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80063ca:	f04f 0a00 	mov.w	sl, #0
 80063ce:	9b04      	ldr	r3, [sp, #16]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1a4      	bne.n	800631e <_strtod_l+0x82e>
 80063d4:	e5de      	b.n	8005f94 <_strtod_l+0x4a4>
 80063d6:	f04f 33ff 	mov.w	r3, #4294967295
 80063da:	e7ea      	b.n	80063b2 <_strtod_l+0x8c2>
 80063dc:	4613      	mov	r3, r2
 80063de:	e7e8      	b.n	80063b2 <_strtod_l+0x8c2>
 80063e0:	ea53 030a 	orrs.w	r3, r3, sl
 80063e4:	d08c      	beq.n	8006300 <_strtod_l+0x810>
 80063e6:	9b08      	ldr	r3, [sp, #32]
 80063e8:	b1db      	cbz	r3, 8006422 <_strtod_l+0x932>
 80063ea:	423b      	tst	r3, r7
 80063ec:	d0ef      	beq.n	80063ce <_strtod_l+0x8de>
 80063ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063f0:	9a04      	ldr	r2, [sp, #16]
 80063f2:	4650      	mov	r0, sl
 80063f4:	4659      	mov	r1, fp
 80063f6:	b1c3      	cbz	r3, 800642a <_strtod_l+0x93a>
 80063f8:	f7ff fb5c 	bl	8005ab4 <sulp>
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
 8006400:	ec51 0b18 	vmov	r0, r1, d8
 8006404:	f7f9 ff4a 	bl	800029c <__adddf3>
 8006408:	4682      	mov	sl, r0
 800640a:	468b      	mov	fp, r1
 800640c:	e7df      	b.n	80063ce <_strtod_l+0x8de>
 800640e:	4013      	ands	r3, r2
 8006410:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006414:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006418:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800641c:	f04f 3aff 	mov.w	sl, #4294967295
 8006420:	e7d5      	b.n	80063ce <_strtod_l+0x8de>
 8006422:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006424:	ea13 0f0a 	tst.w	r3, sl
 8006428:	e7e0      	b.n	80063ec <_strtod_l+0x8fc>
 800642a:	f7ff fb43 	bl	8005ab4 <sulp>
 800642e:	4602      	mov	r2, r0
 8006430:	460b      	mov	r3, r1
 8006432:	ec51 0b18 	vmov	r0, r1, d8
 8006436:	f7f9 ff2f 	bl	8000298 <__aeabi_dsub>
 800643a:	2200      	movs	r2, #0
 800643c:	2300      	movs	r3, #0
 800643e:	4682      	mov	sl, r0
 8006440:	468b      	mov	fp, r1
 8006442:	f7fa fb49 	bl	8000ad8 <__aeabi_dcmpeq>
 8006446:	2800      	cmp	r0, #0
 8006448:	d0c1      	beq.n	80063ce <_strtod_l+0x8de>
 800644a:	e611      	b.n	8006070 <_strtod_l+0x580>
 800644c:	fffffc02 	.word	0xfffffc02
 8006450:	7ff00000 	.word	0x7ff00000
 8006454:	39500000 	.word	0x39500000
 8006458:	000fffff 	.word	0x000fffff
 800645c:	7fefffff 	.word	0x7fefffff
 8006460:	0800a460 	.word	0x0800a460
 8006464:	4631      	mov	r1, r6
 8006466:	4628      	mov	r0, r5
 8006468:	f002 f832 	bl	80084d0 <__ratio>
 800646c:	ec59 8b10 	vmov	r8, r9, d0
 8006470:	ee10 0a10 	vmov	r0, s0
 8006474:	2200      	movs	r2, #0
 8006476:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800647a:	4649      	mov	r1, r9
 800647c:	f7fa fb40 	bl	8000b00 <__aeabi_dcmple>
 8006480:	2800      	cmp	r0, #0
 8006482:	d07a      	beq.n	800657a <_strtod_l+0xa8a>
 8006484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006486:	2b00      	cmp	r3, #0
 8006488:	d04a      	beq.n	8006520 <_strtod_l+0xa30>
 800648a:	4b95      	ldr	r3, [pc, #596]	; (80066e0 <_strtod_l+0xbf0>)
 800648c:	2200      	movs	r2, #0
 800648e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006492:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80066e0 <_strtod_l+0xbf0>
 8006496:	f04f 0800 	mov.w	r8, #0
 800649a:	4b92      	ldr	r3, [pc, #584]	; (80066e4 <_strtod_l+0xbf4>)
 800649c:	403b      	ands	r3, r7
 800649e:	930d      	str	r3, [sp, #52]	; 0x34
 80064a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80064a2:	4b91      	ldr	r3, [pc, #580]	; (80066e8 <_strtod_l+0xbf8>)
 80064a4:	429a      	cmp	r2, r3
 80064a6:	f040 80b0 	bne.w	800660a <_strtod_l+0xb1a>
 80064aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80064ae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80064b2:	ec4b ab10 	vmov	d0, sl, fp
 80064b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80064ba:	f001 ff31 	bl	8008320 <__ulp>
 80064be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80064c2:	ec53 2b10 	vmov	r2, r3, d0
 80064c6:	f7fa f89f 	bl	8000608 <__aeabi_dmul>
 80064ca:	4652      	mov	r2, sl
 80064cc:	465b      	mov	r3, fp
 80064ce:	f7f9 fee5 	bl	800029c <__adddf3>
 80064d2:	460b      	mov	r3, r1
 80064d4:	4983      	ldr	r1, [pc, #524]	; (80066e4 <_strtod_l+0xbf4>)
 80064d6:	4a85      	ldr	r2, [pc, #532]	; (80066ec <_strtod_l+0xbfc>)
 80064d8:	4019      	ands	r1, r3
 80064da:	4291      	cmp	r1, r2
 80064dc:	4682      	mov	sl, r0
 80064de:	d960      	bls.n	80065a2 <_strtod_l+0xab2>
 80064e0:	ee18 3a90 	vmov	r3, s17
 80064e4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d104      	bne.n	80064f6 <_strtod_l+0xa06>
 80064ec:	ee18 3a10 	vmov	r3, s16
 80064f0:	3301      	adds	r3, #1
 80064f2:	f43f ad45 	beq.w	8005f80 <_strtod_l+0x490>
 80064f6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80066f8 <_strtod_l+0xc08>
 80064fa:	f04f 3aff 	mov.w	sl, #4294967295
 80064fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006500:	4620      	mov	r0, r4
 8006502:	f001 fbdb 	bl	8007cbc <_Bfree>
 8006506:	9905      	ldr	r1, [sp, #20]
 8006508:	4620      	mov	r0, r4
 800650a:	f001 fbd7 	bl	8007cbc <_Bfree>
 800650e:	4631      	mov	r1, r6
 8006510:	4620      	mov	r0, r4
 8006512:	f001 fbd3 	bl	8007cbc <_Bfree>
 8006516:	4629      	mov	r1, r5
 8006518:	4620      	mov	r0, r4
 800651a:	f001 fbcf 	bl	8007cbc <_Bfree>
 800651e:	e61a      	b.n	8006156 <_strtod_l+0x666>
 8006520:	f1ba 0f00 	cmp.w	sl, #0
 8006524:	d11b      	bne.n	800655e <_strtod_l+0xa6e>
 8006526:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800652a:	b9f3      	cbnz	r3, 800656a <_strtod_l+0xa7a>
 800652c:	4b6c      	ldr	r3, [pc, #432]	; (80066e0 <_strtod_l+0xbf0>)
 800652e:	2200      	movs	r2, #0
 8006530:	4640      	mov	r0, r8
 8006532:	4649      	mov	r1, r9
 8006534:	f7fa fada 	bl	8000aec <__aeabi_dcmplt>
 8006538:	b9d0      	cbnz	r0, 8006570 <_strtod_l+0xa80>
 800653a:	4640      	mov	r0, r8
 800653c:	4649      	mov	r1, r9
 800653e:	4b6c      	ldr	r3, [pc, #432]	; (80066f0 <_strtod_l+0xc00>)
 8006540:	2200      	movs	r2, #0
 8006542:	f7fa f861 	bl	8000608 <__aeabi_dmul>
 8006546:	4680      	mov	r8, r0
 8006548:	4689      	mov	r9, r1
 800654a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800654e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006552:	9315      	str	r3, [sp, #84]	; 0x54
 8006554:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006558:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800655c:	e79d      	b.n	800649a <_strtod_l+0x9aa>
 800655e:	f1ba 0f01 	cmp.w	sl, #1
 8006562:	d102      	bne.n	800656a <_strtod_l+0xa7a>
 8006564:	2f00      	cmp	r7, #0
 8006566:	f43f ad83 	beq.w	8006070 <_strtod_l+0x580>
 800656a:	4b62      	ldr	r3, [pc, #392]	; (80066f4 <_strtod_l+0xc04>)
 800656c:	2200      	movs	r2, #0
 800656e:	e78e      	b.n	800648e <_strtod_l+0x99e>
 8006570:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80066f0 <_strtod_l+0xc00>
 8006574:	f04f 0800 	mov.w	r8, #0
 8006578:	e7e7      	b.n	800654a <_strtod_l+0xa5a>
 800657a:	4b5d      	ldr	r3, [pc, #372]	; (80066f0 <_strtod_l+0xc00>)
 800657c:	4640      	mov	r0, r8
 800657e:	4649      	mov	r1, r9
 8006580:	2200      	movs	r2, #0
 8006582:	f7fa f841 	bl	8000608 <__aeabi_dmul>
 8006586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006588:	4680      	mov	r8, r0
 800658a:	4689      	mov	r9, r1
 800658c:	b933      	cbnz	r3, 800659c <_strtod_l+0xaac>
 800658e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006592:	900e      	str	r0, [sp, #56]	; 0x38
 8006594:	930f      	str	r3, [sp, #60]	; 0x3c
 8006596:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800659a:	e7dd      	b.n	8006558 <_strtod_l+0xa68>
 800659c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80065a0:	e7f9      	b.n	8006596 <_strtod_l+0xaa6>
 80065a2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80065a6:	9b04      	ldr	r3, [sp, #16]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1a8      	bne.n	80064fe <_strtod_l+0xa0e>
 80065ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80065b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065b2:	0d1b      	lsrs	r3, r3, #20
 80065b4:	051b      	lsls	r3, r3, #20
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d1a1      	bne.n	80064fe <_strtod_l+0xa0e>
 80065ba:	4640      	mov	r0, r8
 80065bc:	4649      	mov	r1, r9
 80065be:	f7fa fb83 	bl	8000cc8 <__aeabi_d2lz>
 80065c2:	f7f9 fff3 	bl	80005ac <__aeabi_l2d>
 80065c6:	4602      	mov	r2, r0
 80065c8:	460b      	mov	r3, r1
 80065ca:	4640      	mov	r0, r8
 80065cc:	4649      	mov	r1, r9
 80065ce:	f7f9 fe63 	bl	8000298 <__aeabi_dsub>
 80065d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80065d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80065d8:	ea43 030a 	orr.w	r3, r3, sl
 80065dc:	4313      	orrs	r3, r2
 80065de:	4680      	mov	r8, r0
 80065e0:	4689      	mov	r9, r1
 80065e2:	d055      	beq.n	8006690 <_strtod_l+0xba0>
 80065e4:	a336      	add	r3, pc, #216	; (adr r3, 80066c0 <_strtod_l+0xbd0>)
 80065e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ea:	f7fa fa7f 	bl	8000aec <__aeabi_dcmplt>
 80065ee:	2800      	cmp	r0, #0
 80065f0:	f47f acd0 	bne.w	8005f94 <_strtod_l+0x4a4>
 80065f4:	a334      	add	r3, pc, #208	; (adr r3, 80066c8 <_strtod_l+0xbd8>)
 80065f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fa:	4640      	mov	r0, r8
 80065fc:	4649      	mov	r1, r9
 80065fe:	f7fa fa93 	bl	8000b28 <__aeabi_dcmpgt>
 8006602:	2800      	cmp	r0, #0
 8006604:	f43f af7b 	beq.w	80064fe <_strtod_l+0xa0e>
 8006608:	e4c4      	b.n	8005f94 <_strtod_l+0x4a4>
 800660a:	9b04      	ldr	r3, [sp, #16]
 800660c:	b333      	cbz	r3, 800665c <_strtod_l+0xb6c>
 800660e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006610:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006614:	d822      	bhi.n	800665c <_strtod_l+0xb6c>
 8006616:	a32e      	add	r3, pc, #184	; (adr r3, 80066d0 <_strtod_l+0xbe0>)
 8006618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661c:	4640      	mov	r0, r8
 800661e:	4649      	mov	r1, r9
 8006620:	f7fa fa6e 	bl	8000b00 <__aeabi_dcmple>
 8006624:	b1a0      	cbz	r0, 8006650 <_strtod_l+0xb60>
 8006626:	4649      	mov	r1, r9
 8006628:	4640      	mov	r0, r8
 800662a:	f7fa fac5 	bl	8000bb8 <__aeabi_d2uiz>
 800662e:	2801      	cmp	r0, #1
 8006630:	bf38      	it	cc
 8006632:	2001      	movcc	r0, #1
 8006634:	f7f9 ff6e 	bl	8000514 <__aeabi_ui2d>
 8006638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800663a:	4680      	mov	r8, r0
 800663c:	4689      	mov	r9, r1
 800663e:	bb23      	cbnz	r3, 800668a <_strtod_l+0xb9a>
 8006640:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006644:	9010      	str	r0, [sp, #64]	; 0x40
 8006646:	9311      	str	r3, [sp, #68]	; 0x44
 8006648:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800664c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006652:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006654:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006658:	1a9b      	subs	r3, r3, r2
 800665a:	9309      	str	r3, [sp, #36]	; 0x24
 800665c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006660:	eeb0 0a48 	vmov.f32	s0, s16
 8006664:	eef0 0a68 	vmov.f32	s1, s17
 8006668:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800666c:	f001 fe58 	bl	8008320 <__ulp>
 8006670:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006674:	ec53 2b10 	vmov	r2, r3, d0
 8006678:	f7f9 ffc6 	bl	8000608 <__aeabi_dmul>
 800667c:	ec53 2b18 	vmov	r2, r3, d8
 8006680:	f7f9 fe0c 	bl	800029c <__adddf3>
 8006684:	4682      	mov	sl, r0
 8006686:	468b      	mov	fp, r1
 8006688:	e78d      	b.n	80065a6 <_strtod_l+0xab6>
 800668a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800668e:	e7db      	b.n	8006648 <_strtod_l+0xb58>
 8006690:	a311      	add	r3, pc, #68	; (adr r3, 80066d8 <_strtod_l+0xbe8>)
 8006692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006696:	f7fa fa29 	bl	8000aec <__aeabi_dcmplt>
 800669a:	e7b2      	b.n	8006602 <_strtod_l+0xb12>
 800669c:	2300      	movs	r3, #0
 800669e:	930a      	str	r3, [sp, #40]	; 0x28
 80066a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80066a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80066a4:	6013      	str	r3, [r2, #0]
 80066a6:	f7ff ba6b 	b.w	8005b80 <_strtod_l+0x90>
 80066aa:	2a65      	cmp	r2, #101	; 0x65
 80066ac:	f43f ab5f 	beq.w	8005d6e <_strtod_l+0x27e>
 80066b0:	2a45      	cmp	r2, #69	; 0x45
 80066b2:	f43f ab5c 	beq.w	8005d6e <_strtod_l+0x27e>
 80066b6:	2301      	movs	r3, #1
 80066b8:	f7ff bb94 	b.w	8005de4 <_strtod_l+0x2f4>
 80066bc:	f3af 8000 	nop.w
 80066c0:	94a03595 	.word	0x94a03595
 80066c4:	3fdfffff 	.word	0x3fdfffff
 80066c8:	35afe535 	.word	0x35afe535
 80066cc:	3fe00000 	.word	0x3fe00000
 80066d0:	ffc00000 	.word	0xffc00000
 80066d4:	41dfffff 	.word	0x41dfffff
 80066d8:	94a03595 	.word	0x94a03595
 80066dc:	3fcfffff 	.word	0x3fcfffff
 80066e0:	3ff00000 	.word	0x3ff00000
 80066e4:	7ff00000 	.word	0x7ff00000
 80066e8:	7fe00000 	.word	0x7fe00000
 80066ec:	7c9fffff 	.word	0x7c9fffff
 80066f0:	3fe00000 	.word	0x3fe00000
 80066f4:	bff00000 	.word	0xbff00000
 80066f8:	7fefffff 	.word	0x7fefffff

080066fc <_strtod_r>:
 80066fc:	4b01      	ldr	r3, [pc, #4]	; (8006704 <_strtod_r+0x8>)
 80066fe:	f7ff b9f7 	b.w	8005af0 <_strtod_l>
 8006702:	bf00      	nop
 8006704:	200000e8 	.word	0x200000e8

08006708 <_strtol_l.constprop.0>:
 8006708:	2b01      	cmp	r3, #1
 800670a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800670e:	d001      	beq.n	8006714 <_strtol_l.constprop.0+0xc>
 8006710:	2b24      	cmp	r3, #36	; 0x24
 8006712:	d906      	bls.n	8006722 <_strtol_l.constprop.0+0x1a>
 8006714:	f7fe fafc 	bl	8004d10 <__errno>
 8006718:	2316      	movs	r3, #22
 800671a:	6003      	str	r3, [r0, #0]
 800671c:	2000      	movs	r0, #0
 800671e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006722:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006808 <_strtol_l.constprop.0+0x100>
 8006726:	460d      	mov	r5, r1
 8006728:	462e      	mov	r6, r5
 800672a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800672e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006732:	f017 0708 	ands.w	r7, r7, #8
 8006736:	d1f7      	bne.n	8006728 <_strtol_l.constprop.0+0x20>
 8006738:	2c2d      	cmp	r4, #45	; 0x2d
 800673a:	d132      	bne.n	80067a2 <_strtol_l.constprop.0+0x9a>
 800673c:	782c      	ldrb	r4, [r5, #0]
 800673e:	2701      	movs	r7, #1
 8006740:	1cb5      	adds	r5, r6, #2
 8006742:	2b00      	cmp	r3, #0
 8006744:	d05b      	beq.n	80067fe <_strtol_l.constprop.0+0xf6>
 8006746:	2b10      	cmp	r3, #16
 8006748:	d109      	bne.n	800675e <_strtol_l.constprop.0+0x56>
 800674a:	2c30      	cmp	r4, #48	; 0x30
 800674c:	d107      	bne.n	800675e <_strtol_l.constprop.0+0x56>
 800674e:	782c      	ldrb	r4, [r5, #0]
 8006750:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006754:	2c58      	cmp	r4, #88	; 0x58
 8006756:	d14d      	bne.n	80067f4 <_strtol_l.constprop.0+0xec>
 8006758:	786c      	ldrb	r4, [r5, #1]
 800675a:	2310      	movs	r3, #16
 800675c:	3502      	adds	r5, #2
 800675e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006762:	f108 38ff 	add.w	r8, r8, #4294967295
 8006766:	f04f 0c00 	mov.w	ip, #0
 800676a:	fbb8 f9f3 	udiv	r9, r8, r3
 800676e:	4666      	mov	r6, ip
 8006770:	fb03 8a19 	mls	sl, r3, r9, r8
 8006774:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006778:	f1be 0f09 	cmp.w	lr, #9
 800677c:	d816      	bhi.n	80067ac <_strtol_l.constprop.0+0xa4>
 800677e:	4674      	mov	r4, lr
 8006780:	42a3      	cmp	r3, r4
 8006782:	dd24      	ble.n	80067ce <_strtol_l.constprop.0+0xc6>
 8006784:	f1bc 0f00 	cmp.w	ip, #0
 8006788:	db1e      	blt.n	80067c8 <_strtol_l.constprop.0+0xc0>
 800678a:	45b1      	cmp	r9, r6
 800678c:	d31c      	bcc.n	80067c8 <_strtol_l.constprop.0+0xc0>
 800678e:	d101      	bne.n	8006794 <_strtol_l.constprop.0+0x8c>
 8006790:	45a2      	cmp	sl, r4
 8006792:	db19      	blt.n	80067c8 <_strtol_l.constprop.0+0xc0>
 8006794:	fb06 4603 	mla	r6, r6, r3, r4
 8006798:	f04f 0c01 	mov.w	ip, #1
 800679c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80067a0:	e7e8      	b.n	8006774 <_strtol_l.constprop.0+0x6c>
 80067a2:	2c2b      	cmp	r4, #43	; 0x2b
 80067a4:	bf04      	itt	eq
 80067a6:	782c      	ldrbeq	r4, [r5, #0]
 80067a8:	1cb5      	addeq	r5, r6, #2
 80067aa:	e7ca      	b.n	8006742 <_strtol_l.constprop.0+0x3a>
 80067ac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80067b0:	f1be 0f19 	cmp.w	lr, #25
 80067b4:	d801      	bhi.n	80067ba <_strtol_l.constprop.0+0xb2>
 80067b6:	3c37      	subs	r4, #55	; 0x37
 80067b8:	e7e2      	b.n	8006780 <_strtol_l.constprop.0+0x78>
 80067ba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80067be:	f1be 0f19 	cmp.w	lr, #25
 80067c2:	d804      	bhi.n	80067ce <_strtol_l.constprop.0+0xc6>
 80067c4:	3c57      	subs	r4, #87	; 0x57
 80067c6:	e7db      	b.n	8006780 <_strtol_l.constprop.0+0x78>
 80067c8:	f04f 3cff 	mov.w	ip, #4294967295
 80067cc:	e7e6      	b.n	800679c <_strtol_l.constprop.0+0x94>
 80067ce:	f1bc 0f00 	cmp.w	ip, #0
 80067d2:	da05      	bge.n	80067e0 <_strtol_l.constprop.0+0xd8>
 80067d4:	2322      	movs	r3, #34	; 0x22
 80067d6:	6003      	str	r3, [r0, #0]
 80067d8:	4646      	mov	r6, r8
 80067da:	b942      	cbnz	r2, 80067ee <_strtol_l.constprop.0+0xe6>
 80067dc:	4630      	mov	r0, r6
 80067de:	e79e      	b.n	800671e <_strtol_l.constprop.0+0x16>
 80067e0:	b107      	cbz	r7, 80067e4 <_strtol_l.constprop.0+0xdc>
 80067e2:	4276      	negs	r6, r6
 80067e4:	2a00      	cmp	r2, #0
 80067e6:	d0f9      	beq.n	80067dc <_strtol_l.constprop.0+0xd4>
 80067e8:	f1bc 0f00 	cmp.w	ip, #0
 80067ec:	d000      	beq.n	80067f0 <_strtol_l.constprop.0+0xe8>
 80067ee:	1e69      	subs	r1, r5, #1
 80067f0:	6011      	str	r1, [r2, #0]
 80067f2:	e7f3      	b.n	80067dc <_strtol_l.constprop.0+0xd4>
 80067f4:	2430      	movs	r4, #48	; 0x30
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1b1      	bne.n	800675e <_strtol_l.constprop.0+0x56>
 80067fa:	2308      	movs	r3, #8
 80067fc:	e7af      	b.n	800675e <_strtol_l.constprop.0+0x56>
 80067fe:	2c30      	cmp	r4, #48	; 0x30
 8006800:	d0a5      	beq.n	800674e <_strtol_l.constprop.0+0x46>
 8006802:	230a      	movs	r3, #10
 8006804:	e7ab      	b.n	800675e <_strtol_l.constprop.0+0x56>
 8006806:	bf00      	nop
 8006808:	0800a489 	.word	0x0800a489

0800680c <_strtol_r>:
 800680c:	f7ff bf7c 	b.w	8006708 <_strtol_l.constprop.0>

08006810 <quorem>:
 8006810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006814:	6903      	ldr	r3, [r0, #16]
 8006816:	690c      	ldr	r4, [r1, #16]
 8006818:	42a3      	cmp	r3, r4
 800681a:	4607      	mov	r7, r0
 800681c:	f2c0 8081 	blt.w	8006922 <quorem+0x112>
 8006820:	3c01      	subs	r4, #1
 8006822:	f101 0814 	add.w	r8, r1, #20
 8006826:	f100 0514 	add.w	r5, r0, #20
 800682a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800682e:	9301      	str	r3, [sp, #4]
 8006830:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006834:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006838:	3301      	adds	r3, #1
 800683a:	429a      	cmp	r2, r3
 800683c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006840:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006844:	fbb2 f6f3 	udiv	r6, r2, r3
 8006848:	d331      	bcc.n	80068ae <quorem+0x9e>
 800684a:	f04f 0e00 	mov.w	lr, #0
 800684e:	4640      	mov	r0, r8
 8006850:	46ac      	mov	ip, r5
 8006852:	46f2      	mov	sl, lr
 8006854:	f850 2b04 	ldr.w	r2, [r0], #4
 8006858:	b293      	uxth	r3, r2
 800685a:	fb06 e303 	mla	r3, r6, r3, lr
 800685e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006862:	b29b      	uxth	r3, r3
 8006864:	ebaa 0303 	sub.w	r3, sl, r3
 8006868:	f8dc a000 	ldr.w	sl, [ip]
 800686c:	0c12      	lsrs	r2, r2, #16
 800686e:	fa13 f38a 	uxtah	r3, r3, sl
 8006872:	fb06 e202 	mla	r2, r6, r2, lr
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	9b00      	ldr	r3, [sp, #0]
 800687a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800687e:	b292      	uxth	r2, r2
 8006880:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006884:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006888:	f8bd 3000 	ldrh.w	r3, [sp]
 800688c:	4581      	cmp	r9, r0
 800688e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006892:	f84c 3b04 	str.w	r3, [ip], #4
 8006896:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800689a:	d2db      	bcs.n	8006854 <quorem+0x44>
 800689c:	f855 300b 	ldr.w	r3, [r5, fp]
 80068a0:	b92b      	cbnz	r3, 80068ae <quorem+0x9e>
 80068a2:	9b01      	ldr	r3, [sp, #4]
 80068a4:	3b04      	subs	r3, #4
 80068a6:	429d      	cmp	r5, r3
 80068a8:	461a      	mov	r2, r3
 80068aa:	d32e      	bcc.n	800690a <quorem+0xfa>
 80068ac:	613c      	str	r4, [r7, #16]
 80068ae:	4638      	mov	r0, r7
 80068b0:	f001 fc90 	bl	80081d4 <__mcmp>
 80068b4:	2800      	cmp	r0, #0
 80068b6:	db24      	blt.n	8006902 <quorem+0xf2>
 80068b8:	3601      	adds	r6, #1
 80068ba:	4628      	mov	r0, r5
 80068bc:	f04f 0c00 	mov.w	ip, #0
 80068c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80068c4:	f8d0 e000 	ldr.w	lr, [r0]
 80068c8:	b293      	uxth	r3, r2
 80068ca:	ebac 0303 	sub.w	r3, ip, r3
 80068ce:	0c12      	lsrs	r2, r2, #16
 80068d0:	fa13 f38e 	uxtah	r3, r3, lr
 80068d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80068d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068dc:	b29b      	uxth	r3, r3
 80068de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068e2:	45c1      	cmp	r9, r8
 80068e4:	f840 3b04 	str.w	r3, [r0], #4
 80068e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80068ec:	d2e8      	bcs.n	80068c0 <quorem+0xb0>
 80068ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068f6:	b922      	cbnz	r2, 8006902 <quorem+0xf2>
 80068f8:	3b04      	subs	r3, #4
 80068fa:	429d      	cmp	r5, r3
 80068fc:	461a      	mov	r2, r3
 80068fe:	d30a      	bcc.n	8006916 <quorem+0x106>
 8006900:	613c      	str	r4, [r7, #16]
 8006902:	4630      	mov	r0, r6
 8006904:	b003      	add	sp, #12
 8006906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800690a:	6812      	ldr	r2, [r2, #0]
 800690c:	3b04      	subs	r3, #4
 800690e:	2a00      	cmp	r2, #0
 8006910:	d1cc      	bne.n	80068ac <quorem+0x9c>
 8006912:	3c01      	subs	r4, #1
 8006914:	e7c7      	b.n	80068a6 <quorem+0x96>
 8006916:	6812      	ldr	r2, [r2, #0]
 8006918:	3b04      	subs	r3, #4
 800691a:	2a00      	cmp	r2, #0
 800691c:	d1f0      	bne.n	8006900 <quorem+0xf0>
 800691e:	3c01      	subs	r4, #1
 8006920:	e7eb      	b.n	80068fa <quorem+0xea>
 8006922:	2000      	movs	r0, #0
 8006924:	e7ee      	b.n	8006904 <quorem+0xf4>
	...

08006928 <_dtoa_r>:
 8006928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692c:	ed2d 8b04 	vpush	{d8-d9}
 8006930:	ec57 6b10 	vmov	r6, r7, d0
 8006934:	b093      	sub	sp, #76	; 0x4c
 8006936:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006938:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800693c:	9106      	str	r1, [sp, #24]
 800693e:	ee10 aa10 	vmov	sl, s0
 8006942:	4604      	mov	r4, r0
 8006944:	9209      	str	r2, [sp, #36]	; 0x24
 8006946:	930c      	str	r3, [sp, #48]	; 0x30
 8006948:	46bb      	mov	fp, r7
 800694a:	b975      	cbnz	r5, 800696a <_dtoa_r+0x42>
 800694c:	2010      	movs	r0, #16
 800694e:	f001 f94d 	bl	8007bec <malloc>
 8006952:	4602      	mov	r2, r0
 8006954:	6260      	str	r0, [r4, #36]	; 0x24
 8006956:	b920      	cbnz	r0, 8006962 <_dtoa_r+0x3a>
 8006958:	4ba7      	ldr	r3, [pc, #668]	; (8006bf8 <_dtoa_r+0x2d0>)
 800695a:	21ea      	movs	r1, #234	; 0xea
 800695c:	48a7      	ldr	r0, [pc, #668]	; (8006bfc <_dtoa_r+0x2d4>)
 800695e:	f002 f8bd 	bl	8008adc <__assert_func>
 8006962:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006966:	6005      	str	r5, [r0, #0]
 8006968:	60c5      	str	r5, [r0, #12]
 800696a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800696c:	6819      	ldr	r1, [r3, #0]
 800696e:	b151      	cbz	r1, 8006986 <_dtoa_r+0x5e>
 8006970:	685a      	ldr	r2, [r3, #4]
 8006972:	604a      	str	r2, [r1, #4]
 8006974:	2301      	movs	r3, #1
 8006976:	4093      	lsls	r3, r2
 8006978:	608b      	str	r3, [r1, #8]
 800697a:	4620      	mov	r0, r4
 800697c:	f001 f99e 	bl	8007cbc <_Bfree>
 8006980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006982:	2200      	movs	r2, #0
 8006984:	601a      	str	r2, [r3, #0]
 8006986:	1e3b      	subs	r3, r7, #0
 8006988:	bfaa      	itet	ge
 800698a:	2300      	movge	r3, #0
 800698c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006990:	f8c8 3000 	strge.w	r3, [r8]
 8006994:	4b9a      	ldr	r3, [pc, #616]	; (8006c00 <_dtoa_r+0x2d8>)
 8006996:	bfbc      	itt	lt
 8006998:	2201      	movlt	r2, #1
 800699a:	f8c8 2000 	strlt.w	r2, [r8]
 800699e:	ea33 030b 	bics.w	r3, r3, fp
 80069a2:	d11b      	bne.n	80069dc <_dtoa_r+0xb4>
 80069a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80069aa:	6013      	str	r3, [r2, #0]
 80069ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80069b0:	4333      	orrs	r3, r6
 80069b2:	f000 8592 	beq.w	80074da <_dtoa_r+0xbb2>
 80069b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069b8:	b963      	cbnz	r3, 80069d4 <_dtoa_r+0xac>
 80069ba:	4b92      	ldr	r3, [pc, #584]	; (8006c04 <_dtoa_r+0x2dc>)
 80069bc:	e022      	b.n	8006a04 <_dtoa_r+0xdc>
 80069be:	4b92      	ldr	r3, [pc, #584]	; (8006c08 <_dtoa_r+0x2e0>)
 80069c0:	9301      	str	r3, [sp, #4]
 80069c2:	3308      	adds	r3, #8
 80069c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80069c6:	6013      	str	r3, [r2, #0]
 80069c8:	9801      	ldr	r0, [sp, #4]
 80069ca:	b013      	add	sp, #76	; 0x4c
 80069cc:	ecbd 8b04 	vpop	{d8-d9}
 80069d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d4:	4b8b      	ldr	r3, [pc, #556]	; (8006c04 <_dtoa_r+0x2dc>)
 80069d6:	9301      	str	r3, [sp, #4]
 80069d8:	3303      	adds	r3, #3
 80069da:	e7f3      	b.n	80069c4 <_dtoa_r+0x9c>
 80069dc:	2200      	movs	r2, #0
 80069de:	2300      	movs	r3, #0
 80069e0:	4650      	mov	r0, sl
 80069e2:	4659      	mov	r1, fp
 80069e4:	f7fa f878 	bl	8000ad8 <__aeabi_dcmpeq>
 80069e8:	ec4b ab19 	vmov	d9, sl, fp
 80069ec:	4680      	mov	r8, r0
 80069ee:	b158      	cbz	r0, 8006a08 <_dtoa_r+0xe0>
 80069f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069f2:	2301      	movs	r3, #1
 80069f4:	6013      	str	r3, [r2, #0]
 80069f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 856b 	beq.w	80074d4 <_dtoa_r+0xbac>
 80069fe:	4883      	ldr	r0, [pc, #524]	; (8006c0c <_dtoa_r+0x2e4>)
 8006a00:	6018      	str	r0, [r3, #0]
 8006a02:	1e43      	subs	r3, r0, #1
 8006a04:	9301      	str	r3, [sp, #4]
 8006a06:	e7df      	b.n	80069c8 <_dtoa_r+0xa0>
 8006a08:	ec4b ab10 	vmov	d0, sl, fp
 8006a0c:	aa10      	add	r2, sp, #64	; 0x40
 8006a0e:	a911      	add	r1, sp, #68	; 0x44
 8006a10:	4620      	mov	r0, r4
 8006a12:	f001 fd01 	bl	8008418 <__d2b>
 8006a16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006a1a:	ee08 0a10 	vmov	s16, r0
 8006a1e:	2d00      	cmp	r5, #0
 8006a20:	f000 8084 	beq.w	8006b2c <_dtoa_r+0x204>
 8006a24:	ee19 3a90 	vmov	r3, s19
 8006a28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006a30:	4656      	mov	r6, sl
 8006a32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006a36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006a3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006a3e:	4b74      	ldr	r3, [pc, #464]	; (8006c10 <_dtoa_r+0x2e8>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	4630      	mov	r0, r6
 8006a44:	4639      	mov	r1, r7
 8006a46:	f7f9 fc27 	bl	8000298 <__aeabi_dsub>
 8006a4a:	a365      	add	r3, pc, #404	; (adr r3, 8006be0 <_dtoa_r+0x2b8>)
 8006a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a50:	f7f9 fdda 	bl	8000608 <__aeabi_dmul>
 8006a54:	a364      	add	r3, pc, #400	; (adr r3, 8006be8 <_dtoa_r+0x2c0>)
 8006a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5a:	f7f9 fc1f 	bl	800029c <__adddf3>
 8006a5e:	4606      	mov	r6, r0
 8006a60:	4628      	mov	r0, r5
 8006a62:	460f      	mov	r7, r1
 8006a64:	f7f9 fd66 	bl	8000534 <__aeabi_i2d>
 8006a68:	a361      	add	r3, pc, #388	; (adr r3, 8006bf0 <_dtoa_r+0x2c8>)
 8006a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6e:	f7f9 fdcb 	bl	8000608 <__aeabi_dmul>
 8006a72:	4602      	mov	r2, r0
 8006a74:	460b      	mov	r3, r1
 8006a76:	4630      	mov	r0, r6
 8006a78:	4639      	mov	r1, r7
 8006a7a:	f7f9 fc0f 	bl	800029c <__adddf3>
 8006a7e:	4606      	mov	r6, r0
 8006a80:	460f      	mov	r7, r1
 8006a82:	f7fa f871 	bl	8000b68 <__aeabi_d2iz>
 8006a86:	2200      	movs	r2, #0
 8006a88:	9000      	str	r0, [sp, #0]
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	4639      	mov	r1, r7
 8006a90:	f7fa f82c 	bl	8000aec <__aeabi_dcmplt>
 8006a94:	b150      	cbz	r0, 8006aac <_dtoa_r+0x184>
 8006a96:	9800      	ldr	r0, [sp, #0]
 8006a98:	f7f9 fd4c 	bl	8000534 <__aeabi_i2d>
 8006a9c:	4632      	mov	r2, r6
 8006a9e:	463b      	mov	r3, r7
 8006aa0:	f7fa f81a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006aa4:	b910      	cbnz	r0, 8006aac <_dtoa_r+0x184>
 8006aa6:	9b00      	ldr	r3, [sp, #0]
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	9b00      	ldr	r3, [sp, #0]
 8006aae:	2b16      	cmp	r3, #22
 8006ab0:	d85a      	bhi.n	8006b68 <_dtoa_r+0x240>
 8006ab2:	9a00      	ldr	r2, [sp, #0]
 8006ab4:	4b57      	ldr	r3, [pc, #348]	; (8006c14 <_dtoa_r+0x2ec>)
 8006ab6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abe:	ec51 0b19 	vmov	r0, r1, d9
 8006ac2:	f7fa f813 	bl	8000aec <__aeabi_dcmplt>
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	d050      	beq.n	8006b6c <_dtoa_r+0x244>
 8006aca:	9b00      	ldr	r3, [sp, #0]
 8006acc:	3b01      	subs	r3, #1
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ad4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ad6:	1b5d      	subs	r5, r3, r5
 8006ad8:	1e6b      	subs	r3, r5, #1
 8006ada:	9305      	str	r3, [sp, #20]
 8006adc:	bf45      	ittet	mi
 8006ade:	f1c5 0301 	rsbmi	r3, r5, #1
 8006ae2:	9304      	strmi	r3, [sp, #16]
 8006ae4:	2300      	movpl	r3, #0
 8006ae6:	2300      	movmi	r3, #0
 8006ae8:	bf4c      	ite	mi
 8006aea:	9305      	strmi	r3, [sp, #20]
 8006aec:	9304      	strpl	r3, [sp, #16]
 8006aee:	9b00      	ldr	r3, [sp, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	db3d      	blt.n	8006b70 <_dtoa_r+0x248>
 8006af4:	9b05      	ldr	r3, [sp, #20]
 8006af6:	9a00      	ldr	r2, [sp, #0]
 8006af8:	920a      	str	r2, [sp, #40]	; 0x28
 8006afa:	4413      	add	r3, r2
 8006afc:	9305      	str	r3, [sp, #20]
 8006afe:	2300      	movs	r3, #0
 8006b00:	9307      	str	r3, [sp, #28]
 8006b02:	9b06      	ldr	r3, [sp, #24]
 8006b04:	2b09      	cmp	r3, #9
 8006b06:	f200 8089 	bhi.w	8006c1c <_dtoa_r+0x2f4>
 8006b0a:	2b05      	cmp	r3, #5
 8006b0c:	bfc4      	itt	gt
 8006b0e:	3b04      	subgt	r3, #4
 8006b10:	9306      	strgt	r3, [sp, #24]
 8006b12:	9b06      	ldr	r3, [sp, #24]
 8006b14:	f1a3 0302 	sub.w	r3, r3, #2
 8006b18:	bfcc      	ite	gt
 8006b1a:	2500      	movgt	r5, #0
 8006b1c:	2501      	movle	r5, #1
 8006b1e:	2b03      	cmp	r3, #3
 8006b20:	f200 8087 	bhi.w	8006c32 <_dtoa_r+0x30a>
 8006b24:	e8df f003 	tbb	[pc, r3]
 8006b28:	59383a2d 	.word	0x59383a2d
 8006b2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006b30:	441d      	add	r5, r3
 8006b32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006b36:	2b20      	cmp	r3, #32
 8006b38:	bfc1      	itttt	gt
 8006b3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006b3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006b42:	fa0b f303 	lslgt.w	r3, fp, r3
 8006b46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006b4a:	bfda      	itte	le
 8006b4c:	f1c3 0320 	rsble	r3, r3, #32
 8006b50:	fa06 f003 	lslle.w	r0, r6, r3
 8006b54:	4318      	orrgt	r0, r3
 8006b56:	f7f9 fcdd 	bl	8000514 <__aeabi_ui2d>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	4606      	mov	r6, r0
 8006b5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006b62:	3d01      	subs	r5, #1
 8006b64:	930e      	str	r3, [sp, #56]	; 0x38
 8006b66:	e76a      	b.n	8006a3e <_dtoa_r+0x116>
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e7b2      	b.n	8006ad2 <_dtoa_r+0x1aa>
 8006b6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8006b6e:	e7b1      	b.n	8006ad4 <_dtoa_r+0x1ac>
 8006b70:	9b04      	ldr	r3, [sp, #16]
 8006b72:	9a00      	ldr	r2, [sp, #0]
 8006b74:	1a9b      	subs	r3, r3, r2
 8006b76:	9304      	str	r3, [sp, #16]
 8006b78:	4253      	negs	r3, r2
 8006b7a:	9307      	str	r3, [sp, #28]
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	930a      	str	r3, [sp, #40]	; 0x28
 8006b80:	e7bf      	b.n	8006b02 <_dtoa_r+0x1da>
 8006b82:	2300      	movs	r3, #0
 8006b84:	9308      	str	r3, [sp, #32]
 8006b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	dc55      	bgt.n	8006c38 <_dtoa_r+0x310>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006b92:	461a      	mov	r2, r3
 8006b94:	9209      	str	r2, [sp, #36]	; 0x24
 8006b96:	e00c      	b.n	8006bb2 <_dtoa_r+0x28a>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e7f3      	b.n	8006b84 <_dtoa_r+0x25c>
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ba0:	9308      	str	r3, [sp, #32]
 8006ba2:	9b00      	ldr	r3, [sp, #0]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	9302      	str	r3, [sp, #8]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	9303      	str	r3, [sp, #12]
 8006bae:	bfb8      	it	lt
 8006bb0:	2301      	movlt	r3, #1
 8006bb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	6042      	str	r2, [r0, #4]
 8006bb8:	2204      	movs	r2, #4
 8006bba:	f102 0614 	add.w	r6, r2, #20
 8006bbe:	429e      	cmp	r6, r3
 8006bc0:	6841      	ldr	r1, [r0, #4]
 8006bc2:	d93d      	bls.n	8006c40 <_dtoa_r+0x318>
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f001 f839 	bl	8007c3c <_Balloc>
 8006bca:	9001      	str	r0, [sp, #4]
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	d13b      	bne.n	8006c48 <_dtoa_r+0x320>
 8006bd0:	4b11      	ldr	r3, [pc, #68]	; (8006c18 <_dtoa_r+0x2f0>)
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006bd8:	e6c0      	b.n	800695c <_dtoa_r+0x34>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e7df      	b.n	8006b9e <_dtoa_r+0x276>
 8006bde:	bf00      	nop
 8006be0:	636f4361 	.word	0x636f4361
 8006be4:	3fd287a7 	.word	0x3fd287a7
 8006be8:	8b60c8b3 	.word	0x8b60c8b3
 8006bec:	3fc68a28 	.word	0x3fc68a28
 8006bf0:	509f79fb 	.word	0x509f79fb
 8006bf4:	3fd34413 	.word	0x3fd34413
 8006bf8:	0800a596 	.word	0x0800a596
 8006bfc:	0800a5ad 	.word	0x0800a5ad
 8006c00:	7ff00000 	.word	0x7ff00000
 8006c04:	0800a592 	.word	0x0800a592
 8006c08:	0800a589 	.word	0x0800a589
 8006c0c:	0800a409 	.word	0x0800a409
 8006c10:	3ff80000 	.word	0x3ff80000
 8006c14:	0800a718 	.word	0x0800a718
 8006c18:	0800a608 	.word	0x0800a608
 8006c1c:	2501      	movs	r5, #1
 8006c1e:	2300      	movs	r3, #0
 8006c20:	9306      	str	r3, [sp, #24]
 8006c22:	9508      	str	r5, [sp, #32]
 8006c24:	f04f 33ff 	mov.w	r3, #4294967295
 8006c28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	2312      	movs	r3, #18
 8006c30:	e7b0      	b.n	8006b94 <_dtoa_r+0x26c>
 8006c32:	2301      	movs	r3, #1
 8006c34:	9308      	str	r3, [sp, #32]
 8006c36:	e7f5      	b.n	8006c24 <_dtoa_r+0x2fc>
 8006c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006c3e:	e7b8      	b.n	8006bb2 <_dtoa_r+0x28a>
 8006c40:	3101      	adds	r1, #1
 8006c42:	6041      	str	r1, [r0, #4]
 8006c44:	0052      	lsls	r2, r2, #1
 8006c46:	e7b8      	b.n	8006bba <_dtoa_r+0x292>
 8006c48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c4a:	9a01      	ldr	r2, [sp, #4]
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	9b03      	ldr	r3, [sp, #12]
 8006c50:	2b0e      	cmp	r3, #14
 8006c52:	f200 809d 	bhi.w	8006d90 <_dtoa_r+0x468>
 8006c56:	2d00      	cmp	r5, #0
 8006c58:	f000 809a 	beq.w	8006d90 <_dtoa_r+0x468>
 8006c5c:	9b00      	ldr	r3, [sp, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	dd32      	ble.n	8006cc8 <_dtoa_r+0x3a0>
 8006c62:	4ab7      	ldr	r2, [pc, #732]	; (8006f40 <_dtoa_r+0x618>)
 8006c64:	f003 030f 	and.w	r3, r3, #15
 8006c68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006c6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c70:	9b00      	ldr	r3, [sp, #0]
 8006c72:	05d8      	lsls	r0, r3, #23
 8006c74:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006c78:	d516      	bpl.n	8006ca8 <_dtoa_r+0x380>
 8006c7a:	4bb2      	ldr	r3, [pc, #712]	; (8006f44 <_dtoa_r+0x61c>)
 8006c7c:	ec51 0b19 	vmov	r0, r1, d9
 8006c80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c84:	f7f9 fdea 	bl	800085c <__aeabi_ddiv>
 8006c88:	f007 070f 	and.w	r7, r7, #15
 8006c8c:	4682      	mov	sl, r0
 8006c8e:	468b      	mov	fp, r1
 8006c90:	2503      	movs	r5, #3
 8006c92:	4eac      	ldr	r6, [pc, #688]	; (8006f44 <_dtoa_r+0x61c>)
 8006c94:	b957      	cbnz	r7, 8006cac <_dtoa_r+0x384>
 8006c96:	4642      	mov	r2, r8
 8006c98:	464b      	mov	r3, r9
 8006c9a:	4650      	mov	r0, sl
 8006c9c:	4659      	mov	r1, fp
 8006c9e:	f7f9 fddd 	bl	800085c <__aeabi_ddiv>
 8006ca2:	4682      	mov	sl, r0
 8006ca4:	468b      	mov	fp, r1
 8006ca6:	e028      	b.n	8006cfa <_dtoa_r+0x3d2>
 8006ca8:	2502      	movs	r5, #2
 8006caa:	e7f2      	b.n	8006c92 <_dtoa_r+0x36a>
 8006cac:	07f9      	lsls	r1, r7, #31
 8006cae:	d508      	bpl.n	8006cc2 <_dtoa_r+0x39a>
 8006cb0:	4640      	mov	r0, r8
 8006cb2:	4649      	mov	r1, r9
 8006cb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006cb8:	f7f9 fca6 	bl	8000608 <__aeabi_dmul>
 8006cbc:	3501      	adds	r5, #1
 8006cbe:	4680      	mov	r8, r0
 8006cc0:	4689      	mov	r9, r1
 8006cc2:	107f      	asrs	r7, r7, #1
 8006cc4:	3608      	adds	r6, #8
 8006cc6:	e7e5      	b.n	8006c94 <_dtoa_r+0x36c>
 8006cc8:	f000 809b 	beq.w	8006e02 <_dtoa_r+0x4da>
 8006ccc:	9b00      	ldr	r3, [sp, #0]
 8006cce:	4f9d      	ldr	r7, [pc, #628]	; (8006f44 <_dtoa_r+0x61c>)
 8006cd0:	425e      	negs	r6, r3
 8006cd2:	4b9b      	ldr	r3, [pc, #620]	; (8006f40 <_dtoa_r+0x618>)
 8006cd4:	f006 020f 	and.w	r2, r6, #15
 8006cd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce0:	ec51 0b19 	vmov	r0, r1, d9
 8006ce4:	f7f9 fc90 	bl	8000608 <__aeabi_dmul>
 8006ce8:	1136      	asrs	r6, r6, #4
 8006cea:	4682      	mov	sl, r0
 8006cec:	468b      	mov	fp, r1
 8006cee:	2300      	movs	r3, #0
 8006cf0:	2502      	movs	r5, #2
 8006cf2:	2e00      	cmp	r6, #0
 8006cf4:	d17a      	bne.n	8006dec <_dtoa_r+0x4c4>
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1d3      	bne.n	8006ca2 <_dtoa_r+0x37a>
 8006cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 8082 	beq.w	8006e06 <_dtoa_r+0x4de>
 8006d02:	4b91      	ldr	r3, [pc, #580]	; (8006f48 <_dtoa_r+0x620>)
 8006d04:	2200      	movs	r2, #0
 8006d06:	4650      	mov	r0, sl
 8006d08:	4659      	mov	r1, fp
 8006d0a:	f7f9 feef 	bl	8000aec <__aeabi_dcmplt>
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	d079      	beq.n	8006e06 <_dtoa_r+0x4de>
 8006d12:	9b03      	ldr	r3, [sp, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d076      	beq.n	8006e06 <_dtoa_r+0x4de>
 8006d18:	9b02      	ldr	r3, [sp, #8]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	dd36      	ble.n	8006d8c <_dtoa_r+0x464>
 8006d1e:	9b00      	ldr	r3, [sp, #0]
 8006d20:	4650      	mov	r0, sl
 8006d22:	4659      	mov	r1, fp
 8006d24:	1e5f      	subs	r7, r3, #1
 8006d26:	2200      	movs	r2, #0
 8006d28:	4b88      	ldr	r3, [pc, #544]	; (8006f4c <_dtoa_r+0x624>)
 8006d2a:	f7f9 fc6d 	bl	8000608 <__aeabi_dmul>
 8006d2e:	9e02      	ldr	r6, [sp, #8]
 8006d30:	4682      	mov	sl, r0
 8006d32:	468b      	mov	fp, r1
 8006d34:	3501      	adds	r5, #1
 8006d36:	4628      	mov	r0, r5
 8006d38:	f7f9 fbfc 	bl	8000534 <__aeabi_i2d>
 8006d3c:	4652      	mov	r2, sl
 8006d3e:	465b      	mov	r3, fp
 8006d40:	f7f9 fc62 	bl	8000608 <__aeabi_dmul>
 8006d44:	4b82      	ldr	r3, [pc, #520]	; (8006f50 <_dtoa_r+0x628>)
 8006d46:	2200      	movs	r2, #0
 8006d48:	f7f9 faa8 	bl	800029c <__adddf3>
 8006d4c:	46d0      	mov	r8, sl
 8006d4e:	46d9      	mov	r9, fp
 8006d50:	4682      	mov	sl, r0
 8006d52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006d56:	2e00      	cmp	r6, #0
 8006d58:	d158      	bne.n	8006e0c <_dtoa_r+0x4e4>
 8006d5a:	4b7e      	ldr	r3, [pc, #504]	; (8006f54 <_dtoa_r+0x62c>)
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	4640      	mov	r0, r8
 8006d60:	4649      	mov	r1, r9
 8006d62:	f7f9 fa99 	bl	8000298 <__aeabi_dsub>
 8006d66:	4652      	mov	r2, sl
 8006d68:	465b      	mov	r3, fp
 8006d6a:	4680      	mov	r8, r0
 8006d6c:	4689      	mov	r9, r1
 8006d6e:	f7f9 fedb 	bl	8000b28 <__aeabi_dcmpgt>
 8006d72:	2800      	cmp	r0, #0
 8006d74:	f040 8295 	bne.w	80072a2 <_dtoa_r+0x97a>
 8006d78:	4652      	mov	r2, sl
 8006d7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006d7e:	4640      	mov	r0, r8
 8006d80:	4649      	mov	r1, r9
 8006d82:	f7f9 feb3 	bl	8000aec <__aeabi_dcmplt>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	f040 8289 	bne.w	800729e <_dtoa_r+0x976>
 8006d8c:	ec5b ab19 	vmov	sl, fp, d9
 8006d90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f2c0 8148 	blt.w	8007028 <_dtoa_r+0x700>
 8006d98:	9a00      	ldr	r2, [sp, #0]
 8006d9a:	2a0e      	cmp	r2, #14
 8006d9c:	f300 8144 	bgt.w	8007028 <_dtoa_r+0x700>
 8006da0:	4b67      	ldr	r3, [pc, #412]	; (8006f40 <_dtoa_r+0x618>)
 8006da2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006da6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f280 80d5 	bge.w	8006f5c <_dtoa_r+0x634>
 8006db2:	9b03      	ldr	r3, [sp, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f300 80d1 	bgt.w	8006f5c <_dtoa_r+0x634>
 8006dba:	f040 826f 	bne.w	800729c <_dtoa_r+0x974>
 8006dbe:	4b65      	ldr	r3, [pc, #404]	; (8006f54 <_dtoa_r+0x62c>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	4640      	mov	r0, r8
 8006dc4:	4649      	mov	r1, r9
 8006dc6:	f7f9 fc1f 	bl	8000608 <__aeabi_dmul>
 8006dca:	4652      	mov	r2, sl
 8006dcc:	465b      	mov	r3, fp
 8006dce:	f7f9 fea1 	bl	8000b14 <__aeabi_dcmpge>
 8006dd2:	9e03      	ldr	r6, [sp, #12]
 8006dd4:	4637      	mov	r7, r6
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	f040 8245 	bne.w	8007266 <_dtoa_r+0x93e>
 8006ddc:	9d01      	ldr	r5, [sp, #4]
 8006dde:	2331      	movs	r3, #49	; 0x31
 8006de0:	f805 3b01 	strb.w	r3, [r5], #1
 8006de4:	9b00      	ldr	r3, [sp, #0]
 8006de6:	3301      	adds	r3, #1
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	e240      	b.n	800726e <_dtoa_r+0x946>
 8006dec:	07f2      	lsls	r2, r6, #31
 8006dee:	d505      	bpl.n	8006dfc <_dtoa_r+0x4d4>
 8006df0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006df4:	f7f9 fc08 	bl	8000608 <__aeabi_dmul>
 8006df8:	3501      	adds	r5, #1
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	1076      	asrs	r6, r6, #1
 8006dfe:	3708      	adds	r7, #8
 8006e00:	e777      	b.n	8006cf2 <_dtoa_r+0x3ca>
 8006e02:	2502      	movs	r5, #2
 8006e04:	e779      	b.n	8006cfa <_dtoa_r+0x3d2>
 8006e06:	9f00      	ldr	r7, [sp, #0]
 8006e08:	9e03      	ldr	r6, [sp, #12]
 8006e0a:	e794      	b.n	8006d36 <_dtoa_r+0x40e>
 8006e0c:	9901      	ldr	r1, [sp, #4]
 8006e0e:	4b4c      	ldr	r3, [pc, #304]	; (8006f40 <_dtoa_r+0x618>)
 8006e10:	4431      	add	r1, r6
 8006e12:	910d      	str	r1, [sp, #52]	; 0x34
 8006e14:	9908      	ldr	r1, [sp, #32]
 8006e16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006e1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e1e:	2900      	cmp	r1, #0
 8006e20:	d043      	beq.n	8006eaa <_dtoa_r+0x582>
 8006e22:	494d      	ldr	r1, [pc, #308]	; (8006f58 <_dtoa_r+0x630>)
 8006e24:	2000      	movs	r0, #0
 8006e26:	f7f9 fd19 	bl	800085c <__aeabi_ddiv>
 8006e2a:	4652      	mov	r2, sl
 8006e2c:	465b      	mov	r3, fp
 8006e2e:	f7f9 fa33 	bl	8000298 <__aeabi_dsub>
 8006e32:	9d01      	ldr	r5, [sp, #4]
 8006e34:	4682      	mov	sl, r0
 8006e36:	468b      	mov	fp, r1
 8006e38:	4649      	mov	r1, r9
 8006e3a:	4640      	mov	r0, r8
 8006e3c:	f7f9 fe94 	bl	8000b68 <__aeabi_d2iz>
 8006e40:	4606      	mov	r6, r0
 8006e42:	f7f9 fb77 	bl	8000534 <__aeabi_i2d>
 8006e46:	4602      	mov	r2, r0
 8006e48:	460b      	mov	r3, r1
 8006e4a:	4640      	mov	r0, r8
 8006e4c:	4649      	mov	r1, r9
 8006e4e:	f7f9 fa23 	bl	8000298 <__aeabi_dsub>
 8006e52:	3630      	adds	r6, #48	; 0x30
 8006e54:	f805 6b01 	strb.w	r6, [r5], #1
 8006e58:	4652      	mov	r2, sl
 8006e5a:	465b      	mov	r3, fp
 8006e5c:	4680      	mov	r8, r0
 8006e5e:	4689      	mov	r9, r1
 8006e60:	f7f9 fe44 	bl	8000aec <__aeabi_dcmplt>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	d163      	bne.n	8006f30 <_dtoa_r+0x608>
 8006e68:	4642      	mov	r2, r8
 8006e6a:	464b      	mov	r3, r9
 8006e6c:	4936      	ldr	r1, [pc, #216]	; (8006f48 <_dtoa_r+0x620>)
 8006e6e:	2000      	movs	r0, #0
 8006e70:	f7f9 fa12 	bl	8000298 <__aeabi_dsub>
 8006e74:	4652      	mov	r2, sl
 8006e76:	465b      	mov	r3, fp
 8006e78:	f7f9 fe38 	bl	8000aec <__aeabi_dcmplt>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	f040 80b5 	bne.w	8006fec <_dtoa_r+0x6c4>
 8006e82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e84:	429d      	cmp	r5, r3
 8006e86:	d081      	beq.n	8006d8c <_dtoa_r+0x464>
 8006e88:	4b30      	ldr	r3, [pc, #192]	; (8006f4c <_dtoa_r+0x624>)
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	4650      	mov	r0, sl
 8006e8e:	4659      	mov	r1, fp
 8006e90:	f7f9 fbba 	bl	8000608 <__aeabi_dmul>
 8006e94:	4b2d      	ldr	r3, [pc, #180]	; (8006f4c <_dtoa_r+0x624>)
 8006e96:	4682      	mov	sl, r0
 8006e98:	468b      	mov	fp, r1
 8006e9a:	4640      	mov	r0, r8
 8006e9c:	4649      	mov	r1, r9
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f7f9 fbb2 	bl	8000608 <__aeabi_dmul>
 8006ea4:	4680      	mov	r8, r0
 8006ea6:	4689      	mov	r9, r1
 8006ea8:	e7c6      	b.n	8006e38 <_dtoa_r+0x510>
 8006eaa:	4650      	mov	r0, sl
 8006eac:	4659      	mov	r1, fp
 8006eae:	f7f9 fbab 	bl	8000608 <__aeabi_dmul>
 8006eb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006eb4:	9d01      	ldr	r5, [sp, #4]
 8006eb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006eb8:	4682      	mov	sl, r0
 8006eba:	468b      	mov	fp, r1
 8006ebc:	4649      	mov	r1, r9
 8006ebe:	4640      	mov	r0, r8
 8006ec0:	f7f9 fe52 	bl	8000b68 <__aeabi_d2iz>
 8006ec4:	4606      	mov	r6, r0
 8006ec6:	f7f9 fb35 	bl	8000534 <__aeabi_i2d>
 8006eca:	3630      	adds	r6, #48	; 0x30
 8006ecc:	4602      	mov	r2, r0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4640      	mov	r0, r8
 8006ed2:	4649      	mov	r1, r9
 8006ed4:	f7f9 f9e0 	bl	8000298 <__aeabi_dsub>
 8006ed8:	f805 6b01 	strb.w	r6, [r5], #1
 8006edc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ede:	429d      	cmp	r5, r3
 8006ee0:	4680      	mov	r8, r0
 8006ee2:	4689      	mov	r9, r1
 8006ee4:	f04f 0200 	mov.w	r2, #0
 8006ee8:	d124      	bne.n	8006f34 <_dtoa_r+0x60c>
 8006eea:	4b1b      	ldr	r3, [pc, #108]	; (8006f58 <_dtoa_r+0x630>)
 8006eec:	4650      	mov	r0, sl
 8006eee:	4659      	mov	r1, fp
 8006ef0:	f7f9 f9d4 	bl	800029c <__adddf3>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	4640      	mov	r0, r8
 8006efa:	4649      	mov	r1, r9
 8006efc:	f7f9 fe14 	bl	8000b28 <__aeabi_dcmpgt>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	d173      	bne.n	8006fec <_dtoa_r+0x6c4>
 8006f04:	4652      	mov	r2, sl
 8006f06:	465b      	mov	r3, fp
 8006f08:	4913      	ldr	r1, [pc, #76]	; (8006f58 <_dtoa_r+0x630>)
 8006f0a:	2000      	movs	r0, #0
 8006f0c:	f7f9 f9c4 	bl	8000298 <__aeabi_dsub>
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	4640      	mov	r0, r8
 8006f16:	4649      	mov	r1, r9
 8006f18:	f7f9 fde8 	bl	8000aec <__aeabi_dcmplt>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	f43f af35 	beq.w	8006d8c <_dtoa_r+0x464>
 8006f22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006f24:	1e6b      	subs	r3, r5, #1
 8006f26:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f2c:	2b30      	cmp	r3, #48	; 0x30
 8006f2e:	d0f8      	beq.n	8006f22 <_dtoa_r+0x5fa>
 8006f30:	9700      	str	r7, [sp, #0]
 8006f32:	e049      	b.n	8006fc8 <_dtoa_r+0x6a0>
 8006f34:	4b05      	ldr	r3, [pc, #20]	; (8006f4c <_dtoa_r+0x624>)
 8006f36:	f7f9 fb67 	bl	8000608 <__aeabi_dmul>
 8006f3a:	4680      	mov	r8, r0
 8006f3c:	4689      	mov	r9, r1
 8006f3e:	e7bd      	b.n	8006ebc <_dtoa_r+0x594>
 8006f40:	0800a718 	.word	0x0800a718
 8006f44:	0800a6f0 	.word	0x0800a6f0
 8006f48:	3ff00000 	.word	0x3ff00000
 8006f4c:	40240000 	.word	0x40240000
 8006f50:	401c0000 	.word	0x401c0000
 8006f54:	40140000 	.word	0x40140000
 8006f58:	3fe00000 	.word	0x3fe00000
 8006f5c:	9d01      	ldr	r5, [sp, #4]
 8006f5e:	4656      	mov	r6, sl
 8006f60:	465f      	mov	r7, fp
 8006f62:	4642      	mov	r2, r8
 8006f64:	464b      	mov	r3, r9
 8006f66:	4630      	mov	r0, r6
 8006f68:	4639      	mov	r1, r7
 8006f6a:	f7f9 fc77 	bl	800085c <__aeabi_ddiv>
 8006f6e:	f7f9 fdfb 	bl	8000b68 <__aeabi_d2iz>
 8006f72:	4682      	mov	sl, r0
 8006f74:	f7f9 fade 	bl	8000534 <__aeabi_i2d>
 8006f78:	4642      	mov	r2, r8
 8006f7a:	464b      	mov	r3, r9
 8006f7c:	f7f9 fb44 	bl	8000608 <__aeabi_dmul>
 8006f80:	4602      	mov	r2, r0
 8006f82:	460b      	mov	r3, r1
 8006f84:	4630      	mov	r0, r6
 8006f86:	4639      	mov	r1, r7
 8006f88:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006f8c:	f7f9 f984 	bl	8000298 <__aeabi_dsub>
 8006f90:	f805 6b01 	strb.w	r6, [r5], #1
 8006f94:	9e01      	ldr	r6, [sp, #4]
 8006f96:	9f03      	ldr	r7, [sp, #12]
 8006f98:	1bae      	subs	r6, r5, r6
 8006f9a:	42b7      	cmp	r7, r6
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	d135      	bne.n	800700e <_dtoa_r+0x6e6>
 8006fa2:	f7f9 f97b 	bl	800029c <__adddf3>
 8006fa6:	4642      	mov	r2, r8
 8006fa8:	464b      	mov	r3, r9
 8006faa:	4606      	mov	r6, r0
 8006fac:	460f      	mov	r7, r1
 8006fae:	f7f9 fdbb 	bl	8000b28 <__aeabi_dcmpgt>
 8006fb2:	b9d0      	cbnz	r0, 8006fea <_dtoa_r+0x6c2>
 8006fb4:	4642      	mov	r2, r8
 8006fb6:	464b      	mov	r3, r9
 8006fb8:	4630      	mov	r0, r6
 8006fba:	4639      	mov	r1, r7
 8006fbc:	f7f9 fd8c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fc0:	b110      	cbz	r0, 8006fc8 <_dtoa_r+0x6a0>
 8006fc2:	f01a 0f01 	tst.w	sl, #1
 8006fc6:	d110      	bne.n	8006fea <_dtoa_r+0x6c2>
 8006fc8:	4620      	mov	r0, r4
 8006fca:	ee18 1a10 	vmov	r1, s16
 8006fce:	f000 fe75 	bl	8007cbc <_Bfree>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	9800      	ldr	r0, [sp, #0]
 8006fd6:	702b      	strb	r3, [r5, #0]
 8006fd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fda:	3001      	adds	r0, #1
 8006fdc:	6018      	str	r0, [r3, #0]
 8006fde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f43f acf1 	beq.w	80069c8 <_dtoa_r+0xa0>
 8006fe6:	601d      	str	r5, [r3, #0]
 8006fe8:	e4ee      	b.n	80069c8 <_dtoa_r+0xa0>
 8006fea:	9f00      	ldr	r7, [sp, #0]
 8006fec:	462b      	mov	r3, r5
 8006fee:	461d      	mov	r5, r3
 8006ff0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ff4:	2a39      	cmp	r2, #57	; 0x39
 8006ff6:	d106      	bne.n	8007006 <_dtoa_r+0x6de>
 8006ff8:	9a01      	ldr	r2, [sp, #4]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d1f7      	bne.n	8006fee <_dtoa_r+0x6c6>
 8006ffe:	9901      	ldr	r1, [sp, #4]
 8007000:	2230      	movs	r2, #48	; 0x30
 8007002:	3701      	adds	r7, #1
 8007004:	700a      	strb	r2, [r1, #0]
 8007006:	781a      	ldrb	r2, [r3, #0]
 8007008:	3201      	adds	r2, #1
 800700a:	701a      	strb	r2, [r3, #0]
 800700c:	e790      	b.n	8006f30 <_dtoa_r+0x608>
 800700e:	4ba6      	ldr	r3, [pc, #664]	; (80072a8 <_dtoa_r+0x980>)
 8007010:	2200      	movs	r2, #0
 8007012:	f7f9 faf9 	bl	8000608 <__aeabi_dmul>
 8007016:	2200      	movs	r2, #0
 8007018:	2300      	movs	r3, #0
 800701a:	4606      	mov	r6, r0
 800701c:	460f      	mov	r7, r1
 800701e:	f7f9 fd5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007022:	2800      	cmp	r0, #0
 8007024:	d09d      	beq.n	8006f62 <_dtoa_r+0x63a>
 8007026:	e7cf      	b.n	8006fc8 <_dtoa_r+0x6a0>
 8007028:	9a08      	ldr	r2, [sp, #32]
 800702a:	2a00      	cmp	r2, #0
 800702c:	f000 80d7 	beq.w	80071de <_dtoa_r+0x8b6>
 8007030:	9a06      	ldr	r2, [sp, #24]
 8007032:	2a01      	cmp	r2, #1
 8007034:	f300 80ba 	bgt.w	80071ac <_dtoa_r+0x884>
 8007038:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800703a:	2a00      	cmp	r2, #0
 800703c:	f000 80b2 	beq.w	80071a4 <_dtoa_r+0x87c>
 8007040:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007044:	9e07      	ldr	r6, [sp, #28]
 8007046:	9d04      	ldr	r5, [sp, #16]
 8007048:	9a04      	ldr	r2, [sp, #16]
 800704a:	441a      	add	r2, r3
 800704c:	9204      	str	r2, [sp, #16]
 800704e:	9a05      	ldr	r2, [sp, #20]
 8007050:	2101      	movs	r1, #1
 8007052:	441a      	add	r2, r3
 8007054:	4620      	mov	r0, r4
 8007056:	9205      	str	r2, [sp, #20]
 8007058:	f000 ff32 	bl	8007ec0 <__i2b>
 800705c:	4607      	mov	r7, r0
 800705e:	2d00      	cmp	r5, #0
 8007060:	dd0c      	ble.n	800707c <_dtoa_r+0x754>
 8007062:	9b05      	ldr	r3, [sp, #20]
 8007064:	2b00      	cmp	r3, #0
 8007066:	dd09      	ble.n	800707c <_dtoa_r+0x754>
 8007068:	42ab      	cmp	r3, r5
 800706a:	9a04      	ldr	r2, [sp, #16]
 800706c:	bfa8      	it	ge
 800706e:	462b      	movge	r3, r5
 8007070:	1ad2      	subs	r2, r2, r3
 8007072:	9204      	str	r2, [sp, #16]
 8007074:	9a05      	ldr	r2, [sp, #20]
 8007076:	1aed      	subs	r5, r5, r3
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	9305      	str	r3, [sp, #20]
 800707c:	9b07      	ldr	r3, [sp, #28]
 800707e:	b31b      	cbz	r3, 80070c8 <_dtoa_r+0x7a0>
 8007080:	9b08      	ldr	r3, [sp, #32]
 8007082:	2b00      	cmp	r3, #0
 8007084:	f000 80af 	beq.w	80071e6 <_dtoa_r+0x8be>
 8007088:	2e00      	cmp	r6, #0
 800708a:	dd13      	ble.n	80070b4 <_dtoa_r+0x78c>
 800708c:	4639      	mov	r1, r7
 800708e:	4632      	mov	r2, r6
 8007090:	4620      	mov	r0, r4
 8007092:	f000 ffd5 	bl	8008040 <__pow5mult>
 8007096:	ee18 2a10 	vmov	r2, s16
 800709a:	4601      	mov	r1, r0
 800709c:	4607      	mov	r7, r0
 800709e:	4620      	mov	r0, r4
 80070a0:	f000 ff24 	bl	8007eec <__multiply>
 80070a4:	ee18 1a10 	vmov	r1, s16
 80070a8:	4680      	mov	r8, r0
 80070aa:	4620      	mov	r0, r4
 80070ac:	f000 fe06 	bl	8007cbc <_Bfree>
 80070b0:	ee08 8a10 	vmov	s16, r8
 80070b4:	9b07      	ldr	r3, [sp, #28]
 80070b6:	1b9a      	subs	r2, r3, r6
 80070b8:	d006      	beq.n	80070c8 <_dtoa_r+0x7a0>
 80070ba:	ee18 1a10 	vmov	r1, s16
 80070be:	4620      	mov	r0, r4
 80070c0:	f000 ffbe 	bl	8008040 <__pow5mult>
 80070c4:	ee08 0a10 	vmov	s16, r0
 80070c8:	2101      	movs	r1, #1
 80070ca:	4620      	mov	r0, r4
 80070cc:	f000 fef8 	bl	8007ec0 <__i2b>
 80070d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	4606      	mov	r6, r0
 80070d6:	f340 8088 	ble.w	80071ea <_dtoa_r+0x8c2>
 80070da:	461a      	mov	r2, r3
 80070dc:	4601      	mov	r1, r0
 80070de:	4620      	mov	r0, r4
 80070e0:	f000 ffae 	bl	8008040 <__pow5mult>
 80070e4:	9b06      	ldr	r3, [sp, #24]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	4606      	mov	r6, r0
 80070ea:	f340 8081 	ble.w	80071f0 <_dtoa_r+0x8c8>
 80070ee:	f04f 0800 	mov.w	r8, #0
 80070f2:	6933      	ldr	r3, [r6, #16]
 80070f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80070f8:	6918      	ldr	r0, [r3, #16]
 80070fa:	f000 fe91 	bl	8007e20 <__hi0bits>
 80070fe:	f1c0 0020 	rsb	r0, r0, #32
 8007102:	9b05      	ldr	r3, [sp, #20]
 8007104:	4418      	add	r0, r3
 8007106:	f010 001f 	ands.w	r0, r0, #31
 800710a:	f000 8092 	beq.w	8007232 <_dtoa_r+0x90a>
 800710e:	f1c0 0320 	rsb	r3, r0, #32
 8007112:	2b04      	cmp	r3, #4
 8007114:	f340 808a 	ble.w	800722c <_dtoa_r+0x904>
 8007118:	f1c0 001c 	rsb	r0, r0, #28
 800711c:	9b04      	ldr	r3, [sp, #16]
 800711e:	4403      	add	r3, r0
 8007120:	9304      	str	r3, [sp, #16]
 8007122:	9b05      	ldr	r3, [sp, #20]
 8007124:	4403      	add	r3, r0
 8007126:	4405      	add	r5, r0
 8007128:	9305      	str	r3, [sp, #20]
 800712a:	9b04      	ldr	r3, [sp, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	dd07      	ble.n	8007140 <_dtoa_r+0x818>
 8007130:	ee18 1a10 	vmov	r1, s16
 8007134:	461a      	mov	r2, r3
 8007136:	4620      	mov	r0, r4
 8007138:	f000 ffdc 	bl	80080f4 <__lshift>
 800713c:	ee08 0a10 	vmov	s16, r0
 8007140:	9b05      	ldr	r3, [sp, #20]
 8007142:	2b00      	cmp	r3, #0
 8007144:	dd05      	ble.n	8007152 <_dtoa_r+0x82a>
 8007146:	4631      	mov	r1, r6
 8007148:	461a      	mov	r2, r3
 800714a:	4620      	mov	r0, r4
 800714c:	f000 ffd2 	bl	80080f4 <__lshift>
 8007150:	4606      	mov	r6, r0
 8007152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007154:	2b00      	cmp	r3, #0
 8007156:	d06e      	beq.n	8007236 <_dtoa_r+0x90e>
 8007158:	ee18 0a10 	vmov	r0, s16
 800715c:	4631      	mov	r1, r6
 800715e:	f001 f839 	bl	80081d4 <__mcmp>
 8007162:	2800      	cmp	r0, #0
 8007164:	da67      	bge.n	8007236 <_dtoa_r+0x90e>
 8007166:	9b00      	ldr	r3, [sp, #0]
 8007168:	3b01      	subs	r3, #1
 800716a:	ee18 1a10 	vmov	r1, s16
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	220a      	movs	r2, #10
 8007172:	2300      	movs	r3, #0
 8007174:	4620      	mov	r0, r4
 8007176:	f000 fdc3 	bl	8007d00 <__multadd>
 800717a:	9b08      	ldr	r3, [sp, #32]
 800717c:	ee08 0a10 	vmov	s16, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	f000 81b1 	beq.w	80074e8 <_dtoa_r+0xbc0>
 8007186:	2300      	movs	r3, #0
 8007188:	4639      	mov	r1, r7
 800718a:	220a      	movs	r2, #10
 800718c:	4620      	mov	r0, r4
 800718e:	f000 fdb7 	bl	8007d00 <__multadd>
 8007192:	9b02      	ldr	r3, [sp, #8]
 8007194:	2b00      	cmp	r3, #0
 8007196:	4607      	mov	r7, r0
 8007198:	f300 808e 	bgt.w	80072b8 <_dtoa_r+0x990>
 800719c:	9b06      	ldr	r3, [sp, #24]
 800719e:	2b02      	cmp	r3, #2
 80071a0:	dc51      	bgt.n	8007246 <_dtoa_r+0x91e>
 80071a2:	e089      	b.n	80072b8 <_dtoa_r+0x990>
 80071a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80071a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80071aa:	e74b      	b.n	8007044 <_dtoa_r+0x71c>
 80071ac:	9b03      	ldr	r3, [sp, #12]
 80071ae:	1e5e      	subs	r6, r3, #1
 80071b0:	9b07      	ldr	r3, [sp, #28]
 80071b2:	42b3      	cmp	r3, r6
 80071b4:	bfbf      	itttt	lt
 80071b6:	9b07      	ldrlt	r3, [sp, #28]
 80071b8:	9607      	strlt	r6, [sp, #28]
 80071ba:	1af2      	sublt	r2, r6, r3
 80071bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80071be:	bfb6      	itet	lt
 80071c0:	189b      	addlt	r3, r3, r2
 80071c2:	1b9e      	subge	r6, r3, r6
 80071c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80071c6:	9b03      	ldr	r3, [sp, #12]
 80071c8:	bfb8      	it	lt
 80071ca:	2600      	movlt	r6, #0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	bfb7      	itett	lt
 80071d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80071d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80071d8:	1a9d      	sublt	r5, r3, r2
 80071da:	2300      	movlt	r3, #0
 80071dc:	e734      	b.n	8007048 <_dtoa_r+0x720>
 80071de:	9e07      	ldr	r6, [sp, #28]
 80071e0:	9d04      	ldr	r5, [sp, #16]
 80071e2:	9f08      	ldr	r7, [sp, #32]
 80071e4:	e73b      	b.n	800705e <_dtoa_r+0x736>
 80071e6:	9a07      	ldr	r2, [sp, #28]
 80071e8:	e767      	b.n	80070ba <_dtoa_r+0x792>
 80071ea:	9b06      	ldr	r3, [sp, #24]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	dc18      	bgt.n	8007222 <_dtoa_r+0x8fa>
 80071f0:	f1ba 0f00 	cmp.w	sl, #0
 80071f4:	d115      	bne.n	8007222 <_dtoa_r+0x8fa>
 80071f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80071fa:	b993      	cbnz	r3, 8007222 <_dtoa_r+0x8fa>
 80071fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007200:	0d1b      	lsrs	r3, r3, #20
 8007202:	051b      	lsls	r3, r3, #20
 8007204:	b183      	cbz	r3, 8007228 <_dtoa_r+0x900>
 8007206:	9b04      	ldr	r3, [sp, #16]
 8007208:	3301      	adds	r3, #1
 800720a:	9304      	str	r3, [sp, #16]
 800720c:	9b05      	ldr	r3, [sp, #20]
 800720e:	3301      	adds	r3, #1
 8007210:	9305      	str	r3, [sp, #20]
 8007212:	f04f 0801 	mov.w	r8, #1
 8007216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007218:	2b00      	cmp	r3, #0
 800721a:	f47f af6a 	bne.w	80070f2 <_dtoa_r+0x7ca>
 800721e:	2001      	movs	r0, #1
 8007220:	e76f      	b.n	8007102 <_dtoa_r+0x7da>
 8007222:	f04f 0800 	mov.w	r8, #0
 8007226:	e7f6      	b.n	8007216 <_dtoa_r+0x8ee>
 8007228:	4698      	mov	r8, r3
 800722a:	e7f4      	b.n	8007216 <_dtoa_r+0x8ee>
 800722c:	f43f af7d 	beq.w	800712a <_dtoa_r+0x802>
 8007230:	4618      	mov	r0, r3
 8007232:	301c      	adds	r0, #28
 8007234:	e772      	b.n	800711c <_dtoa_r+0x7f4>
 8007236:	9b03      	ldr	r3, [sp, #12]
 8007238:	2b00      	cmp	r3, #0
 800723a:	dc37      	bgt.n	80072ac <_dtoa_r+0x984>
 800723c:	9b06      	ldr	r3, [sp, #24]
 800723e:	2b02      	cmp	r3, #2
 8007240:	dd34      	ble.n	80072ac <_dtoa_r+0x984>
 8007242:	9b03      	ldr	r3, [sp, #12]
 8007244:	9302      	str	r3, [sp, #8]
 8007246:	9b02      	ldr	r3, [sp, #8]
 8007248:	b96b      	cbnz	r3, 8007266 <_dtoa_r+0x93e>
 800724a:	4631      	mov	r1, r6
 800724c:	2205      	movs	r2, #5
 800724e:	4620      	mov	r0, r4
 8007250:	f000 fd56 	bl	8007d00 <__multadd>
 8007254:	4601      	mov	r1, r0
 8007256:	4606      	mov	r6, r0
 8007258:	ee18 0a10 	vmov	r0, s16
 800725c:	f000 ffba 	bl	80081d4 <__mcmp>
 8007260:	2800      	cmp	r0, #0
 8007262:	f73f adbb 	bgt.w	8006ddc <_dtoa_r+0x4b4>
 8007266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007268:	9d01      	ldr	r5, [sp, #4]
 800726a:	43db      	mvns	r3, r3
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	f04f 0800 	mov.w	r8, #0
 8007272:	4631      	mov	r1, r6
 8007274:	4620      	mov	r0, r4
 8007276:	f000 fd21 	bl	8007cbc <_Bfree>
 800727a:	2f00      	cmp	r7, #0
 800727c:	f43f aea4 	beq.w	8006fc8 <_dtoa_r+0x6a0>
 8007280:	f1b8 0f00 	cmp.w	r8, #0
 8007284:	d005      	beq.n	8007292 <_dtoa_r+0x96a>
 8007286:	45b8      	cmp	r8, r7
 8007288:	d003      	beq.n	8007292 <_dtoa_r+0x96a>
 800728a:	4641      	mov	r1, r8
 800728c:	4620      	mov	r0, r4
 800728e:	f000 fd15 	bl	8007cbc <_Bfree>
 8007292:	4639      	mov	r1, r7
 8007294:	4620      	mov	r0, r4
 8007296:	f000 fd11 	bl	8007cbc <_Bfree>
 800729a:	e695      	b.n	8006fc8 <_dtoa_r+0x6a0>
 800729c:	2600      	movs	r6, #0
 800729e:	4637      	mov	r7, r6
 80072a0:	e7e1      	b.n	8007266 <_dtoa_r+0x93e>
 80072a2:	9700      	str	r7, [sp, #0]
 80072a4:	4637      	mov	r7, r6
 80072a6:	e599      	b.n	8006ddc <_dtoa_r+0x4b4>
 80072a8:	40240000 	.word	0x40240000
 80072ac:	9b08      	ldr	r3, [sp, #32]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f000 80ca 	beq.w	8007448 <_dtoa_r+0xb20>
 80072b4:	9b03      	ldr	r3, [sp, #12]
 80072b6:	9302      	str	r3, [sp, #8]
 80072b8:	2d00      	cmp	r5, #0
 80072ba:	dd05      	ble.n	80072c8 <_dtoa_r+0x9a0>
 80072bc:	4639      	mov	r1, r7
 80072be:	462a      	mov	r2, r5
 80072c0:	4620      	mov	r0, r4
 80072c2:	f000 ff17 	bl	80080f4 <__lshift>
 80072c6:	4607      	mov	r7, r0
 80072c8:	f1b8 0f00 	cmp.w	r8, #0
 80072cc:	d05b      	beq.n	8007386 <_dtoa_r+0xa5e>
 80072ce:	6879      	ldr	r1, [r7, #4]
 80072d0:	4620      	mov	r0, r4
 80072d2:	f000 fcb3 	bl	8007c3c <_Balloc>
 80072d6:	4605      	mov	r5, r0
 80072d8:	b928      	cbnz	r0, 80072e6 <_dtoa_r+0x9be>
 80072da:	4b87      	ldr	r3, [pc, #540]	; (80074f8 <_dtoa_r+0xbd0>)
 80072dc:	4602      	mov	r2, r0
 80072de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80072e2:	f7ff bb3b 	b.w	800695c <_dtoa_r+0x34>
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	3202      	adds	r2, #2
 80072ea:	0092      	lsls	r2, r2, #2
 80072ec:	f107 010c 	add.w	r1, r7, #12
 80072f0:	300c      	adds	r0, #12
 80072f2:	f000 fc95 	bl	8007c20 <memcpy>
 80072f6:	2201      	movs	r2, #1
 80072f8:	4629      	mov	r1, r5
 80072fa:	4620      	mov	r0, r4
 80072fc:	f000 fefa 	bl	80080f4 <__lshift>
 8007300:	9b01      	ldr	r3, [sp, #4]
 8007302:	f103 0901 	add.w	r9, r3, #1
 8007306:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800730a:	4413      	add	r3, r2
 800730c:	9305      	str	r3, [sp, #20]
 800730e:	f00a 0301 	and.w	r3, sl, #1
 8007312:	46b8      	mov	r8, r7
 8007314:	9304      	str	r3, [sp, #16]
 8007316:	4607      	mov	r7, r0
 8007318:	4631      	mov	r1, r6
 800731a:	ee18 0a10 	vmov	r0, s16
 800731e:	f7ff fa77 	bl	8006810 <quorem>
 8007322:	4641      	mov	r1, r8
 8007324:	9002      	str	r0, [sp, #8]
 8007326:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800732a:	ee18 0a10 	vmov	r0, s16
 800732e:	f000 ff51 	bl	80081d4 <__mcmp>
 8007332:	463a      	mov	r2, r7
 8007334:	9003      	str	r0, [sp, #12]
 8007336:	4631      	mov	r1, r6
 8007338:	4620      	mov	r0, r4
 800733a:	f000 ff67 	bl	800820c <__mdiff>
 800733e:	68c2      	ldr	r2, [r0, #12]
 8007340:	f109 3bff 	add.w	fp, r9, #4294967295
 8007344:	4605      	mov	r5, r0
 8007346:	bb02      	cbnz	r2, 800738a <_dtoa_r+0xa62>
 8007348:	4601      	mov	r1, r0
 800734a:	ee18 0a10 	vmov	r0, s16
 800734e:	f000 ff41 	bl	80081d4 <__mcmp>
 8007352:	4602      	mov	r2, r0
 8007354:	4629      	mov	r1, r5
 8007356:	4620      	mov	r0, r4
 8007358:	9207      	str	r2, [sp, #28]
 800735a:	f000 fcaf 	bl	8007cbc <_Bfree>
 800735e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007362:	ea43 0102 	orr.w	r1, r3, r2
 8007366:	9b04      	ldr	r3, [sp, #16]
 8007368:	430b      	orrs	r3, r1
 800736a:	464d      	mov	r5, r9
 800736c:	d10f      	bne.n	800738e <_dtoa_r+0xa66>
 800736e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007372:	d02a      	beq.n	80073ca <_dtoa_r+0xaa2>
 8007374:	9b03      	ldr	r3, [sp, #12]
 8007376:	2b00      	cmp	r3, #0
 8007378:	dd02      	ble.n	8007380 <_dtoa_r+0xa58>
 800737a:	9b02      	ldr	r3, [sp, #8]
 800737c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007380:	f88b a000 	strb.w	sl, [fp]
 8007384:	e775      	b.n	8007272 <_dtoa_r+0x94a>
 8007386:	4638      	mov	r0, r7
 8007388:	e7ba      	b.n	8007300 <_dtoa_r+0x9d8>
 800738a:	2201      	movs	r2, #1
 800738c:	e7e2      	b.n	8007354 <_dtoa_r+0xa2c>
 800738e:	9b03      	ldr	r3, [sp, #12]
 8007390:	2b00      	cmp	r3, #0
 8007392:	db04      	blt.n	800739e <_dtoa_r+0xa76>
 8007394:	9906      	ldr	r1, [sp, #24]
 8007396:	430b      	orrs	r3, r1
 8007398:	9904      	ldr	r1, [sp, #16]
 800739a:	430b      	orrs	r3, r1
 800739c:	d122      	bne.n	80073e4 <_dtoa_r+0xabc>
 800739e:	2a00      	cmp	r2, #0
 80073a0:	ddee      	ble.n	8007380 <_dtoa_r+0xa58>
 80073a2:	ee18 1a10 	vmov	r1, s16
 80073a6:	2201      	movs	r2, #1
 80073a8:	4620      	mov	r0, r4
 80073aa:	f000 fea3 	bl	80080f4 <__lshift>
 80073ae:	4631      	mov	r1, r6
 80073b0:	ee08 0a10 	vmov	s16, r0
 80073b4:	f000 ff0e 	bl	80081d4 <__mcmp>
 80073b8:	2800      	cmp	r0, #0
 80073ba:	dc03      	bgt.n	80073c4 <_dtoa_r+0xa9c>
 80073bc:	d1e0      	bne.n	8007380 <_dtoa_r+0xa58>
 80073be:	f01a 0f01 	tst.w	sl, #1
 80073c2:	d0dd      	beq.n	8007380 <_dtoa_r+0xa58>
 80073c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80073c8:	d1d7      	bne.n	800737a <_dtoa_r+0xa52>
 80073ca:	2339      	movs	r3, #57	; 0x39
 80073cc:	f88b 3000 	strb.w	r3, [fp]
 80073d0:	462b      	mov	r3, r5
 80073d2:	461d      	mov	r5, r3
 80073d4:	3b01      	subs	r3, #1
 80073d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80073da:	2a39      	cmp	r2, #57	; 0x39
 80073dc:	d071      	beq.n	80074c2 <_dtoa_r+0xb9a>
 80073de:	3201      	adds	r2, #1
 80073e0:	701a      	strb	r2, [r3, #0]
 80073e2:	e746      	b.n	8007272 <_dtoa_r+0x94a>
 80073e4:	2a00      	cmp	r2, #0
 80073e6:	dd07      	ble.n	80073f8 <_dtoa_r+0xad0>
 80073e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80073ec:	d0ed      	beq.n	80073ca <_dtoa_r+0xaa2>
 80073ee:	f10a 0301 	add.w	r3, sl, #1
 80073f2:	f88b 3000 	strb.w	r3, [fp]
 80073f6:	e73c      	b.n	8007272 <_dtoa_r+0x94a>
 80073f8:	9b05      	ldr	r3, [sp, #20]
 80073fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80073fe:	4599      	cmp	r9, r3
 8007400:	d047      	beq.n	8007492 <_dtoa_r+0xb6a>
 8007402:	ee18 1a10 	vmov	r1, s16
 8007406:	2300      	movs	r3, #0
 8007408:	220a      	movs	r2, #10
 800740a:	4620      	mov	r0, r4
 800740c:	f000 fc78 	bl	8007d00 <__multadd>
 8007410:	45b8      	cmp	r8, r7
 8007412:	ee08 0a10 	vmov	s16, r0
 8007416:	f04f 0300 	mov.w	r3, #0
 800741a:	f04f 020a 	mov.w	r2, #10
 800741e:	4641      	mov	r1, r8
 8007420:	4620      	mov	r0, r4
 8007422:	d106      	bne.n	8007432 <_dtoa_r+0xb0a>
 8007424:	f000 fc6c 	bl	8007d00 <__multadd>
 8007428:	4680      	mov	r8, r0
 800742a:	4607      	mov	r7, r0
 800742c:	f109 0901 	add.w	r9, r9, #1
 8007430:	e772      	b.n	8007318 <_dtoa_r+0x9f0>
 8007432:	f000 fc65 	bl	8007d00 <__multadd>
 8007436:	4639      	mov	r1, r7
 8007438:	4680      	mov	r8, r0
 800743a:	2300      	movs	r3, #0
 800743c:	220a      	movs	r2, #10
 800743e:	4620      	mov	r0, r4
 8007440:	f000 fc5e 	bl	8007d00 <__multadd>
 8007444:	4607      	mov	r7, r0
 8007446:	e7f1      	b.n	800742c <_dtoa_r+0xb04>
 8007448:	9b03      	ldr	r3, [sp, #12]
 800744a:	9302      	str	r3, [sp, #8]
 800744c:	9d01      	ldr	r5, [sp, #4]
 800744e:	ee18 0a10 	vmov	r0, s16
 8007452:	4631      	mov	r1, r6
 8007454:	f7ff f9dc 	bl	8006810 <quorem>
 8007458:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800745c:	9b01      	ldr	r3, [sp, #4]
 800745e:	f805 ab01 	strb.w	sl, [r5], #1
 8007462:	1aea      	subs	r2, r5, r3
 8007464:	9b02      	ldr	r3, [sp, #8]
 8007466:	4293      	cmp	r3, r2
 8007468:	dd09      	ble.n	800747e <_dtoa_r+0xb56>
 800746a:	ee18 1a10 	vmov	r1, s16
 800746e:	2300      	movs	r3, #0
 8007470:	220a      	movs	r2, #10
 8007472:	4620      	mov	r0, r4
 8007474:	f000 fc44 	bl	8007d00 <__multadd>
 8007478:	ee08 0a10 	vmov	s16, r0
 800747c:	e7e7      	b.n	800744e <_dtoa_r+0xb26>
 800747e:	9b02      	ldr	r3, [sp, #8]
 8007480:	2b00      	cmp	r3, #0
 8007482:	bfc8      	it	gt
 8007484:	461d      	movgt	r5, r3
 8007486:	9b01      	ldr	r3, [sp, #4]
 8007488:	bfd8      	it	le
 800748a:	2501      	movle	r5, #1
 800748c:	441d      	add	r5, r3
 800748e:	f04f 0800 	mov.w	r8, #0
 8007492:	ee18 1a10 	vmov	r1, s16
 8007496:	2201      	movs	r2, #1
 8007498:	4620      	mov	r0, r4
 800749a:	f000 fe2b 	bl	80080f4 <__lshift>
 800749e:	4631      	mov	r1, r6
 80074a0:	ee08 0a10 	vmov	s16, r0
 80074a4:	f000 fe96 	bl	80081d4 <__mcmp>
 80074a8:	2800      	cmp	r0, #0
 80074aa:	dc91      	bgt.n	80073d0 <_dtoa_r+0xaa8>
 80074ac:	d102      	bne.n	80074b4 <_dtoa_r+0xb8c>
 80074ae:	f01a 0f01 	tst.w	sl, #1
 80074b2:	d18d      	bne.n	80073d0 <_dtoa_r+0xaa8>
 80074b4:	462b      	mov	r3, r5
 80074b6:	461d      	mov	r5, r3
 80074b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074bc:	2a30      	cmp	r2, #48	; 0x30
 80074be:	d0fa      	beq.n	80074b6 <_dtoa_r+0xb8e>
 80074c0:	e6d7      	b.n	8007272 <_dtoa_r+0x94a>
 80074c2:	9a01      	ldr	r2, [sp, #4]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d184      	bne.n	80073d2 <_dtoa_r+0xaaa>
 80074c8:	9b00      	ldr	r3, [sp, #0]
 80074ca:	3301      	adds	r3, #1
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	2331      	movs	r3, #49	; 0x31
 80074d0:	7013      	strb	r3, [r2, #0]
 80074d2:	e6ce      	b.n	8007272 <_dtoa_r+0x94a>
 80074d4:	4b09      	ldr	r3, [pc, #36]	; (80074fc <_dtoa_r+0xbd4>)
 80074d6:	f7ff ba95 	b.w	8006a04 <_dtoa_r+0xdc>
 80074da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f47f aa6e 	bne.w	80069be <_dtoa_r+0x96>
 80074e2:	4b07      	ldr	r3, [pc, #28]	; (8007500 <_dtoa_r+0xbd8>)
 80074e4:	f7ff ba8e 	b.w	8006a04 <_dtoa_r+0xdc>
 80074e8:	9b02      	ldr	r3, [sp, #8]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	dcae      	bgt.n	800744c <_dtoa_r+0xb24>
 80074ee:	9b06      	ldr	r3, [sp, #24]
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	f73f aea8 	bgt.w	8007246 <_dtoa_r+0x91e>
 80074f6:	e7a9      	b.n	800744c <_dtoa_r+0xb24>
 80074f8:	0800a608 	.word	0x0800a608
 80074fc:	0800a408 	.word	0x0800a408
 8007500:	0800a589 	.word	0x0800a589

08007504 <rshift>:
 8007504:	6903      	ldr	r3, [r0, #16]
 8007506:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800750a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800750e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007512:	f100 0414 	add.w	r4, r0, #20
 8007516:	dd45      	ble.n	80075a4 <rshift+0xa0>
 8007518:	f011 011f 	ands.w	r1, r1, #31
 800751c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007520:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007524:	d10c      	bne.n	8007540 <rshift+0x3c>
 8007526:	f100 0710 	add.w	r7, r0, #16
 800752a:	4629      	mov	r1, r5
 800752c:	42b1      	cmp	r1, r6
 800752e:	d334      	bcc.n	800759a <rshift+0x96>
 8007530:	1a9b      	subs	r3, r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	1eea      	subs	r2, r5, #3
 8007536:	4296      	cmp	r6, r2
 8007538:	bf38      	it	cc
 800753a:	2300      	movcc	r3, #0
 800753c:	4423      	add	r3, r4
 800753e:	e015      	b.n	800756c <rshift+0x68>
 8007540:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007544:	f1c1 0820 	rsb	r8, r1, #32
 8007548:	40cf      	lsrs	r7, r1
 800754a:	f105 0e04 	add.w	lr, r5, #4
 800754e:	46a1      	mov	r9, r4
 8007550:	4576      	cmp	r6, lr
 8007552:	46f4      	mov	ip, lr
 8007554:	d815      	bhi.n	8007582 <rshift+0x7e>
 8007556:	1a9a      	subs	r2, r3, r2
 8007558:	0092      	lsls	r2, r2, #2
 800755a:	3a04      	subs	r2, #4
 800755c:	3501      	adds	r5, #1
 800755e:	42ae      	cmp	r6, r5
 8007560:	bf38      	it	cc
 8007562:	2200      	movcc	r2, #0
 8007564:	18a3      	adds	r3, r4, r2
 8007566:	50a7      	str	r7, [r4, r2]
 8007568:	b107      	cbz	r7, 800756c <rshift+0x68>
 800756a:	3304      	adds	r3, #4
 800756c:	1b1a      	subs	r2, r3, r4
 800756e:	42a3      	cmp	r3, r4
 8007570:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007574:	bf08      	it	eq
 8007576:	2300      	moveq	r3, #0
 8007578:	6102      	str	r2, [r0, #16]
 800757a:	bf08      	it	eq
 800757c:	6143      	streq	r3, [r0, #20]
 800757e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007582:	f8dc c000 	ldr.w	ip, [ip]
 8007586:	fa0c fc08 	lsl.w	ip, ip, r8
 800758a:	ea4c 0707 	orr.w	r7, ip, r7
 800758e:	f849 7b04 	str.w	r7, [r9], #4
 8007592:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007596:	40cf      	lsrs	r7, r1
 8007598:	e7da      	b.n	8007550 <rshift+0x4c>
 800759a:	f851 cb04 	ldr.w	ip, [r1], #4
 800759e:	f847 cf04 	str.w	ip, [r7, #4]!
 80075a2:	e7c3      	b.n	800752c <rshift+0x28>
 80075a4:	4623      	mov	r3, r4
 80075a6:	e7e1      	b.n	800756c <rshift+0x68>

080075a8 <__hexdig_fun>:
 80075a8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80075ac:	2b09      	cmp	r3, #9
 80075ae:	d802      	bhi.n	80075b6 <__hexdig_fun+0xe>
 80075b0:	3820      	subs	r0, #32
 80075b2:	b2c0      	uxtb	r0, r0
 80075b4:	4770      	bx	lr
 80075b6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80075ba:	2b05      	cmp	r3, #5
 80075bc:	d801      	bhi.n	80075c2 <__hexdig_fun+0x1a>
 80075be:	3847      	subs	r0, #71	; 0x47
 80075c0:	e7f7      	b.n	80075b2 <__hexdig_fun+0xa>
 80075c2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80075c6:	2b05      	cmp	r3, #5
 80075c8:	d801      	bhi.n	80075ce <__hexdig_fun+0x26>
 80075ca:	3827      	subs	r0, #39	; 0x27
 80075cc:	e7f1      	b.n	80075b2 <__hexdig_fun+0xa>
 80075ce:	2000      	movs	r0, #0
 80075d0:	4770      	bx	lr
	...

080075d4 <__gethex>:
 80075d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d8:	ed2d 8b02 	vpush	{d8}
 80075dc:	b089      	sub	sp, #36	; 0x24
 80075de:	ee08 0a10 	vmov	s16, r0
 80075e2:	9304      	str	r3, [sp, #16]
 80075e4:	4bb4      	ldr	r3, [pc, #720]	; (80078b8 <__gethex+0x2e4>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	9301      	str	r3, [sp, #4]
 80075ea:	4618      	mov	r0, r3
 80075ec:	468b      	mov	fp, r1
 80075ee:	4690      	mov	r8, r2
 80075f0:	f7f8 fdf6 	bl	80001e0 <strlen>
 80075f4:	9b01      	ldr	r3, [sp, #4]
 80075f6:	f8db 2000 	ldr.w	r2, [fp]
 80075fa:	4403      	add	r3, r0
 80075fc:	4682      	mov	sl, r0
 80075fe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007602:	9305      	str	r3, [sp, #20]
 8007604:	1c93      	adds	r3, r2, #2
 8007606:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800760a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800760e:	32fe      	adds	r2, #254	; 0xfe
 8007610:	18d1      	adds	r1, r2, r3
 8007612:	461f      	mov	r7, r3
 8007614:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007618:	9100      	str	r1, [sp, #0]
 800761a:	2830      	cmp	r0, #48	; 0x30
 800761c:	d0f8      	beq.n	8007610 <__gethex+0x3c>
 800761e:	f7ff ffc3 	bl	80075a8 <__hexdig_fun>
 8007622:	4604      	mov	r4, r0
 8007624:	2800      	cmp	r0, #0
 8007626:	d13a      	bne.n	800769e <__gethex+0xca>
 8007628:	9901      	ldr	r1, [sp, #4]
 800762a:	4652      	mov	r2, sl
 800762c:	4638      	mov	r0, r7
 800762e:	f001 fa33 	bl	8008a98 <strncmp>
 8007632:	4605      	mov	r5, r0
 8007634:	2800      	cmp	r0, #0
 8007636:	d168      	bne.n	800770a <__gethex+0x136>
 8007638:	f817 000a 	ldrb.w	r0, [r7, sl]
 800763c:	eb07 060a 	add.w	r6, r7, sl
 8007640:	f7ff ffb2 	bl	80075a8 <__hexdig_fun>
 8007644:	2800      	cmp	r0, #0
 8007646:	d062      	beq.n	800770e <__gethex+0x13a>
 8007648:	4633      	mov	r3, r6
 800764a:	7818      	ldrb	r0, [r3, #0]
 800764c:	2830      	cmp	r0, #48	; 0x30
 800764e:	461f      	mov	r7, r3
 8007650:	f103 0301 	add.w	r3, r3, #1
 8007654:	d0f9      	beq.n	800764a <__gethex+0x76>
 8007656:	f7ff ffa7 	bl	80075a8 <__hexdig_fun>
 800765a:	2301      	movs	r3, #1
 800765c:	fab0 f480 	clz	r4, r0
 8007660:	0964      	lsrs	r4, r4, #5
 8007662:	4635      	mov	r5, r6
 8007664:	9300      	str	r3, [sp, #0]
 8007666:	463a      	mov	r2, r7
 8007668:	4616      	mov	r6, r2
 800766a:	3201      	adds	r2, #1
 800766c:	7830      	ldrb	r0, [r6, #0]
 800766e:	f7ff ff9b 	bl	80075a8 <__hexdig_fun>
 8007672:	2800      	cmp	r0, #0
 8007674:	d1f8      	bne.n	8007668 <__gethex+0x94>
 8007676:	9901      	ldr	r1, [sp, #4]
 8007678:	4652      	mov	r2, sl
 800767a:	4630      	mov	r0, r6
 800767c:	f001 fa0c 	bl	8008a98 <strncmp>
 8007680:	b980      	cbnz	r0, 80076a4 <__gethex+0xd0>
 8007682:	b94d      	cbnz	r5, 8007698 <__gethex+0xc4>
 8007684:	eb06 050a 	add.w	r5, r6, sl
 8007688:	462a      	mov	r2, r5
 800768a:	4616      	mov	r6, r2
 800768c:	3201      	adds	r2, #1
 800768e:	7830      	ldrb	r0, [r6, #0]
 8007690:	f7ff ff8a 	bl	80075a8 <__hexdig_fun>
 8007694:	2800      	cmp	r0, #0
 8007696:	d1f8      	bne.n	800768a <__gethex+0xb6>
 8007698:	1bad      	subs	r5, r5, r6
 800769a:	00ad      	lsls	r5, r5, #2
 800769c:	e004      	b.n	80076a8 <__gethex+0xd4>
 800769e:	2400      	movs	r4, #0
 80076a0:	4625      	mov	r5, r4
 80076a2:	e7e0      	b.n	8007666 <__gethex+0x92>
 80076a4:	2d00      	cmp	r5, #0
 80076a6:	d1f7      	bne.n	8007698 <__gethex+0xc4>
 80076a8:	7833      	ldrb	r3, [r6, #0]
 80076aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80076ae:	2b50      	cmp	r3, #80	; 0x50
 80076b0:	d13b      	bne.n	800772a <__gethex+0x156>
 80076b2:	7873      	ldrb	r3, [r6, #1]
 80076b4:	2b2b      	cmp	r3, #43	; 0x2b
 80076b6:	d02c      	beq.n	8007712 <__gethex+0x13e>
 80076b8:	2b2d      	cmp	r3, #45	; 0x2d
 80076ba:	d02e      	beq.n	800771a <__gethex+0x146>
 80076bc:	1c71      	adds	r1, r6, #1
 80076be:	f04f 0900 	mov.w	r9, #0
 80076c2:	7808      	ldrb	r0, [r1, #0]
 80076c4:	f7ff ff70 	bl	80075a8 <__hexdig_fun>
 80076c8:	1e43      	subs	r3, r0, #1
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b18      	cmp	r3, #24
 80076ce:	d82c      	bhi.n	800772a <__gethex+0x156>
 80076d0:	f1a0 0210 	sub.w	r2, r0, #16
 80076d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80076d8:	f7ff ff66 	bl	80075a8 <__hexdig_fun>
 80076dc:	1e43      	subs	r3, r0, #1
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	2b18      	cmp	r3, #24
 80076e2:	d91d      	bls.n	8007720 <__gethex+0x14c>
 80076e4:	f1b9 0f00 	cmp.w	r9, #0
 80076e8:	d000      	beq.n	80076ec <__gethex+0x118>
 80076ea:	4252      	negs	r2, r2
 80076ec:	4415      	add	r5, r2
 80076ee:	f8cb 1000 	str.w	r1, [fp]
 80076f2:	b1e4      	cbz	r4, 800772e <__gethex+0x15a>
 80076f4:	9b00      	ldr	r3, [sp, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	bf14      	ite	ne
 80076fa:	2700      	movne	r7, #0
 80076fc:	2706      	moveq	r7, #6
 80076fe:	4638      	mov	r0, r7
 8007700:	b009      	add	sp, #36	; 0x24
 8007702:	ecbd 8b02 	vpop	{d8}
 8007706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800770a:	463e      	mov	r6, r7
 800770c:	4625      	mov	r5, r4
 800770e:	2401      	movs	r4, #1
 8007710:	e7ca      	b.n	80076a8 <__gethex+0xd4>
 8007712:	f04f 0900 	mov.w	r9, #0
 8007716:	1cb1      	adds	r1, r6, #2
 8007718:	e7d3      	b.n	80076c2 <__gethex+0xee>
 800771a:	f04f 0901 	mov.w	r9, #1
 800771e:	e7fa      	b.n	8007716 <__gethex+0x142>
 8007720:	230a      	movs	r3, #10
 8007722:	fb03 0202 	mla	r2, r3, r2, r0
 8007726:	3a10      	subs	r2, #16
 8007728:	e7d4      	b.n	80076d4 <__gethex+0x100>
 800772a:	4631      	mov	r1, r6
 800772c:	e7df      	b.n	80076ee <__gethex+0x11a>
 800772e:	1bf3      	subs	r3, r6, r7
 8007730:	3b01      	subs	r3, #1
 8007732:	4621      	mov	r1, r4
 8007734:	2b07      	cmp	r3, #7
 8007736:	dc0b      	bgt.n	8007750 <__gethex+0x17c>
 8007738:	ee18 0a10 	vmov	r0, s16
 800773c:	f000 fa7e 	bl	8007c3c <_Balloc>
 8007740:	4604      	mov	r4, r0
 8007742:	b940      	cbnz	r0, 8007756 <__gethex+0x182>
 8007744:	4b5d      	ldr	r3, [pc, #372]	; (80078bc <__gethex+0x2e8>)
 8007746:	4602      	mov	r2, r0
 8007748:	21de      	movs	r1, #222	; 0xde
 800774a:	485d      	ldr	r0, [pc, #372]	; (80078c0 <__gethex+0x2ec>)
 800774c:	f001 f9c6 	bl	8008adc <__assert_func>
 8007750:	3101      	adds	r1, #1
 8007752:	105b      	asrs	r3, r3, #1
 8007754:	e7ee      	b.n	8007734 <__gethex+0x160>
 8007756:	f100 0914 	add.w	r9, r0, #20
 800775a:	f04f 0b00 	mov.w	fp, #0
 800775e:	f1ca 0301 	rsb	r3, sl, #1
 8007762:	f8cd 9008 	str.w	r9, [sp, #8]
 8007766:	f8cd b000 	str.w	fp, [sp]
 800776a:	9306      	str	r3, [sp, #24]
 800776c:	42b7      	cmp	r7, r6
 800776e:	d340      	bcc.n	80077f2 <__gethex+0x21e>
 8007770:	9802      	ldr	r0, [sp, #8]
 8007772:	9b00      	ldr	r3, [sp, #0]
 8007774:	f840 3b04 	str.w	r3, [r0], #4
 8007778:	eba0 0009 	sub.w	r0, r0, r9
 800777c:	1080      	asrs	r0, r0, #2
 800777e:	0146      	lsls	r6, r0, #5
 8007780:	6120      	str	r0, [r4, #16]
 8007782:	4618      	mov	r0, r3
 8007784:	f000 fb4c 	bl	8007e20 <__hi0bits>
 8007788:	1a30      	subs	r0, r6, r0
 800778a:	f8d8 6000 	ldr.w	r6, [r8]
 800778e:	42b0      	cmp	r0, r6
 8007790:	dd63      	ble.n	800785a <__gethex+0x286>
 8007792:	1b87      	subs	r7, r0, r6
 8007794:	4639      	mov	r1, r7
 8007796:	4620      	mov	r0, r4
 8007798:	f000 fef0 	bl	800857c <__any_on>
 800779c:	4682      	mov	sl, r0
 800779e:	b1a8      	cbz	r0, 80077cc <__gethex+0x1f8>
 80077a0:	1e7b      	subs	r3, r7, #1
 80077a2:	1159      	asrs	r1, r3, #5
 80077a4:	f003 021f 	and.w	r2, r3, #31
 80077a8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80077ac:	f04f 0a01 	mov.w	sl, #1
 80077b0:	fa0a f202 	lsl.w	r2, sl, r2
 80077b4:	420a      	tst	r2, r1
 80077b6:	d009      	beq.n	80077cc <__gethex+0x1f8>
 80077b8:	4553      	cmp	r3, sl
 80077ba:	dd05      	ble.n	80077c8 <__gethex+0x1f4>
 80077bc:	1eb9      	subs	r1, r7, #2
 80077be:	4620      	mov	r0, r4
 80077c0:	f000 fedc 	bl	800857c <__any_on>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	d145      	bne.n	8007854 <__gethex+0x280>
 80077c8:	f04f 0a02 	mov.w	sl, #2
 80077cc:	4639      	mov	r1, r7
 80077ce:	4620      	mov	r0, r4
 80077d0:	f7ff fe98 	bl	8007504 <rshift>
 80077d4:	443d      	add	r5, r7
 80077d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80077da:	42ab      	cmp	r3, r5
 80077dc:	da4c      	bge.n	8007878 <__gethex+0x2a4>
 80077de:	ee18 0a10 	vmov	r0, s16
 80077e2:	4621      	mov	r1, r4
 80077e4:	f000 fa6a 	bl	8007cbc <_Bfree>
 80077e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80077ea:	2300      	movs	r3, #0
 80077ec:	6013      	str	r3, [r2, #0]
 80077ee:	27a3      	movs	r7, #163	; 0xa3
 80077f0:	e785      	b.n	80076fe <__gethex+0x12a>
 80077f2:	1e73      	subs	r3, r6, #1
 80077f4:	9a05      	ldr	r2, [sp, #20]
 80077f6:	9303      	str	r3, [sp, #12]
 80077f8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d019      	beq.n	8007834 <__gethex+0x260>
 8007800:	f1bb 0f20 	cmp.w	fp, #32
 8007804:	d107      	bne.n	8007816 <__gethex+0x242>
 8007806:	9b02      	ldr	r3, [sp, #8]
 8007808:	9a00      	ldr	r2, [sp, #0]
 800780a:	f843 2b04 	str.w	r2, [r3], #4
 800780e:	9302      	str	r3, [sp, #8]
 8007810:	2300      	movs	r3, #0
 8007812:	9300      	str	r3, [sp, #0]
 8007814:	469b      	mov	fp, r3
 8007816:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800781a:	f7ff fec5 	bl	80075a8 <__hexdig_fun>
 800781e:	9b00      	ldr	r3, [sp, #0]
 8007820:	f000 000f 	and.w	r0, r0, #15
 8007824:	fa00 f00b 	lsl.w	r0, r0, fp
 8007828:	4303      	orrs	r3, r0
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	f10b 0b04 	add.w	fp, fp, #4
 8007830:	9b03      	ldr	r3, [sp, #12]
 8007832:	e00d      	b.n	8007850 <__gethex+0x27c>
 8007834:	9b03      	ldr	r3, [sp, #12]
 8007836:	9a06      	ldr	r2, [sp, #24]
 8007838:	4413      	add	r3, r2
 800783a:	42bb      	cmp	r3, r7
 800783c:	d3e0      	bcc.n	8007800 <__gethex+0x22c>
 800783e:	4618      	mov	r0, r3
 8007840:	9901      	ldr	r1, [sp, #4]
 8007842:	9307      	str	r3, [sp, #28]
 8007844:	4652      	mov	r2, sl
 8007846:	f001 f927 	bl	8008a98 <strncmp>
 800784a:	9b07      	ldr	r3, [sp, #28]
 800784c:	2800      	cmp	r0, #0
 800784e:	d1d7      	bne.n	8007800 <__gethex+0x22c>
 8007850:	461e      	mov	r6, r3
 8007852:	e78b      	b.n	800776c <__gethex+0x198>
 8007854:	f04f 0a03 	mov.w	sl, #3
 8007858:	e7b8      	b.n	80077cc <__gethex+0x1f8>
 800785a:	da0a      	bge.n	8007872 <__gethex+0x29e>
 800785c:	1a37      	subs	r7, r6, r0
 800785e:	4621      	mov	r1, r4
 8007860:	ee18 0a10 	vmov	r0, s16
 8007864:	463a      	mov	r2, r7
 8007866:	f000 fc45 	bl	80080f4 <__lshift>
 800786a:	1bed      	subs	r5, r5, r7
 800786c:	4604      	mov	r4, r0
 800786e:	f100 0914 	add.w	r9, r0, #20
 8007872:	f04f 0a00 	mov.w	sl, #0
 8007876:	e7ae      	b.n	80077d6 <__gethex+0x202>
 8007878:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800787c:	42a8      	cmp	r0, r5
 800787e:	dd72      	ble.n	8007966 <__gethex+0x392>
 8007880:	1b45      	subs	r5, r0, r5
 8007882:	42ae      	cmp	r6, r5
 8007884:	dc36      	bgt.n	80078f4 <__gethex+0x320>
 8007886:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800788a:	2b02      	cmp	r3, #2
 800788c:	d02a      	beq.n	80078e4 <__gethex+0x310>
 800788e:	2b03      	cmp	r3, #3
 8007890:	d02c      	beq.n	80078ec <__gethex+0x318>
 8007892:	2b01      	cmp	r3, #1
 8007894:	d11c      	bne.n	80078d0 <__gethex+0x2fc>
 8007896:	42ae      	cmp	r6, r5
 8007898:	d11a      	bne.n	80078d0 <__gethex+0x2fc>
 800789a:	2e01      	cmp	r6, #1
 800789c:	d112      	bne.n	80078c4 <__gethex+0x2f0>
 800789e:	9a04      	ldr	r2, [sp, #16]
 80078a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80078a4:	6013      	str	r3, [r2, #0]
 80078a6:	2301      	movs	r3, #1
 80078a8:	6123      	str	r3, [r4, #16]
 80078aa:	f8c9 3000 	str.w	r3, [r9]
 80078ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80078b0:	2762      	movs	r7, #98	; 0x62
 80078b2:	601c      	str	r4, [r3, #0]
 80078b4:	e723      	b.n	80076fe <__gethex+0x12a>
 80078b6:	bf00      	nop
 80078b8:	0800a680 	.word	0x0800a680
 80078bc:	0800a608 	.word	0x0800a608
 80078c0:	0800a619 	.word	0x0800a619
 80078c4:	1e71      	subs	r1, r6, #1
 80078c6:	4620      	mov	r0, r4
 80078c8:	f000 fe58 	bl	800857c <__any_on>
 80078cc:	2800      	cmp	r0, #0
 80078ce:	d1e6      	bne.n	800789e <__gethex+0x2ca>
 80078d0:	ee18 0a10 	vmov	r0, s16
 80078d4:	4621      	mov	r1, r4
 80078d6:	f000 f9f1 	bl	8007cbc <_Bfree>
 80078da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80078dc:	2300      	movs	r3, #0
 80078de:	6013      	str	r3, [r2, #0]
 80078e0:	2750      	movs	r7, #80	; 0x50
 80078e2:	e70c      	b.n	80076fe <__gethex+0x12a>
 80078e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1f2      	bne.n	80078d0 <__gethex+0x2fc>
 80078ea:	e7d8      	b.n	800789e <__gethex+0x2ca>
 80078ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1d5      	bne.n	800789e <__gethex+0x2ca>
 80078f2:	e7ed      	b.n	80078d0 <__gethex+0x2fc>
 80078f4:	1e6f      	subs	r7, r5, #1
 80078f6:	f1ba 0f00 	cmp.w	sl, #0
 80078fa:	d131      	bne.n	8007960 <__gethex+0x38c>
 80078fc:	b127      	cbz	r7, 8007908 <__gethex+0x334>
 80078fe:	4639      	mov	r1, r7
 8007900:	4620      	mov	r0, r4
 8007902:	f000 fe3b 	bl	800857c <__any_on>
 8007906:	4682      	mov	sl, r0
 8007908:	117b      	asrs	r3, r7, #5
 800790a:	2101      	movs	r1, #1
 800790c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007910:	f007 071f 	and.w	r7, r7, #31
 8007914:	fa01 f707 	lsl.w	r7, r1, r7
 8007918:	421f      	tst	r7, r3
 800791a:	4629      	mov	r1, r5
 800791c:	4620      	mov	r0, r4
 800791e:	bf18      	it	ne
 8007920:	f04a 0a02 	orrne.w	sl, sl, #2
 8007924:	1b76      	subs	r6, r6, r5
 8007926:	f7ff fded 	bl	8007504 <rshift>
 800792a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800792e:	2702      	movs	r7, #2
 8007930:	f1ba 0f00 	cmp.w	sl, #0
 8007934:	d048      	beq.n	80079c8 <__gethex+0x3f4>
 8007936:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800793a:	2b02      	cmp	r3, #2
 800793c:	d015      	beq.n	800796a <__gethex+0x396>
 800793e:	2b03      	cmp	r3, #3
 8007940:	d017      	beq.n	8007972 <__gethex+0x39e>
 8007942:	2b01      	cmp	r3, #1
 8007944:	d109      	bne.n	800795a <__gethex+0x386>
 8007946:	f01a 0f02 	tst.w	sl, #2
 800794a:	d006      	beq.n	800795a <__gethex+0x386>
 800794c:	f8d9 0000 	ldr.w	r0, [r9]
 8007950:	ea4a 0a00 	orr.w	sl, sl, r0
 8007954:	f01a 0f01 	tst.w	sl, #1
 8007958:	d10e      	bne.n	8007978 <__gethex+0x3a4>
 800795a:	f047 0710 	orr.w	r7, r7, #16
 800795e:	e033      	b.n	80079c8 <__gethex+0x3f4>
 8007960:	f04f 0a01 	mov.w	sl, #1
 8007964:	e7d0      	b.n	8007908 <__gethex+0x334>
 8007966:	2701      	movs	r7, #1
 8007968:	e7e2      	b.n	8007930 <__gethex+0x35c>
 800796a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800796c:	f1c3 0301 	rsb	r3, r3, #1
 8007970:	9315      	str	r3, [sp, #84]	; 0x54
 8007972:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007974:	2b00      	cmp	r3, #0
 8007976:	d0f0      	beq.n	800795a <__gethex+0x386>
 8007978:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800797c:	f104 0314 	add.w	r3, r4, #20
 8007980:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007984:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007988:	f04f 0c00 	mov.w	ip, #0
 800798c:	4618      	mov	r0, r3
 800798e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007992:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007996:	d01c      	beq.n	80079d2 <__gethex+0x3fe>
 8007998:	3201      	adds	r2, #1
 800799a:	6002      	str	r2, [r0, #0]
 800799c:	2f02      	cmp	r7, #2
 800799e:	f104 0314 	add.w	r3, r4, #20
 80079a2:	d13f      	bne.n	8007a24 <__gethex+0x450>
 80079a4:	f8d8 2000 	ldr.w	r2, [r8]
 80079a8:	3a01      	subs	r2, #1
 80079aa:	42b2      	cmp	r2, r6
 80079ac:	d10a      	bne.n	80079c4 <__gethex+0x3f0>
 80079ae:	1171      	asrs	r1, r6, #5
 80079b0:	2201      	movs	r2, #1
 80079b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80079b6:	f006 061f 	and.w	r6, r6, #31
 80079ba:	fa02 f606 	lsl.w	r6, r2, r6
 80079be:	421e      	tst	r6, r3
 80079c0:	bf18      	it	ne
 80079c2:	4617      	movne	r7, r2
 80079c4:	f047 0720 	orr.w	r7, r7, #32
 80079c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079ca:	601c      	str	r4, [r3, #0]
 80079cc:	9b04      	ldr	r3, [sp, #16]
 80079ce:	601d      	str	r5, [r3, #0]
 80079d0:	e695      	b.n	80076fe <__gethex+0x12a>
 80079d2:	4299      	cmp	r1, r3
 80079d4:	f843 cc04 	str.w	ip, [r3, #-4]
 80079d8:	d8d8      	bhi.n	800798c <__gethex+0x3b8>
 80079da:	68a3      	ldr	r3, [r4, #8]
 80079dc:	459b      	cmp	fp, r3
 80079de:	db19      	blt.n	8007a14 <__gethex+0x440>
 80079e0:	6861      	ldr	r1, [r4, #4]
 80079e2:	ee18 0a10 	vmov	r0, s16
 80079e6:	3101      	adds	r1, #1
 80079e8:	f000 f928 	bl	8007c3c <_Balloc>
 80079ec:	4681      	mov	r9, r0
 80079ee:	b918      	cbnz	r0, 80079f8 <__gethex+0x424>
 80079f0:	4b1a      	ldr	r3, [pc, #104]	; (8007a5c <__gethex+0x488>)
 80079f2:	4602      	mov	r2, r0
 80079f4:	2184      	movs	r1, #132	; 0x84
 80079f6:	e6a8      	b.n	800774a <__gethex+0x176>
 80079f8:	6922      	ldr	r2, [r4, #16]
 80079fa:	3202      	adds	r2, #2
 80079fc:	f104 010c 	add.w	r1, r4, #12
 8007a00:	0092      	lsls	r2, r2, #2
 8007a02:	300c      	adds	r0, #12
 8007a04:	f000 f90c 	bl	8007c20 <memcpy>
 8007a08:	4621      	mov	r1, r4
 8007a0a:	ee18 0a10 	vmov	r0, s16
 8007a0e:	f000 f955 	bl	8007cbc <_Bfree>
 8007a12:	464c      	mov	r4, r9
 8007a14:	6923      	ldr	r3, [r4, #16]
 8007a16:	1c5a      	adds	r2, r3, #1
 8007a18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a1c:	6122      	str	r2, [r4, #16]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	615a      	str	r2, [r3, #20]
 8007a22:	e7bb      	b.n	800799c <__gethex+0x3c8>
 8007a24:	6922      	ldr	r2, [r4, #16]
 8007a26:	455a      	cmp	r2, fp
 8007a28:	dd0b      	ble.n	8007a42 <__gethex+0x46e>
 8007a2a:	2101      	movs	r1, #1
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	f7ff fd69 	bl	8007504 <rshift>
 8007a32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007a36:	3501      	adds	r5, #1
 8007a38:	42ab      	cmp	r3, r5
 8007a3a:	f6ff aed0 	blt.w	80077de <__gethex+0x20a>
 8007a3e:	2701      	movs	r7, #1
 8007a40:	e7c0      	b.n	80079c4 <__gethex+0x3f0>
 8007a42:	f016 061f 	ands.w	r6, r6, #31
 8007a46:	d0fa      	beq.n	8007a3e <__gethex+0x46a>
 8007a48:	4453      	add	r3, sl
 8007a4a:	f1c6 0620 	rsb	r6, r6, #32
 8007a4e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007a52:	f000 f9e5 	bl	8007e20 <__hi0bits>
 8007a56:	42b0      	cmp	r0, r6
 8007a58:	dbe7      	blt.n	8007a2a <__gethex+0x456>
 8007a5a:	e7f0      	b.n	8007a3e <__gethex+0x46a>
 8007a5c:	0800a608 	.word	0x0800a608

08007a60 <L_shift>:
 8007a60:	f1c2 0208 	rsb	r2, r2, #8
 8007a64:	0092      	lsls	r2, r2, #2
 8007a66:	b570      	push	{r4, r5, r6, lr}
 8007a68:	f1c2 0620 	rsb	r6, r2, #32
 8007a6c:	6843      	ldr	r3, [r0, #4]
 8007a6e:	6804      	ldr	r4, [r0, #0]
 8007a70:	fa03 f506 	lsl.w	r5, r3, r6
 8007a74:	432c      	orrs	r4, r5
 8007a76:	40d3      	lsrs	r3, r2
 8007a78:	6004      	str	r4, [r0, #0]
 8007a7a:	f840 3f04 	str.w	r3, [r0, #4]!
 8007a7e:	4288      	cmp	r0, r1
 8007a80:	d3f4      	bcc.n	8007a6c <L_shift+0xc>
 8007a82:	bd70      	pop	{r4, r5, r6, pc}

08007a84 <__match>:
 8007a84:	b530      	push	{r4, r5, lr}
 8007a86:	6803      	ldr	r3, [r0, #0]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a8e:	b914      	cbnz	r4, 8007a96 <__match+0x12>
 8007a90:	6003      	str	r3, [r0, #0]
 8007a92:	2001      	movs	r0, #1
 8007a94:	bd30      	pop	{r4, r5, pc}
 8007a96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a9a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007a9e:	2d19      	cmp	r5, #25
 8007aa0:	bf98      	it	ls
 8007aa2:	3220      	addls	r2, #32
 8007aa4:	42a2      	cmp	r2, r4
 8007aa6:	d0f0      	beq.n	8007a8a <__match+0x6>
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	e7f3      	b.n	8007a94 <__match+0x10>

08007aac <__hexnan>:
 8007aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab0:	680b      	ldr	r3, [r1, #0]
 8007ab2:	115e      	asrs	r6, r3, #5
 8007ab4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007ab8:	f013 031f 	ands.w	r3, r3, #31
 8007abc:	b087      	sub	sp, #28
 8007abe:	bf18      	it	ne
 8007ac0:	3604      	addne	r6, #4
 8007ac2:	2500      	movs	r5, #0
 8007ac4:	1f37      	subs	r7, r6, #4
 8007ac6:	4690      	mov	r8, r2
 8007ac8:	6802      	ldr	r2, [r0, #0]
 8007aca:	9301      	str	r3, [sp, #4]
 8007acc:	4682      	mov	sl, r0
 8007ace:	f846 5c04 	str.w	r5, [r6, #-4]
 8007ad2:	46b9      	mov	r9, r7
 8007ad4:	463c      	mov	r4, r7
 8007ad6:	9502      	str	r5, [sp, #8]
 8007ad8:	46ab      	mov	fp, r5
 8007ada:	7851      	ldrb	r1, [r2, #1]
 8007adc:	1c53      	adds	r3, r2, #1
 8007ade:	9303      	str	r3, [sp, #12]
 8007ae0:	b341      	cbz	r1, 8007b34 <__hexnan+0x88>
 8007ae2:	4608      	mov	r0, r1
 8007ae4:	9205      	str	r2, [sp, #20]
 8007ae6:	9104      	str	r1, [sp, #16]
 8007ae8:	f7ff fd5e 	bl	80075a8 <__hexdig_fun>
 8007aec:	2800      	cmp	r0, #0
 8007aee:	d14f      	bne.n	8007b90 <__hexnan+0xe4>
 8007af0:	9904      	ldr	r1, [sp, #16]
 8007af2:	9a05      	ldr	r2, [sp, #20]
 8007af4:	2920      	cmp	r1, #32
 8007af6:	d818      	bhi.n	8007b2a <__hexnan+0x7e>
 8007af8:	9b02      	ldr	r3, [sp, #8]
 8007afa:	459b      	cmp	fp, r3
 8007afc:	dd13      	ble.n	8007b26 <__hexnan+0x7a>
 8007afe:	454c      	cmp	r4, r9
 8007b00:	d206      	bcs.n	8007b10 <__hexnan+0x64>
 8007b02:	2d07      	cmp	r5, #7
 8007b04:	dc04      	bgt.n	8007b10 <__hexnan+0x64>
 8007b06:	462a      	mov	r2, r5
 8007b08:	4649      	mov	r1, r9
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	f7ff ffa8 	bl	8007a60 <L_shift>
 8007b10:	4544      	cmp	r4, r8
 8007b12:	d950      	bls.n	8007bb6 <__hexnan+0x10a>
 8007b14:	2300      	movs	r3, #0
 8007b16:	f1a4 0904 	sub.w	r9, r4, #4
 8007b1a:	f844 3c04 	str.w	r3, [r4, #-4]
 8007b1e:	f8cd b008 	str.w	fp, [sp, #8]
 8007b22:	464c      	mov	r4, r9
 8007b24:	461d      	mov	r5, r3
 8007b26:	9a03      	ldr	r2, [sp, #12]
 8007b28:	e7d7      	b.n	8007ada <__hexnan+0x2e>
 8007b2a:	2929      	cmp	r1, #41	; 0x29
 8007b2c:	d156      	bne.n	8007bdc <__hexnan+0x130>
 8007b2e:	3202      	adds	r2, #2
 8007b30:	f8ca 2000 	str.w	r2, [sl]
 8007b34:	f1bb 0f00 	cmp.w	fp, #0
 8007b38:	d050      	beq.n	8007bdc <__hexnan+0x130>
 8007b3a:	454c      	cmp	r4, r9
 8007b3c:	d206      	bcs.n	8007b4c <__hexnan+0xa0>
 8007b3e:	2d07      	cmp	r5, #7
 8007b40:	dc04      	bgt.n	8007b4c <__hexnan+0xa0>
 8007b42:	462a      	mov	r2, r5
 8007b44:	4649      	mov	r1, r9
 8007b46:	4620      	mov	r0, r4
 8007b48:	f7ff ff8a 	bl	8007a60 <L_shift>
 8007b4c:	4544      	cmp	r4, r8
 8007b4e:	d934      	bls.n	8007bba <__hexnan+0x10e>
 8007b50:	f1a8 0204 	sub.w	r2, r8, #4
 8007b54:	4623      	mov	r3, r4
 8007b56:	f853 1b04 	ldr.w	r1, [r3], #4
 8007b5a:	f842 1f04 	str.w	r1, [r2, #4]!
 8007b5e:	429f      	cmp	r7, r3
 8007b60:	d2f9      	bcs.n	8007b56 <__hexnan+0xaa>
 8007b62:	1b3b      	subs	r3, r7, r4
 8007b64:	f023 0303 	bic.w	r3, r3, #3
 8007b68:	3304      	adds	r3, #4
 8007b6a:	3401      	adds	r4, #1
 8007b6c:	3e03      	subs	r6, #3
 8007b6e:	42b4      	cmp	r4, r6
 8007b70:	bf88      	it	hi
 8007b72:	2304      	movhi	r3, #4
 8007b74:	4443      	add	r3, r8
 8007b76:	2200      	movs	r2, #0
 8007b78:	f843 2b04 	str.w	r2, [r3], #4
 8007b7c:	429f      	cmp	r7, r3
 8007b7e:	d2fb      	bcs.n	8007b78 <__hexnan+0xcc>
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	b91b      	cbnz	r3, 8007b8c <__hexnan+0xe0>
 8007b84:	4547      	cmp	r7, r8
 8007b86:	d127      	bne.n	8007bd8 <__hexnan+0x12c>
 8007b88:	2301      	movs	r3, #1
 8007b8a:	603b      	str	r3, [r7, #0]
 8007b8c:	2005      	movs	r0, #5
 8007b8e:	e026      	b.n	8007bde <__hexnan+0x132>
 8007b90:	3501      	adds	r5, #1
 8007b92:	2d08      	cmp	r5, #8
 8007b94:	f10b 0b01 	add.w	fp, fp, #1
 8007b98:	dd06      	ble.n	8007ba8 <__hexnan+0xfc>
 8007b9a:	4544      	cmp	r4, r8
 8007b9c:	d9c3      	bls.n	8007b26 <__hexnan+0x7a>
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	f844 3c04 	str.w	r3, [r4, #-4]
 8007ba4:	2501      	movs	r5, #1
 8007ba6:	3c04      	subs	r4, #4
 8007ba8:	6822      	ldr	r2, [r4, #0]
 8007baa:	f000 000f 	and.w	r0, r0, #15
 8007bae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007bb2:	6022      	str	r2, [r4, #0]
 8007bb4:	e7b7      	b.n	8007b26 <__hexnan+0x7a>
 8007bb6:	2508      	movs	r5, #8
 8007bb8:	e7b5      	b.n	8007b26 <__hexnan+0x7a>
 8007bba:	9b01      	ldr	r3, [sp, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d0df      	beq.n	8007b80 <__hexnan+0xd4>
 8007bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8007bc4:	f1c3 0320 	rsb	r3, r3, #32
 8007bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bcc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007bd0:	401a      	ands	r2, r3
 8007bd2:	f846 2c04 	str.w	r2, [r6, #-4]
 8007bd6:	e7d3      	b.n	8007b80 <__hexnan+0xd4>
 8007bd8:	3f04      	subs	r7, #4
 8007bda:	e7d1      	b.n	8007b80 <__hexnan+0xd4>
 8007bdc:	2004      	movs	r0, #4
 8007bde:	b007      	add	sp, #28
 8007be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007be4 <_localeconv_r>:
 8007be4:	4800      	ldr	r0, [pc, #0]	; (8007be8 <_localeconv_r+0x4>)
 8007be6:	4770      	bx	lr
 8007be8:	200001d8 	.word	0x200001d8

08007bec <malloc>:
 8007bec:	4b02      	ldr	r3, [pc, #8]	; (8007bf8 <malloc+0xc>)
 8007bee:	4601      	mov	r1, r0
 8007bf0:	6818      	ldr	r0, [r3, #0]
 8007bf2:	f000 bd67 	b.w	80086c4 <_malloc_r>
 8007bf6:	bf00      	nop
 8007bf8:	20000080 	.word	0x20000080

08007bfc <__ascii_mbtowc>:
 8007bfc:	b082      	sub	sp, #8
 8007bfe:	b901      	cbnz	r1, 8007c02 <__ascii_mbtowc+0x6>
 8007c00:	a901      	add	r1, sp, #4
 8007c02:	b142      	cbz	r2, 8007c16 <__ascii_mbtowc+0x1a>
 8007c04:	b14b      	cbz	r3, 8007c1a <__ascii_mbtowc+0x1e>
 8007c06:	7813      	ldrb	r3, [r2, #0]
 8007c08:	600b      	str	r3, [r1, #0]
 8007c0a:	7812      	ldrb	r2, [r2, #0]
 8007c0c:	1e10      	subs	r0, r2, #0
 8007c0e:	bf18      	it	ne
 8007c10:	2001      	movne	r0, #1
 8007c12:	b002      	add	sp, #8
 8007c14:	4770      	bx	lr
 8007c16:	4610      	mov	r0, r2
 8007c18:	e7fb      	b.n	8007c12 <__ascii_mbtowc+0x16>
 8007c1a:	f06f 0001 	mvn.w	r0, #1
 8007c1e:	e7f8      	b.n	8007c12 <__ascii_mbtowc+0x16>

08007c20 <memcpy>:
 8007c20:	440a      	add	r2, r1
 8007c22:	4291      	cmp	r1, r2
 8007c24:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c28:	d100      	bne.n	8007c2c <memcpy+0xc>
 8007c2a:	4770      	bx	lr
 8007c2c:	b510      	push	{r4, lr}
 8007c2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c36:	4291      	cmp	r1, r2
 8007c38:	d1f9      	bne.n	8007c2e <memcpy+0xe>
 8007c3a:	bd10      	pop	{r4, pc}

08007c3c <_Balloc>:
 8007c3c:	b570      	push	{r4, r5, r6, lr}
 8007c3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c40:	4604      	mov	r4, r0
 8007c42:	460d      	mov	r5, r1
 8007c44:	b976      	cbnz	r6, 8007c64 <_Balloc+0x28>
 8007c46:	2010      	movs	r0, #16
 8007c48:	f7ff ffd0 	bl	8007bec <malloc>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	6260      	str	r0, [r4, #36]	; 0x24
 8007c50:	b920      	cbnz	r0, 8007c5c <_Balloc+0x20>
 8007c52:	4b18      	ldr	r3, [pc, #96]	; (8007cb4 <_Balloc+0x78>)
 8007c54:	4818      	ldr	r0, [pc, #96]	; (8007cb8 <_Balloc+0x7c>)
 8007c56:	2166      	movs	r1, #102	; 0x66
 8007c58:	f000 ff40 	bl	8008adc <__assert_func>
 8007c5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c60:	6006      	str	r6, [r0, #0]
 8007c62:	60c6      	str	r6, [r0, #12]
 8007c64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c66:	68f3      	ldr	r3, [r6, #12]
 8007c68:	b183      	cbz	r3, 8007c8c <_Balloc+0x50>
 8007c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c72:	b9b8      	cbnz	r0, 8007ca4 <_Balloc+0x68>
 8007c74:	2101      	movs	r1, #1
 8007c76:	fa01 f605 	lsl.w	r6, r1, r5
 8007c7a:	1d72      	adds	r2, r6, #5
 8007c7c:	0092      	lsls	r2, r2, #2
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f000 fc9d 	bl	80085be <_calloc_r>
 8007c84:	b160      	cbz	r0, 8007ca0 <_Balloc+0x64>
 8007c86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c8a:	e00e      	b.n	8007caa <_Balloc+0x6e>
 8007c8c:	2221      	movs	r2, #33	; 0x21
 8007c8e:	2104      	movs	r1, #4
 8007c90:	4620      	mov	r0, r4
 8007c92:	f000 fc94 	bl	80085be <_calloc_r>
 8007c96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c98:	60f0      	str	r0, [r6, #12]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1e4      	bne.n	8007c6a <_Balloc+0x2e>
 8007ca0:	2000      	movs	r0, #0
 8007ca2:	bd70      	pop	{r4, r5, r6, pc}
 8007ca4:	6802      	ldr	r2, [r0, #0]
 8007ca6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007caa:	2300      	movs	r3, #0
 8007cac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007cb0:	e7f7      	b.n	8007ca2 <_Balloc+0x66>
 8007cb2:	bf00      	nop
 8007cb4:	0800a596 	.word	0x0800a596
 8007cb8:	0800a694 	.word	0x0800a694

08007cbc <_Bfree>:
 8007cbc:	b570      	push	{r4, r5, r6, lr}
 8007cbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007cc0:	4605      	mov	r5, r0
 8007cc2:	460c      	mov	r4, r1
 8007cc4:	b976      	cbnz	r6, 8007ce4 <_Bfree+0x28>
 8007cc6:	2010      	movs	r0, #16
 8007cc8:	f7ff ff90 	bl	8007bec <malloc>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	6268      	str	r0, [r5, #36]	; 0x24
 8007cd0:	b920      	cbnz	r0, 8007cdc <_Bfree+0x20>
 8007cd2:	4b09      	ldr	r3, [pc, #36]	; (8007cf8 <_Bfree+0x3c>)
 8007cd4:	4809      	ldr	r0, [pc, #36]	; (8007cfc <_Bfree+0x40>)
 8007cd6:	218a      	movs	r1, #138	; 0x8a
 8007cd8:	f000 ff00 	bl	8008adc <__assert_func>
 8007cdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ce0:	6006      	str	r6, [r0, #0]
 8007ce2:	60c6      	str	r6, [r0, #12]
 8007ce4:	b13c      	cbz	r4, 8007cf6 <_Bfree+0x3a>
 8007ce6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ce8:	6862      	ldr	r2, [r4, #4]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007cf0:	6021      	str	r1, [r4, #0]
 8007cf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007cf6:	bd70      	pop	{r4, r5, r6, pc}
 8007cf8:	0800a596 	.word	0x0800a596
 8007cfc:	0800a694 	.word	0x0800a694

08007d00 <__multadd>:
 8007d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d04:	690d      	ldr	r5, [r1, #16]
 8007d06:	4607      	mov	r7, r0
 8007d08:	460c      	mov	r4, r1
 8007d0a:	461e      	mov	r6, r3
 8007d0c:	f101 0c14 	add.w	ip, r1, #20
 8007d10:	2000      	movs	r0, #0
 8007d12:	f8dc 3000 	ldr.w	r3, [ip]
 8007d16:	b299      	uxth	r1, r3
 8007d18:	fb02 6101 	mla	r1, r2, r1, r6
 8007d1c:	0c1e      	lsrs	r6, r3, #16
 8007d1e:	0c0b      	lsrs	r3, r1, #16
 8007d20:	fb02 3306 	mla	r3, r2, r6, r3
 8007d24:	b289      	uxth	r1, r1
 8007d26:	3001      	adds	r0, #1
 8007d28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d2c:	4285      	cmp	r5, r0
 8007d2e:	f84c 1b04 	str.w	r1, [ip], #4
 8007d32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d36:	dcec      	bgt.n	8007d12 <__multadd+0x12>
 8007d38:	b30e      	cbz	r6, 8007d7e <__multadd+0x7e>
 8007d3a:	68a3      	ldr	r3, [r4, #8]
 8007d3c:	42ab      	cmp	r3, r5
 8007d3e:	dc19      	bgt.n	8007d74 <__multadd+0x74>
 8007d40:	6861      	ldr	r1, [r4, #4]
 8007d42:	4638      	mov	r0, r7
 8007d44:	3101      	adds	r1, #1
 8007d46:	f7ff ff79 	bl	8007c3c <_Balloc>
 8007d4a:	4680      	mov	r8, r0
 8007d4c:	b928      	cbnz	r0, 8007d5a <__multadd+0x5a>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	4b0c      	ldr	r3, [pc, #48]	; (8007d84 <__multadd+0x84>)
 8007d52:	480d      	ldr	r0, [pc, #52]	; (8007d88 <__multadd+0x88>)
 8007d54:	21b5      	movs	r1, #181	; 0xb5
 8007d56:	f000 fec1 	bl	8008adc <__assert_func>
 8007d5a:	6922      	ldr	r2, [r4, #16]
 8007d5c:	3202      	adds	r2, #2
 8007d5e:	f104 010c 	add.w	r1, r4, #12
 8007d62:	0092      	lsls	r2, r2, #2
 8007d64:	300c      	adds	r0, #12
 8007d66:	f7ff ff5b 	bl	8007c20 <memcpy>
 8007d6a:	4621      	mov	r1, r4
 8007d6c:	4638      	mov	r0, r7
 8007d6e:	f7ff ffa5 	bl	8007cbc <_Bfree>
 8007d72:	4644      	mov	r4, r8
 8007d74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d78:	3501      	adds	r5, #1
 8007d7a:	615e      	str	r6, [r3, #20]
 8007d7c:	6125      	str	r5, [r4, #16]
 8007d7e:	4620      	mov	r0, r4
 8007d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d84:	0800a608 	.word	0x0800a608
 8007d88:	0800a694 	.word	0x0800a694

08007d8c <__s2b>:
 8007d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d90:	460c      	mov	r4, r1
 8007d92:	4615      	mov	r5, r2
 8007d94:	461f      	mov	r7, r3
 8007d96:	2209      	movs	r2, #9
 8007d98:	3308      	adds	r3, #8
 8007d9a:	4606      	mov	r6, r0
 8007d9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007da0:	2100      	movs	r1, #0
 8007da2:	2201      	movs	r2, #1
 8007da4:	429a      	cmp	r2, r3
 8007da6:	db09      	blt.n	8007dbc <__s2b+0x30>
 8007da8:	4630      	mov	r0, r6
 8007daa:	f7ff ff47 	bl	8007c3c <_Balloc>
 8007dae:	b940      	cbnz	r0, 8007dc2 <__s2b+0x36>
 8007db0:	4602      	mov	r2, r0
 8007db2:	4b19      	ldr	r3, [pc, #100]	; (8007e18 <__s2b+0x8c>)
 8007db4:	4819      	ldr	r0, [pc, #100]	; (8007e1c <__s2b+0x90>)
 8007db6:	21ce      	movs	r1, #206	; 0xce
 8007db8:	f000 fe90 	bl	8008adc <__assert_func>
 8007dbc:	0052      	lsls	r2, r2, #1
 8007dbe:	3101      	adds	r1, #1
 8007dc0:	e7f0      	b.n	8007da4 <__s2b+0x18>
 8007dc2:	9b08      	ldr	r3, [sp, #32]
 8007dc4:	6143      	str	r3, [r0, #20]
 8007dc6:	2d09      	cmp	r5, #9
 8007dc8:	f04f 0301 	mov.w	r3, #1
 8007dcc:	6103      	str	r3, [r0, #16]
 8007dce:	dd16      	ble.n	8007dfe <__s2b+0x72>
 8007dd0:	f104 0909 	add.w	r9, r4, #9
 8007dd4:	46c8      	mov	r8, r9
 8007dd6:	442c      	add	r4, r5
 8007dd8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007ddc:	4601      	mov	r1, r0
 8007dde:	3b30      	subs	r3, #48	; 0x30
 8007de0:	220a      	movs	r2, #10
 8007de2:	4630      	mov	r0, r6
 8007de4:	f7ff ff8c 	bl	8007d00 <__multadd>
 8007de8:	45a0      	cmp	r8, r4
 8007dea:	d1f5      	bne.n	8007dd8 <__s2b+0x4c>
 8007dec:	f1a5 0408 	sub.w	r4, r5, #8
 8007df0:	444c      	add	r4, r9
 8007df2:	1b2d      	subs	r5, r5, r4
 8007df4:	1963      	adds	r3, r4, r5
 8007df6:	42bb      	cmp	r3, r7
 8007df8:	db04      	blt.n	8007e04 <__s2b+0x78>
 8007dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dfe:	340a      	adds	r4, #10
 8007e00:	2509      	movs	r5, #9
 8007e02:	e7f6      	b.n	8007df2 <__s2b+0x66>
 8007e04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007e08:	4601      	mov	r1, r0
 8007e0a:	3b30      	subs	r3, #48	; 0x30
 8007e0c:	220a      	movs	r2, #10
 8007e0e:	4630      	mov	r0, r6
 8007e10:	f7ff ff76 	bl	8007d00 <__multadd>
 8007e14:	e7ee      	b.n	8007df4 <__s2b+0x68>
 8007e16:	bf00      	nop
 8007e18:	0800a608 	.word	0x0800a608
 8007e1c:	0800a694 	.word	0x0800a694

08007e20 <__hi0bits>:
 8007e20:	0c03      	lsrs	r3, r0, #16
 8007e22:	041b      	lsls	r3, r3, #16
 8007e24:	b9d3      	cbnz	r3, 8007e5c <__hi0bits+0x3c>
 8007e26:	0400      	lsls	r0, r0, #16
 8007e28:	2310      	movs	r3, #16
 8007e2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007e2e:	bf04      	itt	eq
 8007e30:	0200      	lsleq	r0, r0, #8
 8007e32:	3308      	addeq	r3, #8
 8007e34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007e38:	bf04      	itt	eq
 8007e3a:	0100      	lsleq	r0, r0, #4
 8007e3c:	3304      	addeq	r3, #4
 8007e3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007e42:	bf04      	itt	eq
 8007e44:	0080      	lsleq	r0, r0, #2
 8007e46:	3302      	addeq	r3, #2
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	db05      	blt.n	8007e58 <__hi0bits+0x38>
 8007e4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007e50:	f103 0301 	add.w	r3, r3, #1
 8007e54:	bf08      	it	eq
 8007e56:	2320      	moveq	r3, #32
 8007e58:	4618      	mov	r0, r3
 8007e5a:	4770      	bx	lr
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	e7e4      	b.n	8007e2a <__hi0bits+0xa>

08007e60 <__lo0bits>:
 8007e60:	6803      	ldr	r3, [r0, #0]
 8007e62:	f013 0207 	ands.w	r2, r3, #7
 8007e66:	4601      	mov	r1, r0
 8007e68:	d00b      	beq.n	8007e82 <__lo0bits+0x22>
 8007e6a:	07da      	lsls	r2, r3, #31
 8007e6c:	d423      	bmi.n	8007eb6 <__lo0bits+0x56>
 8007e6e:	0798      	lsls	r0, r3, #30
 8007e70:	bf49      	itett	mi
 8007e72:	085b      	lsrmi	r3, r3, #1
 8007e74:	089b      	lsrpl	r3, r3, #2
 8007e76:	2001      	movmi	r0, #1
 8007e78:	600b      	strmi	r3, [r1, #0]
 8007e7a:	bf5c      	itt	pl
 8007e7c:	600b      	strpl	r3, [r1, #0]
 8007e7e:	2002      	movpl	r0, #2
 8007e80:	4770      	bx	lr
 8007e82:	b298      	uxth	r0, r3
 8007e84:	b9a8      	cbnz	r0, 8007eb2 <__lo0bits+0x52>
 8007e86:	0c1b      	lsrs	r3, r3, #16
 8007e88:	2010      	movs	r0, #16
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	b90a      	cbnz	r2, 8007e92 <__lo0bits+0x32>
 8007e8e:	3008      	adds	r0, #8
 8007e90:	0a1b      	lsrs	r3, r3, #8
 8007e92:	071a      	lsls	r2, r3, #28
 8007e94:	bf04      	itt	eq
 8007e96:	091b      	lsreq	r3, r3, #4
 8007e98:	3004      	addeq	r0, #4
 8007e9a:	079a      	lsls	r2, r3, #30
 8007e9c:	bf04      	itt	eq
 8007e9e:	089b      	lsreq	r3, r3, #2
 8007ea0:	3002      	addeq	r0, #2
 8007ea2:	07da      	lsls	r2, r3, #31
 8007ea4:	d403      	bmi.n	8007eae <__lo0bits+0x4e>
 8007ea6:	085b      	lsrs	r3, r3, #1
 8007ea8:	f100 0001 	add.w	r0, r0, #1
 8007eac:	d005      	beq.n	8007eba <__lo0bits+0x5a>
 8007eae:	600b      	str	r3, [r1, #0]
 8007eb0:	4770      	bx	lr
 8007eb2:	4610      	mov	r0, r2
 8007eb4:	e7e9      	b.n	8007e8a <__lo0bits+0x2a>
 8007eb6:	2000      	movs	r0, #0
 8007eb8:	4770      	bx	lr
 8007eba:	2020      	movs	r0, #32
 8007ebc:	4770      	bx	lr
	...

08007ec0 <__i2b>:
 8007ec0:	b510      	push	{r4, lr}
 8007ec2:	460c      	mov	r4, r1
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	f7ff feb9 	bl	8007c3c <_Balloc>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	b928      	cbnz	r0, 8007eda <__i2b+0x1a>
 8007ece:	4b05      	ldr	r3, [pc, #20]	; (8007ee4 <__i2b+0x24>)
 8007ed0:	4805      	ldr	r0, [pc, #20]	; (8007ee8 <__i2b+0x28>)
 8007ed2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007ed6:	f000 fe01 	bl	8008adc <__assert_func>
 8007eda:	2301      	movs	r3, #1
 8007edc:	6144      	str	r4, [r0, #20]
 8007ede:	6103      	str	r3, [r0, #16]
 8007ee0:	bd10      	pop	{r4, pc}
 8007ee2:	bf00      	nop
 8007ee4:	0800a608 	.word	0x0800a608
 8007ee8:	0800a694 	.word	0x0800a694

08007eec <__multiply>:
 8007eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef0:	4691      	mov	r9, r2
 8007ef2:	690a      	ldr	r2, [r1, #16]
 8007ef4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	bfb8      	it	lt
 8007efc:	460b      	movlt	r3, r1
 8007efe:	460c      	mov	r4, r1
 8007f00:	bfbc      	itt	lt
 8007f02:	464c      	movlt	r4, r9
 8007f04:	4699      	movlt	r9, r3
 8007f06:	6927      	ldr	r7, [r4, #16]
 8007f08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007f0c:	68a3      	ldr	r3, [r4, #8]
 8007f0e:	6861      	ldr	r1, [r4, #4]
 8007f10:	eb07 060a 	add.w	r6, r7, sl
 8007f14:	42b3      	cmp	r3, r6
 8007f16:	b085      	sub	sp, #20
 8007f18:	bfb8      	it	lt
 8007f1a:	3101      	addlt	r1, #1
 8007f1c:	f7ff fe8e 	bl	8007c3c <_Balloc>
 8007f20:	b930      	cbnz	r0, 8007f30 <__multiply+0x44>
 8007f22:	4602      	mov	r2, r0
 8007f24:	4b44      	ldr	r3, [pc, #272]	; (8008038 <__multiply+0x14c>)
 8007f26:	4845      	ldr	r0, [pc, #276]	; (800803c <__multiply+0x150>)
 8007f28:	f240 115d 	movw	r1, #349	; 0x15d
 8007f2c:	f000 fdd6 	bl	8008adc <__assert_func>
 8007f30:	f100 0514 	add.w	r5, r0, #20
 8007f34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007f38:	462b      	mov	r3, r5
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	4543      	cmp	r3, r8
 8007f3e:	d321      	bcc.n	8007f84 <__multiply+0x98>
 8007f40:	f104 0314 	add.w	r3, r4, #20
 8007f44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007f48:	f109 0314 	add.w	r3, r9, #20
 8007f4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007f50:	9202      	str	r2, [sp, #8]
 8007f52:	1b3a      	subs	r2, r7, r4
 8007f54:	3a15      	subs	r2, #21
 8007f56:	f022 0203 	bic.w	r2, r2, #3
 8007f5a:	3204      	adds	r2, #4
 8007f5c:	f104 0115 	add.w	r1, r4, #21
 8007f60:	428f      	cmp	r7, r1
 8007f62:	bf38      	it	cc
 8007f64:	2204      	movcc	r2, #4
 8007f66:	9201      	str	r2, [sp, #4]
 8007f68:	9a02      	ldr	r2, [sp, #8]
 8007f6a:	9303      	str	r3, [sp, #12]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d80c      	bhi.n	8007f8a <__multiply+0x9e>
 8007f70:	2e00      	cmp	r6, #0
 8007f72:	dd03      	ble.n	8007f7c <__multiply+0x90>
 8007f74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d05a      	beq.n	8008032 <__multiply+0x146>
 8007f7c:	6106      	str	r6, [r0, #16]
 8007f7e:	b005      	add	sp, #20
 8007f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f84:	f843 2b04 	str.w	r2, [r3], #4
 8007f88:	e7d8      	b.n	8007f3c <__multiply+0x50>
 8007f8a:	f8b3 a000 	ldrh.w	sl, [r3]
 8007f8e:	f1ba 0f00 	cmp.w	sl, #0
 8007f92:	d024      	beq.n	8007fde <__multiply+0xf2>
 8007f94:	f104 0e14 	add.w	lr, r4, #20
 8007f98:	46a9      	mov	r9, r5
 8007f9a:	f04f 0c00 	mov.w	ip, #0
 8007f9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007fa2:	f8d9 1000 	ldr.w	r1, [r9]
 8007fa6:	fa1f fb82 	uxth.w	fp, r2
 8007faa:	b289      	uxth	r1, r1
 8007fac:	fb0a 110b 	mla	r1, sl, fp, r1
 8007fb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007fb4:	f8d9 2000 	ldr.w	r2, [r9]
 8007fb8:	4461      	add	r1, ip
 8007fba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007fbe:	fb0a c20b 	mla	r2, sl, fp, ip
 8007fc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007fc6:	b289      	uxth	r1, r1
 8007fc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007fcc:	4577      	cmp	r7, lr
 8007fce:	f849 1b04 	str.w	r1, [r9], #4
 8007fd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007fd6:	d8e2      	bhi.n	8007f9e <__multiply+0xb2>
 8007fd8:	9a01      	ldr	r2, [sp, #4]
 8007fda:	f845 c002 	str.w	ip, [r5, r2]
 8007fde:	9a03      	ldr	r2, [sp, #12]
 8007fe0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007fe4:	3304      	adds	r3, #4
 8007fe6:	f1b9 0f00 	cmp.w	r9, #0
 8007fea:	d020      	beq.n	800802e <__multiply+0x142>
 8007fec:	6829      	ldr	r1, [r5, #0]
 8007fee:	f104 0c14 	add.w	ip, r4, #20
 8007ff2:	46ae      	mov	lr, r5
 8007ff4:	f04f 0a00 	mov.w	sl, #0
 8007ff8:	f8bc b000 	ldrh.w	fp, [ip]
 8007ffc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008000:	fb09 220b 	mla	r2, r9, fp, r2
 8008004:	4492      	add	sl, r2
 8008006:	b289      	uxth	r1, r1
 8008008:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800800c:	f84e 1b04 	str.w	r1, [lr], #4
 8008010:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008014:	f8be 1000 	ldrh.w	r1, [lr]
 8008018:	0c12      	lsrs	r2, r2, #16
 800801a:	fb09 1102 	mla	r1, r9, r2, r1
 800801e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008022:	4567      	cmp	r7, ip
 8008024:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008028:	d8e6      	bhi.n	8007ff8 <__multiply+0x10c>
 800802a:	9a01      	ldr	r2, [sp, #4]
 800802c:	50a9      	str	r1, [r5, r2]
 800802e:	3504      	adds	r5, #4
 8008030:	e79a      	b.n	8007f68 <__multiply+0x7c>
 8008032:	3e01      	subs	r6, #1
 8008034:	e79c      	b.n	8007f70 <__multiply+0x84>
 8008036:	bf00      	nop
 8008038:	0800a608 	.word	0x0800a608
 800803c:	0800a694 	.word	0x0800a694

08008040 <__pow5mult>:
 8008040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008044:	4615      	mov	r5, r2
 8008046:	f012 0203 	ands.w	r2, r2, #3
 800804a:	4606      	mov	r6, r0
 800804c:	460f      	mov	r7, r1
 800804e:	d007      	beq.n	8008060 <__pow5mult+0x20>
 8008050:	4c25      	ldr	r4, [pc, #148]	; (80080e8 <__pow5mult+0xa8>)
 8008052:	3a01      	subs	r2, #1
 8008054:	2300      	movs	r3, #0
 8008056:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800805a:	f7ff fe51 	bl	8007d00 <__multadd>
 800805e:	4607      	mov	r7, r0
 8008060:	10ad      	asrs	r5, r5, #2
 8008062:	d03d      	beq.n	80080e0 <__pow5mult+0xa0>
 8008064:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008066:	b97c      	cbnz	r4, 8008088 <__pow5mult+0x48>
 8008068:	2010      	movs	r0, #16
 800806a:	f7ff fdbf 	bl	8007bec <malloc>
 800806e:	4602      	mov	r2, r0
 8008070:	6270      	str	r0, [r6, #36]	; 0x24
 8008072:	b928      	cbnz	r0, 8008080 <__pow5mult+0x40>
 8008074:	4b1d      	ldr	r3, [pc, #116]	; (80080ec <__pow5mult+0xac>)
 8008076:	481e      	ldr	r0, [pc, #120]	; (80080f0 <__pow5mult+0xb0>)
 8008078:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800807c:	f000 fd2e 	bl	8008adc <__assert_func>
 8008080:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008084:	6004      	str	r4, [r0, #0]
 8008086:	60c4      	str	r4, [r0, #12]
 8008088:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800808c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008090:	b94c      	cbnz	r4, 80080a6 <__pow5mult+0x66>
 8008092:	f240 2171 	movw	r1, #625	; 0x271
 8008096:	4630      	mov	r0, r6
 8008098:	f7ff ff12 	bl	8007ec0 <__i2b>
 800809c:	2300      	movs	r3, #0
 800809e:	f8c8 0008 	str.w	r0, [r8, #8]
 80080a2:	4604      	mov	r4, r0
 80080a4:	6003      	str	r3, [r0, #0]
 80080a6:	f04f 0900 	mov.w	r9, #0
 80080aa:	07eb      	lsls	r3, r5, #31
 80080ac:	d50a      	bpl.n	80080c4 <__pow5mult+0x84>
 80080ae:	4639      	mov	r1, r7
 80080b0:	4622      	mov	r2, r4
 80080b2:	4630      	mov	r0, r6
 80080b4:	f7ff ff1a 	bl	8007eec <__multiply>
 80080b8:	4639      	mov	r1, r7
 80080ba:	4680      	mov	r8, r0
 80080bc:	4630      	mov	r0, r6
 80080be:	f7ff fdfd 	bl	8007cbc <_Bfree>
 80080c2:	4647      	mov	r7, r8
 80080c4:	106d      	asrs	r5, r5, #1
 80080c6:	d00b      	beq.n	80080e0 <__pow5mult+0xa0>
 80080c8:	6820      	ldr	r0, [r4, #0]
 80080ca:	b938      	cbnz	r0, 80080dc <__pow5mult+0x9c>
 80080cc:	4622      	mov	r2, r4
 80080ce:	4621      	mov	r1, r4
 80080d0:	4630      	mov	r0, r6
 80080d2:	f7ff ff0b 	bl	8007eec <__multiply>
 80080d6:	6020      	str	r0, [r4, #0]
 80080d8:	f8c0 9000 	str.w	r9, [r0]
 80080dc:	4604      	mov	r4, r0
 80080de:	e7e4      	b.n	80080aa <__pow5mult+0x6a>
 80080e0:	4638      	mov	r0, r7
 80080e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080e6:	bf00      	nop
 80080e8:	0800a7e0 	.word	0x0800a7e0
 80080ec:	0800a596 	.word	0x0800a596
 80080f0:	0800a694 	.word	0x0800a694

080080f4 <__lshift>:
 80080f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080f8:	460c      	mov	r4, r1
 80080fa:	6849      	ldr	r1, [r1, #4]
 80080fc:	6923      	ldr	r3, [r4, #16]
 80080fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008102:	68a3      	ldr	r3, [r4, #8]
 8008104:	4607      	mov	r7, r0
 8008106:	4691      	mov	r9, r2
 8008108:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800810c:	f108 0601 	add.w	r6, r8, #1
 8008110:	42b3      	cmp	r3, r6
 8008112:	db0b      	blt.n	800812c <__lshift+0x38>
 8008114:	4638      	mov	r0, r7
 8008116:	f7ff fd91 	bl	8007c3c <_Balloc>
 800811a:	4605      	mov	r5, r0
 800811c:	b948      	cbnz	r0, 8008132 <__lshift+0x3e>
 800811e:	4602      	mov	r2, r0
 8008120:	4b2a      	ldr	r3, [pc, #168]	; (80081cc <__lshift+0xd8>)
 8008122:	482b      	ldr	r0, [pc, #172]	; (80081d0 <__lshift+0xdc>)
 8008124:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008128:	f000 fcd8 	bl	8008adc <__assert_func>
 800812c:	3101      	adds	r1, #1
 800812e:	005b      	lsls	r3, r3, #1
 8008130:	e7ee      	b.n	8008110 <__lshift+0x1c>
 8008132:	2300      	movs	r3, #0
 8008134:	f100 0114 	add.w	r1, r0, #20
 8008138:	f100 0210 	add.w	r2, r0, #16
 800813c:	4618      	mov	r0, r3
 800813e:	4553      	cmp	r3, sl
 8008140:	db37      	blt.n	80081b2 <__lshift+0xbe>
 8008142:	6920      	ldr	r0, [r4, #16]
 8008144:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008148:	f104 0314 	add.w	r3, r4, #20
 800814c:	f019 091f 	ands.w	r9, r9, #31
 8008150:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008154:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008158:	d02f      	beq.n	80081ba <__lshift+0xc6>
 800815a:	f1c9 0e20 	rsb	lr, r9, #32
 800815e:	468a      	mov	sl, r1
 8008160:	f04f 0c00 	mov.w	ip, #0
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	fa02 f209 	lsl.w	r2, r2, r9
 800816a:	ea42 020c 	orr.w	r2, r2, ip
 800816e:	f84a 2b04 	str.w	r2, [sl], #4
 8008172:	f853 2b04 	ldr.w	r2, [r3], #4
 8008176:	4298      	cmp	r0, r3
 8008178:	fa22 fc0e 	lsr.w	ip, r2, lr
 800817c:	d8f2      	bhi.n	8008164 <__lshift+0x70>
 800817e:	1b03      	subs	r3, r0, r4
 8008180:	3b15      	subs	r3, #21
 8008182:	f023 0303 	bic.w	r3, r3, #3
 8008186:	3304      	adds	r3, #4
 8008188:	f104 0215 	add.w	r2, r4, #21
 800818c:	4290      	cmp	r0, r2
 800818e:	bf38      	it	cc
 8008190:	2304      	movcc	r3, #4
 8008192:	f841 c003 	str.w	ip, [r1, r3]
 8008196:	f1bc 0f00 	cmp.w	ip, #0
 800819a:	d001      	beq.n	80081a0 <__lshift+0xac>
 800819c:	f108 0602 	add.w	r6, r8, #2
 80081a0:	3e01      	subs	r6, #1
 80081a2:	4638      	mov	r0, r7
 80081a4:	612e      	str	r6, [r5, #16]
 80081a6:	4621      	mov	r1, r4
 80081a8:	f7ff fd88 	bl	8007cbc <_Bfree>
 80081ac:	4628      	mov	r0, r5
 80081ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80081b6:	3301      	adds	r3, #1
 80081b8:	e7c1      	b.n	800813e <__lshift+0x4a>
 80081ba:	3904      	subs	r1, #4
 80081bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80081c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80081c4:	4298      	cmp	r0, r3
 80081c6:	d8f9      	bhi.n	80081bc <__lshift+0xc8>
 80081c8:	e7ea      	b.n	80081a0 <__lshift+0xac>
 80081ca:	bf00      	nop
 80081cc:	0800a608 	.word	0x0800a608
 80081d0:	0800a694 	.word	0x0800a694

080081d4 <__mcmp>:
 80081d4:	b530      	push	{r4, r5, lr}
 80081d6:	6902      	ldr	r2, [r0, #16]
 80081d8:	690c      	ldr	r4, [r1, #16]
 80081da:	1b12      	subs	r2, r2, r4
 80081dc:	d10e      	bne.n	80081fc <__mcmp+0x28>
 80081de:	f100 0314 	add.w	r3, r0, #20
 80081e2:	3114      	adds	r1, #20
 80081e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80081e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80081ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80081f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80081f4:	42a5      	cmp	r5, r4
 80081f6:	d003      	beq.n	8008200 <__mcmp+0x2c>
 80081f8:	d305      	bcc.n	8008206 <__mcmp+0x32>
 80081fa:	2201      	movs	r2, #1
 80081fc:	4610      	mov	r0, r2
 80081fe:	bd30      	pop	{r4, r5, pc}
 8008200:	4283      	cmp	r3, r0
 8008202:	d3f3      	bcc.n	80081ec <__mcmp+0x18>
 8008204:	e7fa      	b.n	80081fc <__mcmp+0x28>
 8008206:	f04f 32ff 	mov.w	r2, #4294967295
 800820a:	e7f7      	b.n	80081fc <__mcmp+0x28>

0800820c <__mdiff>:
 800820c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008210:	460c      	mov	r4, r1
 8008212:	4606      	mov	r6, r0
 8008214:	4611      	mov	r1, r2
 8008216:	4620      	mov	r0, r4
 8008218:	4690      	mov	r8, r2
 800821a:	f7ff ffdb 	bl	80081d4 <__mcmp>
 800821e:	1e05      	subs	r5, r0, #0
 8008220:	d110      	bne.n	8008244 <__mdiff+0x38>
 8008222:	4629      	mov	r1, r5
 8008224:	4630      	mov	r0, r6
 8008226:	f7ff fd09 	bl	8007c3c <_Balloc>
 800822a:	b930      	cbnz	r0, 800823a <__mdiff+0x2e>
 800822c:	4b3a      	ldr	r3, [pc, #232]	; (8008318 <__mdiff+0x10c>)
 800822e:	4602      	mov	r2, r0
 8008230:	f240 2132 	movw	r1, #562	; 0x232
 8008234:	4839      	ldr	r0, [pc, #228]	; (800831c <__mdiff+0x110>)
 8008236:	f000 fc51 	bl	8008adc <__assert_func>
 800823a:	2301      	movs	r3, #1
 800823c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008240:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008244:	bfa4      	itt	ge
 8008246:	4643      	movge	r3, r8
 8008248:	46a0      	movge	r8, r4
 800824a:	4630      	mov	r0, r6
 800824c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008250:	bfa6      	itte	ge
 8008252:	461c      	movge	r4, r3
 8008254:	2500      	movge	r5, #0
 8008256:	2501      	movlt	r5, #1
 8008258:	f7ff fcf0 	bl	8007c3c <_Balloc>
 800825c:	b920      	cbnz	r0, 8008268 <__mdiff+0x5c>
 800825e:	4b2e      	ldr	r3, [pc, #184]	; (8008318 <__mdiff+0x10c>)
 8008260:	4602      	mov	r2, r0
 8008262:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008266:	e7e5      	b.n	8008234 <__mdiff+0x28>
 8008268:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800826c:	6926      	ldr	r6, [r4, #16]
 800826e:	60c5      	str	r5, [r0, #12]
 8008270:	f104 0914 	add.w	r9, r4, #20
 8008274:	f108 0514 	add.w	r5, r8, #20
 8008278:	f100 0e14 	add.w	lr, r0, #20
 800827c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008280:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008284:	f108 0210 	add.w	r2, r8, #16
 8008288:	46f2      	mov	sl, lr
 800828a:	2100      	movs	r1, #0
 800828c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008290:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008294:	fa1f f883 	uxth.w	r8, r3
 8008298:	fa11 f18b 	uxtah	r1, r1, fp
 800829c:	0c1b      	lsrs	r3, r3, #16
 800829e:	eba1 0808 	sub.w	r8, r1, r8
 80082a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80082a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80082aa:	fa1f f888 	uxth.w	r8, r8
 80082ae:	1419      	asrs	r1, r3, #16
 80082b0:	454e      	cmp	r6, r9
 80082b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80082b6:	f84a 3b04 	str.w	r3, [sl], #4
 80082ba:	d8e7      	bhi.n	800828c <__mdiff+0x80>
 80082bc:	1b33      	subs	r3, r6, r4
 80082be:	3b15      	subs	r3, #21
 80082c0:	f023 0303 	bic.w	r3, r3, #3
 80082c4:	3304      	adds	r3, #4
 80082c6:	3415      	adds	r4, #21
 80082c8:	42a6      	cmp	r6, r4
 80082ca:	bf38      	it	cc
 80082cc:	2304      	movcc	r3, #4
 80082ce:	441d      	add	r5, r3
 80082d0:	4473      	add	r3, lr
 80082d2:	469e      	mov	lr, r3
 80082d4:	462e      	mov	r6, r5
 80082d6:	4566      	cmp	r6, ip
 80082d8:	d30e      	bcc.n	80082f8 <__mdiff+0xec>
 80082da:	f10c 0203 	add.w	r2, ip, #3
 80082de:	1b52      	subs	r2, r2, r5
 80082e0:	f022 0203 	bic.w	r2, r2, #3
 80082e4:	3d03      	subs	r5, #3
 80082e6:	45ac      	cmp	ip, r5
 80082e8:	bf38      	it	cc
 80082ea:	2200      	movcc	r2, #0
 80082ec:	441a      	add	r2, r3
 80082ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80082f2:	b17b      	cbz	r3, 8008314 <__mdiff+0x108>
 80082f4:	6107      	str	r7, [r0, #16]
 80082f6:	e7a3      	b.n	8008240 <__mdiff+0x34>
 80082f8:	f856 8b04 	ldr.w	r8, [r6], #4
 80082fc:	fa11 f288 	uxtah	r2, r1, r8
 8008300:	1414      	asrs	r4, r2, #16
 8008302:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008306:	b292      	uxth	r2, r2
 8008308:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800830c:	f84e 2b04 	str.w	r2, [lr], #4
 8008310:	1421      	asrs	r1, r4, #16
 8008312:	e7e0      	b.n	80082d6 <__mdiff+0xca>
 8008314:	3f01      	subs	r7, #1
 8008316:	e7ea      	b.n	80082ee <__mdiff+0xe2>
 8008318:	0800a608 	.word	0x0800a608
 800831c:	0800a694 	.word	0x0800a694

08008320 <__ulp>:
 8008320:	b082      	sub	sp, #8
 8008322:	ed8d 0b00 	vstr	d0, [sp]
 8008326:	9b01      	ldr	r3, [sp, #4]
 8008328:	4912      	ldr	r1, [pc, #72]	; (8008374 <__ulp+0x54>)
 800832a:	4019      	ands	r1, r3
 800832c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008330:	2900      	cmp	r1, #0
 8008332:	dd05      	ble.n	8008340 <__ulp+0x20>
 8008334:	2200      	movs	r2, #0
 8008336:	460b      	mov	r3, r1
 8008338:	ec43 2b10 	vmov	d0, r2, r3
 800833c:	b002      	add	sp, #8
 800833e:	4770      	bx	lr
 8008340:	4249      	negs	r1, r1
 8008342:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008346:	ea4f 5021 	mov.w	r0, r1, asr #20
 800834a:	f04f 0200 	mov.w	r2, #0
 800834e:	f04f 0300 	mov.w	r3, #0
 8008352:	da04      	bge.n	800835e <__ulp+0x3e>
 8008354:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008358:	fa41 f300 	asr.w	r3, r1, r0
 800835c:	e7ec      	b.n	8008338 <__ulp+0x18>
 800835e:	f1a0 0114 	sub.w	r1, r0, #20
 8008362:	291e      	cmp	r1, #30
 8008364:	bfda      	itte	le
 8008366:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800836a:	fa20 f101 	lsrle.w	r1, r0, r1
 800836e:	2101      	movgt	r1, #1
 8008370:	460a      	mov	r2, r1
 8008372:	e7e1      	b.n	8008338 <__ulp+0x18>
 8008374:	7ff00000 	.word	0x7ff00000

08008378 <__b2d>:
 8008378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800837a:	6905      	ldr	r5, [r0, #16]
 800837c:	f100 0714 	add.w	r7, r0, #20
 8008380:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008384:	1f2e      	subs	r6, r5, #4
 8008386:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800838a:	4620      	mov	r0, r4
 800838c:	f7ff fd48 	bl	8007e20 <__hi0bits>
 8008390:	f1c0 0320 	rsb	r3, r0, #32
 8008394:	280a      	cmp	r0, #10
 8008396:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008414 <__b2d+0x9c>
 800839a:	600b      	str	r3, [r1, #0]
 800839c:	dc14      	bgt.n	80083c8 <__b2d+0x50>
 800839e:	f1c0 0e0b 	rsb	lr, r0, #11
 80083a2:	fa24 f10e 	lsr.w	r1, r4, lr
 80083a6:	42b7      	cmp	r7, r6
 80083a8:	ea41 030c 	orr.w	r3, r1, ip
 80083ac:	bf34      	ite	cc
 80083ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80083b2:	2100      	movcs	r1, #0
 80083b4:	3015      	adds	r0, #21
 80083b6:	fa04 f000 	lsl.w	r0, r4, r0
 80083ba:	fa21 f10e 	lsr.w	r1, r1, lr
 80083be:	ea40 0201 	orr.w	r2, r0, r1
 80083c2:	ec43 2b10 	vmov	d0, r2, r3
 80083c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083c8:	42b7      	cmp	r7, r6
 80083ca:	bf3a      	itte	cc
 80083cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80083d0:	f1a5 0608 	subcc.w	r6, r5, #8
 80083d4:	2100      	movcs	r1, #0
 80083d6:	380b      	subs	r0, #11
 80083d8:	d017      	beq.n	800840a <__b2d+0x92>
 80083da:	f1c0 0c20 	rsb	ip, r0, #32
 80083de:	fa04 f500 	lsl.w	r5, r4, r0
 80083e2:	42be      	cmp	r6, r7
 80083e4:	fa21 f40c 	lsr.w	r4, r1, ip
 80083e8:	ea45 0504 	orr.w	r5, r5, r4
 80083ec:	bf8c      	ite	hi
 80083ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80083f2:	2400      	movls	r4, #0
 80083f4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80083f8:	fa01 f000 	lsl.w	r0, r1, r0
 80083fc:	fa24 f40c 	lsr.w	r4, r4, ip
 8008400:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008404:	ea40 0204 	orr.w	r2, r0, r4
 8008408:	e7db      	b.n	80083c2 <__b2d+0x4a>
 800840a:	ea44 030c 	orr.w	r3, r4, ip
 800840e:	460a      	mov	r2, r1
 8008410:	e7d7      	b.n	80083c2 <__b2d+0x4a>
 8008412:	bf00      	nop
 8008414:	3ff00000 	.word	0x3ff00000

08008418 <__d2b>:
 8008418:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800841c:	4689      	mov	r9, r1
 800841e:	2101      	movs	r1, #1
 8008420:	ec57 6b10 	vmov	r6, r7, d0
 8008424:	4690      	mov	r8, r2
 8008426:	f7ff fc09 	bl	8007c3c <_Balloc>
 800842a:	4604      	mov	r4, r0
 800842c:	b930      	cbnz	r0, 800843c <__d2b+0x24>
 800842e:	4602      	mov	r2, r0
 8008430:	4b25      	ldr	r3, [pc, #148]	; (80084c8 <__d2b+0xb0>)
 8008432:	4826      	ldr	r0, [pc, #152]	; (80084cc <__d2b+0xb4>)
 8008434:	f240 310a 	movw	r1, #778	; 0x30a
 8008438:	f000 fb50 	bl	8008adc <__assert_func>
 800843c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008440:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008444:	bb35      	cbnz	r5, 8008494 <__d2b+0x7c>
 8008446:	2e00      	cmp	r6, #0
 8008448:	9301      	str	r3, [sp, #4]
 800844a:	d028      	beq.n	800849e <__d2b+0x86>
 800844c:	4668      	mov	r0, sp
 800844e:	9600      	str	r6, [sp, #0]
 8008450:	f7ff fd06 	bl	8007e60 <__lo0bits>
 8008454:	9900      	ldr	r1, [sp, #0]
 8008456:	b300      	cbz	r0, 800849a <__d2b+0x82>
 8008458:	9a01      	ldr	r2, [sp, #4]
 800845a:	f1c0 0320 	rsb	r3, r0, #32
 800845e:	fa02 f303 	lsl.w	r3, r2, r3
 8008462:	430b      	orrs	r3, r1
 8008464:	40c2      	lsrs	r2, r0
 8008466:	6163      	str	r3, [r4, #20]
 8008468:	9201      	str	r2, [sp, #4]
 800846a:	9b01      	ldr	r3, [sp, #4]
 800846c:	61a3      	str	r3, [r4, #24]
 800846e:	2b00      	cmp	r3, #0
 8008470:	bf14      	ite	ne
 8008472:	2202      	movne	r2, #2
 8008474:	2201      	moveq	r2, #1
 8008476:	6122      	str	r2, [r4, #16]
 8008478:	b1d5      	cbz	r5, 80084b0 <__d2b+0x98>
 800847a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800847e:	4405      	add	r5, r0
 8008480:	f8c9 5000 	str.w	r5, [r9]
 8008484:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008488:	f8c8 0000 	str.w	r0, [r8]
 800848c:	4620      	mov	r0, r4
 800848e:	b003      	add	sp, #12
 8008490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008498:	e7d5      	b.n	8008446 <__d2b+0x2e>
 800849a:	6161      	str	r1, [r4, #20]
 800849c:	e7e5      	b.n	800846a <__d2b+0x52>
 800849e:	a801      	add	r0, sp, #4
 80084a0:	f7ff fcde 	bl	8007e60 <__lo0bits>
 80084a4:	9b01      	ldr	r3, [sp, #4]
 80084a6:	6163      	str	r3, [r4, #20]
 80084a8:	2201      	movs	r2, #1
 80084aa:	6122      	str	r2, [r4, #16]
 80084ac:	3020      	adds	r0, #32
 80084ae:	e7e3      	b.n	8008478 <__d2b+0x60>
 80084b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80084b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80084b8:	f8c9 0000 	str.w	r0, [r9]
 80084bc:	6918      	ldr	r0, [r3, #16]
 80084be:	f7ff fcaf 	bl	8007e20 <__hi0bits>
 80084c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80084c6:	e7df      	b.n	8008488 <__d2b+0x70>
 80084c8:	0800a608 	.word	0x0800a608
 80084cc:	0800a694 	.word	0x0800a694

080084d0 <__ratio>:
 80084d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d4:	4688      	mov	r8, r1
 80084d6:	4669      	mov	r1, sp
 80084d8:	4681      	mov	r9, r0
 80084da:	f7ff ff4d 	bl	8008378 <__b2d>
 80084de:	a901      	add	r1, sp, #4
 80084e0:	4640      	mov	r0, r8
 80084e2:	ec55 4b10 	vmov	r4, r5, d0
 80084e6:	f7ff ff47 	bl	8008378 <__b2d>
 80084ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80084ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80084f2:	eba3 0c02 	sub.w	ip, r3, r2
 80084f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80084fa:	1a9b      	subs	r3, r3, r2
 80084fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008500:	ec51 0b10 	vmov	r0, r1, d0
 8008504:	2b00      	cmp	r3, #0
 8008506:	bfd6      	itet	le
 8008508:	460a      	movle	r2, r1
 800850a:	462a      	movgt	r2, r5
 800850c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008510:	468b      	mov	fp, r1
 8008512:	462f      	mov	r7, r5
 8008514:	bfd4      	ite	le
 8008516:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800851a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800851e:	4620      	mov	r0, r4
 8008520:	ee10 2a10 	vmov	r2, s0
 8008524:	465b      	mov	r3, fp
 8008526:	4639      	mov	r1, r7
 8008528:	f7f8 f998 	bl	800085c <__aeabi_ddiv>
 800852c:	ec41 0b10 	vmov	d0, r0, r1
 8008530:	b003      	add	sp, #12
 8008532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008536 <__copybits>:
 8008536:	3901      	subs	r1, #1
 8008538:	b570      	push	{r4, r5, r6, lr}
 800853a:	1149      	asrs	r1, r1, #5
 800853c:	6914      	ldr	r4, [r2, #16]
 800853e:	3101      	adds	r1, #1
 8008540:	f102 0314 	add.w	r3, r2, #20
 8008544:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008548:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800854c:	1f05      	subs	r5, r0, #4
 800854e:	42a3      	cmp	r3, r4
 8008550:	d30c      	bcc.n	800856c <__copybits+0x36>
 8008552:	1aa3      	subs	r3, r4, r2
 8008554:	3b11      	subs	r3, #17
 8008556:	f023 0303 	bic.w	r3, r3, #3
 800855a:	3211      	adds	r2, #17
 800855c:	42a2      	cmp	r2, r4
 800855e:	bf88      	it	hi
 8008560:	2300      	movhi	r3, #0
 8008562:	4418      	add	r0, r3
 8008564:	2300      	movs	r3, #0
 8008566:	4288      	cmp	r0, r1
 8008568:	d305      	bcc.n	8008576 <__copybits+0x40>
 800856a:	bd70      	pop	{r4, r5, r6, pc}
 800856c:	f853 6b04 	ldr.w	r6, [r3], #4
 8008570:	f845 6f04 	str.w	r6, [r5, #4]!
 8008574:	e7eb      	b.n	800854e <__copybits+0x18>
 8008576:	f840 3b04 	str.w	r3, [r0], #4
 800857a:	e7f4      	b.n	8008566 <__copybits+0x30>

0800857c <__any_on>:
 800857c:	f100 0214 	add.w	r2, r0, #20
 8008580:	6900      	ldr	r0, [r0, #16]
 8008582:	114b      	asrs	r3, r1, #5
 8008584:	4298      	cmp	r0, r3
 8008586:	b510      	push	{r4, lr}
 8008588:	db11      	blt.n	80085ae <__any_on+0x32>
 800858a:	dd0a      	ble.n	80085a2 <__any_on+0x26>
 800858c:	f011 011f 	ands.w	r1, r1, #31
 8008590:	d007      	beq.n	80085a2 <__any_on+0x26>
 8008592:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008596:	fa24 f001 	lsr.w	r0, r4, r1
 800859a:	fa00 f101 	lsl.w	r1, r0, r1
 800859e:	428c      	cmp	r4, r1
 80085a0:	d10b      	bne.n	80085ba <__any_on+0x3e>
 80085a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d803      	bhi.n	80085b2 <__any_on+0x36>
 80085aa:	2000      	movs	r0, #0
 80085ac:	bd10      	pop	{r4, pc}
 80085ae:	4603      	mov	r3, r0
 80085b0:	e7f7      	b.n	80085a2 <__any_on+0x26>
 80085b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085b6:	2900      	cmp	r1, #0
 80085b8:	d0f5      	beq.n	80085a6 <__any_on+0x2a>
 80085ba:	2001      	movs	r0, #1
 80085bc:	e7f6      	b.n	80085ac <__any_on+0x30>

080085be <_calloc_r>:
 80085be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085c0:	fba1 2402 	umull	r2, r4, r1, r2
 80085c4:	b94c      	cbnz	r4, 80085da <_calloc_r+0x1c>
 80085c6:	4611      	mov	r1, r2
 80085c8:	9201      	str	r2, [sp, #4]
 80085ca:	f000 f87b 	bl	80086c4 <_malloc_r>
 80085ce:	9a01      	ldr	r2, [sp, #4]
 80085d0:	4605      	mov	r5, r0
 80085d2:	b930      	cbnz	r0, 80085e2 <_calloc_r+0x24>
 80085d4:	4628      	mov	r0, r5
 80085d6:	b003      	add	sp, #12
 80085d8:	bd30      	pop	{r4, r5, pc}
 80085da:	220c      	movs	r2, #12
 80085dc:	6002      	str	r2, [r0, #0]
 80085de:	2500      	movs	r5, #0
 80085e0:	e7f8      	b.n	80085d4 <_calloc_r+0x16>
 80085e2:	4621      	mov	r1, r4
 80085e4:	f7fc fbbe 	bl	8004d64 <memset>
 80085e8:	e7f4      	b.n	80085d4 <_calloc_r+0x16>
	...

080085ec <_free_r>:
 80085ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085ee:	2900      	cmp	r1, #0
 80085f0:	d044      	beq.n	800867c <_free_r+0x90>
 80085f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085f6:	9001      	str	r0, [sp, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f1a1 0404 	sub.w	r4, r1, #4
 80085fe:	bfb8      	it	lt
 8008600:	18e4      	addlt	r4, r4, r3
 8008602:	f000 fab5 	bl	8008b70 <__malloc_lock>
 8008606:	4a1e      	ldr	r2, [pc, #120]	; (8008680 <_free_r+0x94>)
 8008608:	9801      	ldr	r0, [sp, #4]
 800860a:	6813      	ldr	r3, [r2, #0]
 800860c:	b933      	cbnz	r3, 800861c <_free_r+0x30>
 800860e:	6063      	str	r3, [r4, #4]
 8008610:	6014      	str	r4, [r2, #0]
 8008612:	b003      	add	sp, #12
 8008614:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008618:	f000 bab0 	b.w	8008b7c <__malloc_unlock>
 800861c:	42a3      	cmp	r3, r4
 800861e:	d908      	bls.n	8008632 <_free_r+0x46>
 8008620:	6825      	ldr	r5, [r4, #0]
 8008622:	1961      	adds	r1, r4, r5
 8008624:	428b      	cmp	r3, r1
 8008626:	bf01      	itttt	eq
 8008628:	6819      	ldreq	r1, [r3, #0]
 800862a:	685b      	ldreq	r3, [r3, #4]
 800862c:	1949      	addeq	r1, r1, r5
 800862e:	6021      	streq	r1, [r4, #0]
 8008630:	e7ed      	b.n	800860e <_free_r+0x22>
 8008632:	461a      	mov	r2, r3
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	b10b      	cbz	r3, 800863c <_free_r+0x50>
 8008638:	42a3      	cmp	r3, r4
 800863a:	d9fa      	bls.n	8008632 <_free_r+0x46>
 800863c:	6811      	ldr	r1, [r2, #0]
 800863e:	1855      	adds	r5, r2, r1
 8008640:	42a5      	cmp	r5, r4
 8008642:	d10b      	bne.n	800865c <_free_r+0x70>
 8008644:	6824      	ldr	r4, [r4, #0]
 8008646:	4421      	add	r1, r4
 8008648:	1854      	adds	r4, r2, r1
 800864a:	42a3      	cmp	r3, r4
 800864c:	6011      	str	r1, [r2, #0]
 800864e:	d1e0      	bne.n	8008612 <_free_r+0x26>
 8008650:	681c      	ldr	r4, [r3, #0]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	6053      	str	r3, [r2, #4]
 8008656:	4421      	add	r1, r4
 8008658:	6011      	str	r1, [r2, #0]
 800865a:	e7da      	b.n	8008612 <_free_r+0x26>
 800865c:	d902      	bls.n	8008664 <_free_r+0x78>
 800865e:	230c      	movs	r3, #12
 8008660:	6003      	str	r3, [r0, #0]
 8008662:	e7d6      	b.n	8008612 <_free_r+0x26>
 8008664:	6825      	ldr	r5, [r4, #0]
 8008666:	1961      	adds	r1, r4, r5
 8008668:	428b      	cmp	r3, r1
 800866a:	bf04      	itt	eq
 800866c:	6819      	ldreq	r1, [r3, #0]
 800866e:	685b      	ldreq	r3, [r3, #4]
 8008670:	6063      	str	r3, [r4, #4]
 8008672:	bf04      	itt	eq
 8008674:	1949      	addeq	r1, r1, r5
 8008676:	6021      	streq	r1, [r4, #0]
 8008678:	6054      	str	r4, [r2, #4]
 800867a:	e7ca      	b.n	8008612 <_free_r+0x26>
 800867c:	b003      	add	sp, #12
 800867e:	bd30      	pop	{r4, r5, pc}
 8008680:	200007d8 	.word	0x200007d8

08008684 <sbrk_aligned>:
 8008684:	b570      	push	{r4, r5, r6, lr}
 8008686:	4e0e      	ldr	r6, [pc, #56]	; (80086c0 <sbrk_aligned+0x3c>)
 8008688:	460c      	mov	r4, r1
 800868a:	6831      	ldr	r1, [r6, #0]
 800868c:	4605      	mov	r5, r0
 800868e:	b911      	cbnz	r1, 8008696 <sbrk_aligned+0x12>
 8008690:	f000 f9f2 	bl	8008a78 <_sbrk_r>
 8008694:	6030      	str	r0, [r6, #0]
 8008696:	4621      	mov	r1, r4
 8008698:	4628      	mov	r0, r5
 800869a:	f000 f9ed 	bl	8008a78 <_sbrk_r>
 800869e:	1c43      	adds	r3, r0, #1
 80086a0:	d00a      	beq.n	80086b8 <sbrk_aligned+0x34>
 80086a2:	1cc4      	adds	r4, r0, #3
 80086a4:	f024 0403 	bic.w	r4, r4, #3
 80086a8:	42a0      	cmp	r0, r4
 80086aa:	d007      	beq.n	80086bc <sbrk_aligned+0x38>
 80086ac:	1a21      	subs	r1, r4, r0
 80086ae:	4628      	mov	r0, r5
 80086b0:	f000 f9e2 	bl	8008a78 <_sbrk_r>
 80086b4:	3001      	adds	r0, #1
 80086b6:	d101      	bne.n	80086bc <sbrk_aligned+0x38>
 80086b8:	f04f 34ff 	mov.w	r4, #4294967295
 80086bc:	4620      	mov	r0, r4
 80086be:	bd70      	pop	{r4, r5, r6, pc}
 80086c0:	200007dc 	.word	0x200007dc

080086c4 <_malloc_r>:
 80086c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086c8:	1ccd      	adds	r5, r1, #3
 80086ca:	f025 0503 	bic.w	r5, r5, #3
 80086ce:	3508      	adds	r5, #8
 80086d0:	2d0c      	cmp	r5, #12
 80086d2:	bf38      	it	cc
 80086d4:	250c      	movcc	r5, #12
 80086d6:	2d00      	cmp	r5, #0
 80086d8:	4607      	mov	r7, r0
 80086da:	db01      	blt.n	80086e0 <_malloc_r+0x1c>
 80086dc:	42a9      	cmp	r1, r5
 80086de:	d905      	bls.n	80086ec <_malloc_r+0x28>
 80086e0:	230c      	movs	r3, #12
 80086e2:	603b      	str	r3, [r7, #0]
 80086e4:	2600      	movs	r6, #0
 80086e6:	4630      	mov	r0, r6
 80086e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086ec:	4e2e      	ldr	r6, [pc, #184]	; (80087a8 <_malloc_r+0xe4>)
 80086ee:	f000 fa3f 	bl	8008b70 <__malloc_lock>
 80086f2:	6833      	ldr	r3, [r6, #0]
 80086f4:	461c      	mov	r4, r3
 80086f6:	bb34      	cbnz	r4, 8008746 <_malloc_r+0x82>
 80086f8:	4629      	mov	r1, r5
 80086fa:	4638      	mov	r0, r7
 80086fc:	f7ff ffc2 	bl	8008684 <sbrk_aligned>
 8008700:	1c43      	adds	r3, r0, #1
 8008702:	4604      	mov	r4, r0
 8008704:	d14d      	bne.n	80087a2 <_malloc_r+0xde>
 8008706:	6834      	ldr	r4, [r6, #0]
 8008708:	4626      	mov	r6, r4
 800870a:	2e00      	cmp	r6, #0
 800870c:	d140      	bne.n	8008790 <_malloc_r+0xcc>
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	4631      	mov	r1, r6
 8008712:	4638      	mov	r0, r7
 8008714:	eb04 0803 	add.w	r8, r4, r3
 8008718:	f000 f9ae 	bl	8008a78 <_sbrk_r>
 800871c:	4580      	cmp	r8, r0
 800871e:	d13a      	bne.n	8008796 <_malloc_r+0xd2>
 8008720:	6821      	ldr	r1, [r4, #0]
 8008722:	3503      	adds	r5, #3
 8008724:	1a6d      	subs	r5, r5, r1
 8008726:	f025 0503 	bic.w	r5, r5, #3
 800872a:	3508      	adds	r5, #8
 800872c:	2d0c      	cmp	r5, #12
 800872e:	bf38      	it	cc
 8008730:	250c      	movcc	r5, #12
 8008732:	4629      	mov	r1, r5
 8008734:	4638      	mov	r0, r7
 8008736:	f7ff ffa5 	bl	8008684 <sbrk_aligned>
 800873a:	3001      	adds	r0, #1
 800873c:	d02b      	beq.n	8008796 <_malloc_r+0xd2>
 800873e:	6823      	ldr	r3, [r4, #0]
 8008740:	442b      	add	r3, r5
 8008742:	6023      	str	r3, [r4, #0]
 8008744:	e00e      	b.n	8008764 <_malloc_r+0xa0>
 8008746:	6822      	ldr	r2, [r4, #0]
 8008748:	1b52      	subs	r2, r2, r5
 800874a:	d41e      	bmi.n	800878a <_malloc_r+0xc6>
 800874c:	2a0b      	cmp	r2, #11
 800874e:	d916      	bls.n	800877e <_malloc_r+0xba>
 8008750:	1961      	adds	r1, r4, r5
 8008752:	42a3      	cmp	r3, r4
 8008754:	6025      	str	r5, [r4, #0]
 8008756:	bf18      	it	ne
 8008758:	6059      	strne	r1, [r3, #4]
 800875a:	6863      	ldr	r3, [r4, #4]
 800875c:	bf08      	it	eq
 800875e:	6031      	streq	r1, [r6, #0]
 8008760:	5162      	str	r2, [r4, r5]
 8008762:	604b      	str	r3, [r1, #4]
 8008764:	4638      	mov	r0, r7
 8008766:	f104 060b 	add.w	r6, r4, #11
 800876a:	f000 fa07 	bl	8008b7c <__malloc_unlock>
 800876e:	f026 0607 	bic.w	r6, r6, #7
 8008772:	1d23      	adds	r3, r4, #4
 8008774:	1af2      	subs	r2, r6, r3
 8008776:	d0b6      	beq.n	80086e6 <_malloc_r+0x22>
 8008778:	1b9b      	subs	r3, r3, r6
 800877a:	50a3      	str	r3, [r4, r2]
 800877c:	e7b3      	b.n	80086e6 <_malloc_r+0x22>
 800877e:	6862      	ldr	r2, [r4, #4]
 8008780:	42a3      	cmp	r3, r4
 8008782:	bf0c      	ite	eq
 8008784:	6032      	streq	r2, [r6, #0]
 8008786:	605a      	strne	r2, [r3, #4]
 8008788:	e7ec      	b.n	8008764 <_malloc_r+0xa0>
 800878a:	4623      	mov	r3, r4
 800878c:	6864      	ldr	r4, [r4, #4]
 800878e:	e7b2      	b.n	80086f6 <_malloc_r+0x32>
 8008790:	4634      	mov	r4, r6
 8008792:	6876      	ldr	r6, [r6, #4]
 8008794:	e7b9      	b.n	800870a <_malloc_r+0x46>
 8008796:	230c      	movs	r3, #12
 8008798:	603b      	str	r3, [r7, #0]
 800879a:	4638      	mov	r0, r7
 800879c:	f000 f9ee 	bl	8008b7c <__malloc_unlock>
 80087a0:	e7a1      	b.n	80086e6 <_malloc_r+0x22>
 80087a2:	6025      	str	r5, [r4, #0]
 80087a4:	e7de      	b.n	8008764 <_malloc_r+0xa0>
 80087a6:	bf00      	nop
 80087a8:	200007d8 	.word	0x200007d8

080087ac <__ssputs_r>:
 80087ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087b0:	688e      	ldr	r6, [r1, #8]
 80087b2:	429e      	cmp	r6, r3
 80087b4:	4682      	mov	sl, r0
 80087b6:	460c      	mov	r4, r1
 80087b8:	4690      	mov	r8, r2
 80087ba:	461f      	mov	r7, r3
 80087bc:	d838      	bhi.n	8008830 <__ssputs_r+0x84>
 80087be:	898a      	ldrh	r2, [r1, #12]
 80087c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80087c4:	d032      	beq.n	800882c <__ssputs_r+0x80>
 80087c6:	6825      	ldr	r5, [r4, #0]
 80087c8:	6909      	ldr	r1, [r1, #16]
 80087ca:	eba5 0901 	sub.w	r9, r5, r1
 80087ce:	6965      	ldr	r5, [r4, #20]
 80087d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087d8:	3301      	adds	r3, #1
 80087da:	444b      	add	r3, r9
 80087dc:	106d      	asrs	r5, r5, #1
 80087de:	429d      	cmp	r5, r3
 80087e0:	bf38      	it	cc
 80087e2:	461d      	movcc	r5, r3
 80087e4:	0553      	lsls	r3, r2, #21
 80087e6:	d531      	bpl.n	800884c <__ssputs_r+0xa0>
 80087e8:	4629      	mov	r1, r5
 80087ea:	f7ff ff6b 	bl	80086c4 <_malloc_r>
 80087ee:	4606      	mov	r6, r0
 80087f0:	b950      	cbnz	r0, 8008808 <__ssputs_r+0x5c>
 80087f2:	230c      	movs	r3, #12
 80087f4:	f8ca 3000 	str.w	r3, [sl]
 80087f8:	89a3      	ldrh	r3, [r4, #12]
 80087fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087fe:	81a3      	strh	r3, [r4, #12]
 8008800:	f04f 30ff 	mov.w	r0, #4294967295
 8008804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008808:	6921      	ldr	r1, [r4, #16]
 800880a:	464a      	mov	r2, r9
 800880c:	f7ff fa08 	bl	8007c20 <memcpy>
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800881a:	81a3      	strh	r3, [r4, #12]
 800881c:	6126      	str	r6, [r4, #16]
 800881e:	6165      	str	r5, [r4, #20]
 8008820:	444e      	add	r6, r9
 8008822:	eba5 0509 	sub.w	r5, r5, r9
 8008826:	6026      	str	r6, [r4, #0]
 8008828:	60a5      	str	r5, [r4, #8]
 800882a:	463e      	mov	r6, r7
 800882c:	42be      	cmp	r6, r7
 800882e:	d900      	bls.n	8008832 <__ssputs_r+0x86>
 8008830:	463e      	mov	r6, r7
 8008832:	6820      	ldr	r0, [r4, #0]
 8008834:	4632      	mov	r2, r6
 8008836:	4641      	mov	r1, r8
 8008838:	f000 f980 	bl	8008b3c <memmove>
 800883c:	68a3      	ldr	r3, [r4, #8]
 800883e:	1b9b      	subs	r3, r3, r6
 8008840:	60a3      	str	r3, [r4, #8]
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	4433      	add	r3, r6
 8008846:	6023      	str	r3, [r4, #0]
 8008848:	2000      	movs	r0, #0
 800884a:	e7db      	b.n	8008804 <__ssputs_r+0x58>
 800884c:	462a      	mov	r2, r5
 800884e:	f000 f99b 	bl	8008b88 <_realloc_r>
 8008852:	4606      	mov	r6, r0
 8008854:	2800      	cmp	r0, #0
 8008856:	d1e1      	bne.n	800881c <__ssputs_r+0x70>
 8008858:	6921      	ldr	r1, [r4, #16]
 800885a:	4650      	mov	r0, sl
 800885c:	f7ff fec6 	bl	80085ec <_free_r>
 8008860:	e7c7      	b.n	80087f2 <__ssputs_r+0x46>
	...

08008864 <_svfiprintf_r>:
 8008864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008868:	4698      	mov	r8, r3
 800886a:	898b      	ldrh	r3, [r1, #12]
 800886c:	061b      	lsls	r3, r3, #24
 800886e:	b09d      	sub	sp, #116	; 0x74
 8008870:	4607      	mov	r7, r0
 8008872:	460d      	mov	r5, r1
 8008874:	4614      	mov	r4, r2
 8008876:	d50e      	bpl.n	8008896 <_svfiprintf_r+0x32>
 8008878:	690b      	ldr	r3, [r1, #16]
 800887a:	b963      	cbnz	r3, 8008896 <_svfiprintf_r+0x32>
 800887c:	2140      	movs	r1, #64	; 0x40
 800887e:	f7ff ff21 	bl	80086c4 <_malloc_r>
 8008882:	6028      	str	r0, [r5, #0]
 8008884:	6128      	str	r0, [r5, #16]
 8008886:	b920      	cbnz	r0, 8008892 <_svfiprintf_r+0x2e>
 8008888:	230c      	movs	r3, #12
 800888a:	603b      	str	r3, [r7, #0]
 800888c:	f04f 30ff 	mov.w	r0, #4294967295
 8008890:	e0d1      	b.n	8008a36 <_svfiprintf_r+0x1d2>
 8008892:	2340      	movs	r3, #64	; 0x40
 8008894:	616b      	str	r3, [r5, #20]
 8008896:	2300      	movs	r3, #0
 8008898:	9309      	str	r3, [sp, #36]	; 0x24
 800889a:	2320      	movs	r3, #32
 800889c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80088a4:	2330      	movs	r3, #48	; 0x30
 80088a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008a50 <_svfiprintf_r+0x1ec>
 80088aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088ae:	f04f 0901 	mov.w	r9, #1
 80088b2:	4623      	mov	r3, r4
 80088b4:	469a      	mov	sl, r3
 80088b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088ba:	b10a      	cbz	r2, 80088c0 <_svfiprintf_r+0x5c>
 80088bc:	2a25      	cmp	r2, #37	; 0x25
 80088be:	d1f9      	bne.n	80088b4 <_svfiprintf_r+0x50>
 80088c0:	ebba 0b04 	subs.w	fp, sl, r4
 80088c4:	d00b      	beq.n	80088de <_svfiprintf_r+0x7a>
 80088c6:	465b      	mov	r3, fp
 80088c8:	4622      	mov	r2, r4
 80088ca:	4629      	mov	r1, r5
 80088cc:	4638      	mov	r0, r7
 80088ce:	f7ff ff6d 	bl	80087ac <__ssputs_r>
 80088d2:	3001      	adds	r0, #1
 80088d4:	f000 80aa 	beq.w	8008a2c <_svfiprintf_r+0x1c8>
 80088d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088da:	445a      	add	r2, fp
 80088dc:	9209      	str	r2, [sp, #36]	; 0x24
 80088de:	f89a 3000 	ldrb.w	r3, [sl]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f000 80a2 	beq.w	8008a2c <_svfiprintf_r+0x1c8>
 80088e8:	2300      	movs	r3, #0
 80088ea:	f04f 32ff 	mov.w	r2, #4294967295
 80088ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088f2:	f10a 0a01 	add.w	sl, sl, #1
 80088f6:	9304      	str	r3, [sp, #16]
 80088f8:	9307      	str	r3, [sp, #28]
 80088fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088fe:	931a      	str	r3, [sp, #104]	; 0x68
 8008900:	4654      	mov	r4, sl
 8008902:	2205      	movs	r2, #5
 8008904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008908:	4851      	ldr	r0, [pc, #324]	; (8008a50 <_svfiprintf_r+0x1ec>)
 800890a:	f7f7 fc71 	bl	80001f0 <memchr>
 800890e:	9a04      	ldr	r2, [sp, #16]
 8008910:	b9d8      	cbnz	r0, 800894a <_svfiprintf_r+0xe6>
 8008912:	06d0      	lsls	r0, r2, #27
 8008914:	bf44      	itt	mi
 8008916:	2320      	movmi	r3, #32
 8008918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800891c:	0711      	lsls	r1, r2, #28
 800891e:	bf44      	itt	mi
 8008920:	232b      	movmi	r3, #43	; 0x2b
 8008922:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008926:	f89a 3000 	ldrb.w	r3, [sl]
 800892a:	2b2a      	cmp	r3, #42	; 0x2a
 800892c:	d015      	beq.n	800895a <_svfiprintf_r+0xf6>
 800892e:	9a07      	ldr	r2, [sp, #28]
 8008930:	4654      	mov	r4, sl
 8008932:	2000      	movs	r0, #0
 8008934:	f04f 0c0a 	mov.w	ip, #10
 8008938:	4621      	mov	r1, r4
 800893a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800893e:	3b30      	subs	r3, #48	; 0x30
 8008940:	2b09      	cmp	r3, #9
 8008942:	d94e      	bls.n	80089e2 <_svfiprintf_r+0x17e>
 8008944:	b1b0      	cbz	r0, 8008974 <_svfiprintf_r+0x110>
 8008946:	9207      	str	r2, [sp, #28]
 8008948:	e014      	b.n	8008974 <_svfiprintf_r+0x110>
 800894a:	eba0 0308 	sub.w	r3, r0, r8
 800894e:	fa09 f303 	lsl.w	r3, r9, r3
 8008952:	4313      	orrs	r3, r2
 8008954:	9304      	str	r3, [sp, #16]
 8008956:	46a2      	mov	sl, r4
 8008958:	e7d2      	b.n	8008900 <_svfiprintf_r+0x9c>
 800895a:	9b03      	ldr	r3, [sp, #12]
 800895c:	1d19      	adds	r1, r3, #4
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	9103      	str	r1, [sp, #12]
 8008962:	2b00      	cmp	r3, #0
 8008964:	bfbb      	ittet	lt
 8008966:	425b      	neglt	r3, r3
 8008968:	f042 0202 	orrlt.w	r2, r2, #2
 800896c:	9307      	strge	r3, [sp, #28]
 800896e:	9307      	strlt	r3, [sp, #28]
 8008970:	bfb8      	it	lt
 8008972:	9204      	strlt	r2, [sp, #16]
 8008974:	7823      	ldrb	r3, [r4, #0]
 8008976:	2b2e      	cmp	r3, #46	; 0x2e
 8008978:	d10c      	bne.n	8008994 <_svfiprintf_r+0x130>
 800897a:	7863      	ldrb	r3, [r4, #1]
 800897c:	2b2a      	cmp	r3, #42	; 0x2a
 800897e:	d135      	bne.n	80089ec <_svfiprintf_r+0x188>
 8008980:	9b03      	ldr	r3, [sp, #12]
 8008982:	1d1a      	adds	r2, r3, #4
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	9203      	str	r2, [sp, #12]
 8008988:	2b00      	cmp	r3, #0
 800898a:	bfb8      	it	lt
 800898c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008990:	3402      	adds	r4, #2
 8008992:	9305      	str	r3, [sp, #20]
 8008994:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008a60 <_svfiprintf_r+0x1fc>
 8008998:	7821      	ldrb	r1, [r4, #0]
 800899a:	2203      	movs	r2, #3
 800899c:	4650      	mov	r0, sl
 800899e:	f7f7 fc27 	bl	80001f0 <memchr>
 80089a2:	b140      	cbz	r0, 80089b6 <_svfiprintf_r+0x152>
 80089a4:	2340      	movs	r3, #64	; 0x40
 80089a6:	eba0 000a 	sub.w	r0, r0, sl
 80089aa:	fa03 f000 	lsl.w	r0, r3, r0
 80089ae:	9b04      	ldr	r3, [sp, #16]
 80089b0:	4303      	orrs	r3, r0
 80089b2:	3401      	adds	r4, #1
 80089b4:	9304      	str	r3, [sp, #16]
 80089b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089ba:	4826      	ldr	r0, [pc, #152]	; (8008a54 <_svfiprintf_r+0x1f0>)
 80089bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089c0:	2206      	movs	r2, #6
 80089c2:	f7f7 fc15 	bl	80001f0 <memchr>
 80089c6:	2800      	cmp	r0, #0
 80089c8:	d038      	beq.n	8008a3c <_svfiprintf_r+0x1d8>
 80089ca:	4b23      	ldr	r3, [pc, #140]	; (8008a58 <_svfiprintf_r+0x1f4>)
 80089cc:	bb1b      	cbnz	r3, 8008a16 <_svfiprintf_r+0x1b2>
 80089ce:	9b03      	ldr	r3, [sp, #12]
 80089d0:	3307      	adds	r3, #7
 80089d2:	f023 0307 	bic.w	r3, r3, #7
 80089d6:	3308      	adds	r3, #8
 80089d8:	9303      	str	r3, [sp, #12]
 80089da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089dc:	4433      	add	r3, r6
 80089de:	9309      	str	r3, [sp, #36]	; 0x24
 80089e0:	e767      	b.n	80088b2 <_svfiprintf_r+0x4e>
 80089e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80089e6:	460c      	mov	r4, r1
 80089e8:	2001      	movs	r0, #1
 80089ea:	e7a5      	b.n	8008938 <_svfiprintf_r+0xd4>
 80089ec:	2300      	movs	r3, #0
 80089ee:	3401      	adds	r4, #1
 80089f0:	9305      	str	r3, [sp, #20]
 80089f2:	4619      	mov	r1, r3
 80089f4:	f04f 0c0a 	mov.w	ip, #10
 80089f8:	4620      	mov	r0, r4
 80089fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089fe:	3a30      	subs	r2, #48	; 0x30
 8008a00:	2a09      	cmp	r2, #9
 8008a02:	d903      	bls.n	8008a0c <_svfiprintf_r+0x1a8>
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d0c5      	beq.n	8008994 <_svfiprintf_r+0x130>
 8008a08:	9105      	str	r1, [sp, #20]
 8008a0a:	e7c3      	b.n	8008994 <_svfiprintf_r+0x130>
 8008a0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a10:	4604      	mov	r4, r0
 8008a12:	2301      	movs	r3, #1
 8008a14:	e7f0      	b.n	80089f8 <_svfiprintf_r+0x194>
 8008a16:	ab03      	add	r3, sp, #12
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	462a      	mov	r2, r5
 8008a1c:	4b0f      	ldr	r3, [pc, #60]	; (8008a5c <_svfiprintf_r+0x1f8>)
 8008a1e:	a904      	add	r1, sp, #16
 8008a20:	4638      	mov	r0, r7
 8008a22:	f7fc fa47 	bl	8004eb4 <_printf_float>
 8008a26:	1c42      	adds	r2, r0, #1
 8008a28:	4606      	mov	r6, r0
 8008a2a:	d1d6      	bne.n	80089da <_svfiprintf_r+0x176>
 8008a2c:	89ab      	ldrh	r3, [r5, #12]
 8008a2e:	065b      	lsls	r3, r3, #25
 8008a30:	f53f af2c 	bmi.w	800888c <_svfiprintf_r+0x28>
 8008a34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a36:	b01d      	add	sp, #116	; 0x74
 8008a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a3c:	ab03      	add	r3, sp, #12
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	462a      	mov	r2, r5
 8008a42:	4b06      	ldr	r3, [pc, #24]	; (8008a5c <_svfiprintf_r+0x1f8>)
 8008a44:	a904      	add	r1, sp, #16
 8008a46:	4638      	mov	r0, r7
 8008a48:	f7fc fcd8 	bl	80053fc <_printf_i>
 8008a4c:	e7eb      	b.n	8008a26 <_svfiprintf_r+0x1c2>
 8008a4e:	bf00      	nop
 8008a50:	0800a7ec 	.word	0x0800a7ec
 8008a54:	0800a7f6 	.word	0x0800a7f6
 8008a58:	08004eb5 	.word	0x08004eb5
 8008a5c:	080087ad 	.word	0x080087ad
 8008a60:	0800a7f2 	.word	0x0800a7f2
 8008a64:	00000000 	.word	0x00000000

08008a68 <nan>:
 8008a68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008a70 <nan+0x8>
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	00000000 	.word	0x00000000
 8008a74:	7ff80000 	.word	0x7ff80000

08008a78 <_sbrk_r>:
 8008a78:	b538      	push	{r3, r4, r5, lr}
 8008a7a:	4d06      	ldr	r5, [pc, #24]	; (8008a94 <_sbrk_r+0x1c>)
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	4604      	mov	r4, r0
 8008a80:	4608      	mov	r0, r1
 8008a82:	602b      	str	r3, [r5, #0]
 8008a84:	f7f9 f9a6 	bl	8001dd4 <_sbrk>
 8008a88:	1c43      	adds	r3, r0, #1
 8008a8a:	d102      	bne.n	8008a92 <_sbrk_r+0x1a>
 8008a8c:	682b      	ldr	r3, [r5, #0]
 8008a8e:	b103      	cbz	r3, 8008a92 <_sbrk_r+0x1a>
 8008a90:	6023      	str	r3, [r4, #0]
 8008a92:	bd38      	pop	{r3, r4, r5, pc}
 8008a94:	200007e0 	.word	0x200007e0

08008a98 <strncmp>:
 8008a98:	b510      	push	{r4, lr}
 8008a9a:	b17a      	cbz	r2, 8008abc <strncmp+0x24>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	3901      	subs	r1, #1
 8008aa0:	1884      	adds	r4, r0, r2
 8008aa2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008aa6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008aaa:	4290      	cmp	r0, r2
 8008aac:	d101      	bne.n	8008ab2 <strncmp+0x1a>
 8008aae:	42a3      	cmp	r3, r4
 8008ab0:	d101      	bne.n	8008ab6 <strncmp+0x1e>
 8008ab2:	1a80      	subs	r0, r0, r2
 8008ab4:	bd10      	pop	{r4, pc}
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	d1f3      	bne.n	8008aa2 <strncmp+0xa>
 8008aba:	e7fa      	b.n	8008ab2 <strncmp+0x1a>
 8008abc:	4610      	mov	r0, r2
 8008abe:	e7f9      	b.n	8008ab4 <strncmp+0x1c>

08008ac0 <__ascii_wctomb>:
 8008ac0:	b149      	cbz	r1, 8008ad6 <__ascii_wctomb+0x16>
 8008ac2:	2aff      	cmp	r2, #255	; 0xff
 8008ac4:	bf85      	ittet	hi
 8008ac6:	238a      	movhi	r3, #138	; 0x8a
 8008ac8:	6003      	strhi	r3, [r0, #0]
 8008aca:	700a      	strbls	r2, [r1, #0]
 8008acc:	f04f 30ff 	movhi.w	r0, #4294967295
 8008ad0:	bf98      	it	ls
 8008ad2:	2001      	movls	r0, #1
 8008ad4:	4770      	bx	lr
 8008ad6:	4608      	mov	r0, r1
 8008ad8:	4770      	bx	lr
	...

08008adc <__assert_func>:
 8008adc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ade:	4614      	mov	r4, r2
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	4b09      	ldr	r3, [pc, #36]	; (8008b08 <__assert_func+0x2c>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4605      	mov	r5, r0
 8008ae8:	68d8      	ldr	r0, [r3, #12]
 8008aea:	b14c      	cbz	r4, 8008b00 <__assert_func+0x24>
 8008aec:	4b07      	ldr	r3, [pc, #28]	; (8008b0c <__assert_func+0x30>)
 8008aee:	9100      	str	r1, [sp, #0]
 8008af0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008af4:	4906      	ldr	r1, [pc, #24]	; (8008b10 <__assert_func+0x34>)
 8008af6:	462b      	mov	r3, r5
 8008af8:	f000 f80e 	bl	8008b18 <fiprintf>
 8008afc:	f000 fa8c 	bl	8009018 <abort>
 8008b00:	4b04      	ldr	r3, [pc, #16]	; (8008b14 <__assert_func+0x38>)
 8008b02:	461c      	mov	r4, r3
 8008b04:	e7f3      	b.n	8008aee <__assert_func+0x12>
 8008b06:	bf00      	nop
 8008b08:	20000080 	.word	0x20000080
 8008b0c:	0800a7fd 	.word	0x0800a7fd
 8008b10:	0800a80a 	.word	0x0800a80a
 8008b14:	0800a838 	.word	0x0800a838

08008b18 <fiprintf>:
 8008b18:	b40e      	push	{r1, r2, r3}
 8008b1a:	b503      	push	{r0, r1, lr}
 8008b1c:	4601      	mov	r1, r0
 8008b1e:	ab03      	add	r3, sp, #12
 8008b20:	4805      	ldr	r0, [pc, #20]	; (8008b38 <fiprintf+0x20>)
 8008b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b26:	6800      	ldr	r0, [r0, #0]
 8008b28:	9301      	str	r3, [sp, #4]
 8008b2a:	f000 f885 	bl	8008c38 <_vfiprintf_r>
 8008b2e:	b002      	add	sp, #8
 8008b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b34:	b003      	add	sp, #12
 8008b36:	4770      	bx	lr
 8008b38:	20000080 	.word	0x20000080

08008b3c <memmove>:
 8008b3c:	4288      	cmp	r0, r1
 8008b3e:	b510      	push	{r4, lr}
 8008b40:	eb01 0402 	add.w	r4, r1, r2
 8008b44:	d902      	bls.n	8008b4c <memmove+0x10>
 8008b46:	4284      	cmp	r4, r0
 8008b48:	4623      	mov	r3, r4
 8008b4a:	d807      	bhi.n	8008b5c <memmove+0x20>
 8008b4c:	1e43      	subs	r3, r0, #1
 8008b4e:	42a1      	cmp	r1, r4
 8008b50:	d008      	beq.n	8008b64 <memmove+0x28>
 8008b52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b5a:	e7f8      	b.n	8008b4e <memmove+0x12>
 8008b5c:	4402      	add	r2, r0
 8008b5e:	4601      	mov	r1, r0
 8008b60:	428a      	cmp	r2, r1
 8008b62:	d100      	bne.n	8008b66 <memmove+0x2a>
 8008b64:	bd10      	pop	{r4, pc}
 8008b66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b6e:	e7f7      	b.n	8008b60 <memmove+0x24>

08008b70 <__malloc_lock>:
 8008b70:	4801      	ldr	r0, [pc, #4]	; (8008b78 <__malloc_lock+0x8>)
 8008b72:	f000 bc11 	b.w	8009398 <__retarget_lock_acquire_recursive>
 8008b76:	bf00      	nop
 8008b78:	200007e4 	.word	0x200007e4

08008b7c <__malloc_unlock>:
 8008b7c:	4801      	ldr	r0, [pc, #4]	; (8008b84 <__malloc_unlock+0x8>)
 8008b7e:	f000 bc0c 	b.w	800939a <__retarget_lock_release_recursive>
 8008b82:	bf00      	nop
 8008b84:	200007e4 	.word	0x200007e4

08008b88 <_realloc_r>:
 8008b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b8c:	4680      	mov	r8, r0
 8008b8e:	4614      	mov	r4, r2
 8008b90:	460e      	mov	r6, r1
 8008b92:	b921      	cbnz	r1, 8008b9e <_realloc_r+0x16>
 8008b94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b98:	4611      	mov	r1, r2
 8008b9a:	f7ff bd93 	b.w	80086c4 <_malloc_r>
 8008b9e:	b92a      	cbnz	r2, 8008bac <_realloc_r+0x24>
 8008ba0:	f7ff fd24 	bl	80085ec <_free_r>
 8008ba4:	4625      	mov	r5, r4
 8008ba6:	4628      	mov	r0, r5
 8008ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bac:	f000 fc5c 	bl	8009468 <_malloc_usable_size_r>
 8008bb0:	4284      	cmp	r4, r0
 8008bb2:	4607      	mov	r7, r0
 8008bb4:	d802      	bhi.n	8008bbc <_realloc_r+0x34>
 8008bb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008bba:	d812      	bhi.n	8008be2 <_realloc_r+0x5a>
 8008bbc:	4621      	mov	r1, r4
 8008bbe:	4640      	mov	r0, r8
 8008bc0:	f7ff fd80 	bl	80086c4 <_malloc_r>
 8008bc4:	4605      	mov	r5, r0
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	d0ed      	beq.n	8008ba6 <_realloc_r+0x1e>
 8008bca:	42bc      	cmp	r4, r7
 8008bcc:	4622      	mov	r2, r4
 8008bce:	4631      	mov	r1, r6
 8008bd0:	bf28      	it	cs
 8008bd2:	463a      	movcs	r2, r7
 8008bd4:	f7ff f824 	bl	8007c20 <memcpy>
 8008bd8:	4631      	mov	r1, r6
 8008bda:	4640      	mov	r0, r8
 8008bdc:	f7ff fd06 	bl	80085ec <_free_r>
 8008be0:	e7e1      	b.n	8008ba6 <_realloc_r+0x1e>
 8008be2:	4635      	mov	r5, r6
 8008be4:	e7df      	b.n	8008ba6 <_realloc_r+0x1e>

08008be6 <__sfputc_r>:
 8008be6:	6893      	ldr	r3, [r2, #8]
 8008be8:	3b01      	subs	r3, #1
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	b410      	push	{r4}
 8008bee:	6093      	str	r3, [r2, #8]
 8008bf0:	da08      	bge.n	8008c04 <__sfputc_r+0x1e>
 8008bf2:	6994      	ldr	r4, [r2, #24]
 8008bf4:	42a3      	cmp	r3, r4
 8008bf6:	db01      	blt.n	8008bfc <__sfputc_r+0x16>
 8008bf8:	290a      	cmp	r1, #10
 8008bfa:	d103      	bne.n	8008c04 <__sfputc_r+0x1e>
 8008bfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c00:	f000 b94a 	b.w	8008e98 <__swbuf_r>
 8008c04:	6813      	ldr	r3, [r2, #0]
 8008c06:	1c58      	adds	r0, r3, #1
 8008c08:	6010      	str	r0, [r2, #0]
 8008c0a:	7019      	strb	r1, [r3, #0]
 8008c0c:	4608      	mov	r0, r1
 8008c0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <__sfputs_r>:
 8008c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c16:	4606      	mov	r6, r0
 8008c18:	460f      	mov	r7, r1
 8008c1a:	4614      	mov	r4, r2
 8008c1c:	18d5      	adds	r5, r2, r3
 8008c1e:	42ac      	cmp	r4, r5
 8008c20:	d101      	bne.n	8008c26 <__sfputs_r+0x12>
 8008c22:	2000      	movs	r0, #0
 8008c24:	e007      	b.n	8008c36 <__sfputs_r+0x22>
 8008c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c2a:	463a      	mov	r2, r7
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	f7ff ffda 	bl	8008be6 <__sfputc_r>
 8008c32:	1c43      	adds	r3, r0, #1
 8008c34:	d1f3      	bne.n	8008c1e <__sfputs_r+0xa>
 8008c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c38 <_vfiprintf_r>:
 8008c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c3c:	460d      	mov	r5, r1
 8008c3e:	b09d      	sub	sp, #116	; 0x74
 8008c40:	4614      	mov	r4, r2
 8008c42:	4698      	mov	r8, r3
 8008c44:	4606      	mov	r6, r0
 8008c46:	b118      	cbz	r0, 8008c50 <_vfiprintf_r+0x18>
 8008c48:	6983      	ldr	r3, [r0, #24]
 8008c4a:	b90b      	cbnz	r3, 8008c50 <_vfiprintf_r+0x18>
 8008c4c:	f000 fb06 	bl	800925c <__sinit>
 8008c50:	4b89      	ldr	r3, [pc, #548]	; (8008e78 <_vfiprintf_r+0x240>)
 8008c52:	429d      	cmp	r5, r3
 8008c54:	d11b      	bne.n	8008c8e <_vfiprintf_r+0x56>
 8008c56:	6875      	ldr	r5, [r6, #4]
 8008c58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c5a:	07d9      	lsls	r1, r3, #31
 8008c5c:	d405      	bmi.n	8008c6a <_vfiprintf_r+0x32>
 8008c5e:	89ab      	ldrh	r3, [r5, #12]
 8008c60:	059a      	lsls	r2, r3, #22
 8008c62:	d402      	bmi.n	8008c6a <_vfiprintf_r+0x32>
 8008c64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c66:	f000 fb97 	bl	8009398 <__retarget_lock_acquire_recursive>
 8008c6a:	89ab      	ldrh	r3, [r5, #12]
 8008c6c:	071b      	lsls	r3, r3, #28
 8008c6e:	d501      	bpl.n	8008c74 <_vfiprintf_r+0x3c>
 8008c70:	692b      	ldr	r3, [r5, #16]
 8008c72:	b9eb      	cbnz	r3, 8008cb0 <_vfiprintf_r+0x78>
 8008c74:	4629      	mov	r1, r5
 8008c76:	4630      	mov	r0, r6
 8008c78:	f000 f960 	bl	8008f3c <__swsetup_r>
 8008c7c:	b1c0      	cbz	r0, 8008cb0 <_vfiprintf_r+0x78>
 8008c7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c80:	07dc      	lsls	r4, r3, #31
 8008c82:	d50e      	bpl.n	8008ca2 <_vfiprintf_r+0x6a>
 8008c84:	f04f 30ff 	mov.w	r0, #4294967295
 8008c88:	b01d      	add	sp, #116	; 0x74
 8008c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c8e:	4b7b      	ldr	r3, [pc, #492]	; (8008e7c <_vfiprintf_r+0x244>)
 8008c90:	429d      	cmp	r5, r3
 8008c92:	d101      	bne.n	8008c98 <_vfiprintf_r+0x60>
 8008c94:	68b5      	ldr	r5, [r6, #8]
 8008c96:	e7df      	b.n	8008c58 <_vfiprintf_r+0x20>
 8008c98:	4b79      	ldr	r3, [pc, #484]	; (8008e80 <_vfiprintf_r+0x248>)
 8008c9a:	429d      	cmp	r5, r3
 8008c9c:	bf08      	it	eq
 8008c9e:	68f5      	ldreq	r5, [r6, #12]
 8008ca0:	e7da      	b.n	8008c58 <_vfiprintf_r+0x20>
 8008ca2:	89ab      	ldrh	r3, [r5, #12]
 8008ca4:	0598      	lsls	r0, r3, #22
 8008ca6:	d4ed      	bmi.n	8008c84 <_vfiprintf_r+0x4c>
 8008ca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008caa:	f000 fb76 	bl	800939a <__retarget_lock_release_recursive>
 8008cae:	e7e9      	b.n	8008c84 <_vfiprintf_r+0x4c>
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8008cb4:	2320      	movs	r3, #32
 8008cb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cba:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cbe:	2330      	movs	r3, #48	; 0x30
 8008cc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008e84 <_vfiprintf_r+0x24c>
 8008cc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cc8:	f04f 0901 	mov.w	r9, #1
 8008ccc:	4623      	mov	r3, r4
 8008cce:	469a      	mov	sl, r3
 8008cd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cd4:	b10a      	cbz	r2, 8008cda <_vfiprintf_r+0xa2>
 8008cd6:	2a25      	cmp	r2, #37	; 0x25
 8008cd8:	d1f9      	bne.n	8008cce <_vfiprintf_r+0x96>
 8008cda:	ebba 0b04 	subs.w	fp, sl, r4
 8008cde:	d00b      	beq.n	8008cf8 <_vfiprintf_r+0xc0>
 8008ce0:	465b      	mov	r3, fp
 8008ce2:	4622      	mov	r2, r4
 8008ce4:	4629      	mov	r1, r5
 8008ce6:	4630      	mov	r0, r6
 8008ce8:	f7ff ff94 	bl	8008c14 <__sfputs_r>
 8008cec:	3001      	adds	r0, #1
 8008cee:	f000 80aa 	beq.w	8008e46 <_vfiprintf_r+0x20e>
 8008cf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cf4:	445a      	add	r2, fp
 8008cf6:	9209      	str	r2, [sp, #36]	; 0x24
 8008cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f000 80a2 	beq.w	8008e46 <_vfiprintf_r+0x20e>
 8008d02:	2300      	movs	r3, #0
 8008d04:	f04f 32ff 	mov.w	r2, #4294967295
 8008d08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d0c:	f10a 0a01 	add.w	sl, sl, #1
 8008d10:	9304      	str	r3, [sp, #16]
 8008d12:	9307      	str	r3, [sp, #28]
 8008d14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d18:	931a      	str	r3, [sp, #104]	; 0x68
 8008d1a:	4654      	mov	r4, sl
 8008d1c:	2205      	movs	r2, #5
 8008d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d22:	4858      	ldr	r0, [pc, #352]	; (8008e84 <_vfiprintf_r+0x24c>)
 8008d24:	f7f7 fa64 	bl	80001f0 <memchr>
 8008d28:	9a04      	ldr	r2, [sp, #16]
 8008d2a:	b9d8      	cbnz	r0, 8008d64 <_vfiprintf_r+0x12c>
 8008d2c:	06d1      	lsls	r1, r2, #27
 8008d2e:	bf44      	itt	mi
 8008d30:	2320      	movmi	r3, #32
 8008d32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d36:	0713      	lsls	r3, r2, #28
 8008d38:	bf44      	itt	mi
 8008d3a:	232b      	movmi	r3, #43	; 0x2b
 8008d3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d40:	f89a 3000 	ldrb.w	r3, [sl]
 8008d44:	2b2a      	cmp	r3, #42	; 0x2a
 8008d46:	d015      	beq.n	8008d74 <_vfiprintf_r+0x13c>
 8008d48:	9a07      	ldr	r2, [sp, #28]
 8008d4a:	4654      	mov	r4, sl
 8008d4c:	2000      	movs	r0, #0
 8008d4e:	f04f 0c0a 	mov.w	ip, #10
 8008d52:	4621      	mov	r1, r4
 8008d54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d58:	3b30      	subs	r3, #48	; 0x30
 8008d5a:	2b09      	cmp	r3, #9
 8008d5c:	d94e      	bls.n	8008dfc <_vfiprintf_r+0x1c4>
 8008d5e:	b1b0      	cbz	r0, 8008d8e <_vfiprintf_r+0x156>
 8008d60:	9207      	str	r2, [sp, #28]
 8008d62:	e014      	b.n	8008d8e <_vfiprintf_r+0x156>
 8008d64:	eba0 0308 	sub.w	r3, r0, r8
 8008d68:	fa09 f303 	lsl.w	r3, r9, r3
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	9304      	str	r3, [sp, #16]
 8008d70:	46a2      	mov	sl, r4
 8008d72:	e7d2      	b.n	8008d1a <_vfiprintf_r+0xe2>
 8008d74:	9b03      	ldr	r3, [sp, #12]
 8008d76:	1d19      	adds	r1, r3, #4
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	9103      	str	r1, [sp, #12]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	bfbb      	ittet	lt
 8008d80:	425b      	neglt	r3, r3
 8008d82:	f042 0202 	orrlt.w	r2, r2, #2
 8008d86:	9307      	strge	r3, [sp, #28]
 8008d88:	9307      	strlt	r3, [sp, #28]
 8008d8a:	bfb8      	it	lt
 8008d8c:	9204      	strlt	r2, [sp, #16]
 8008d8e:	7823      	ldrb	r3, [r4, #0]
 8008d90:	2b2e      	cmp	r3, #46	; 0x2e
 8008d92:	d10c      	bne.n	8008dae <_vfiprintf_r+0x176>
 8008d94:	7863      	ldrb	r3, [r4, #1]
 8008d96:	2b2a      	cmp	r3, #42	; 0x2a
 8008d98:	d135      	bne.n	8008e06 <_vfiprintf_r+0x1ce>
 8008d9a:	9b03      	ldr	r3, [sp, #12]
 8008d9c:	1d1a      	adds	r2, r3, #4
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	9203      	str	r2, [sp, #12]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	bfb8      	it	lt
 8008da6:	f04f 33ff 	movlt.w	r3, #4294967295
 8008daa:	3402      	adds	r4, #2
 8008dac:	9305      	str	r3, [sp, #20]
 8008dae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008e94 <_vfiprintf_r+0x25c>
 8008db2:	7821      	ldrb	r1, [r4, #0]
 8008db4:	2203      	movs	r2, #3
 8008db6:	4650      	mov	r0, sl
 8008db8:	f7f7 fa1a 	bl	80001f0 <memchr>
 8008dbc:	b140      	cbz	r0, 8008dd0 <_vfiprintf_r+0x198>
 8008dbe:	2340      	movs	r3, #64	; 0x40
 8008dc0:	eba0 000a 	sub.w	r0, r0, sl
 8008dc4:	fa03 f000 	lsl.w	r0, r3, r0
 8008dc8:	9b04      	ldr	r3, [sp, #16]
 8008dca:	4303      	orrs	r3, r0
 8008dcc:	3401      	adds	r4, #1
 8008dce:	9304      	str	r3, [sp, #16]
 8008dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dd4:	482c      	ldr	r0, [pc, #176]	; (8008e88 <_vfiprintf_r+0x250>)
 8008dd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008dda:	2206      	movs	r2, #6
 8008ddc:	f7f7 fa08 	bl	80001f0 <memchr>
 8008de0:	2800      	cmp	r0, #0
 8008de2:	d03f      	beq.n	8008e64 <_vfiprintf_r+0x22c>
 8008de4:	4b29      	ldr	r3, [pc, #164]	; (8008e8c <_vfiprintf_r+0x254>)
 8008de6:	bb1b      	cbnz	r3, 8008e30 <_vfiprintf_r+0x1f8>
 8008de8:	9b03      	ldr	r3, [sp, #12]
 8008dea:	3307      	adds	r3, #7
 8008dec:	f023 0307 	bic.w	r3, r3, #7
 8008df0:	3308      	adds	r3, #8
 8008df2:	9303      	str	r3, [sp, #12]
 8008df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008df6:	443b      	add	r3, r7
 8008df8:	9309      	str	r3, [sp, #36]	; 0x24
 8008dfa:	e767      	b.n	8008ccc <_vfiprintf_r+0x94>
 8008dfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e00:	460c      	mov	r4, r1
 8008e02:	2001      	movs	r0, #1
 8008e04:	e7a5      	b.n	8008d52 <_vfiprintf_r+0x11a>
 8008e06:	2300      	movs	r3, #0
 8008e08:	3401      	adds	r4, #1
 8008e0a:	9305      	str	r3, [sp, #20]
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	f04f 0c0a 	mov.w	ip, #10
 8008e12:	4620      	mov	r0, r4
 8008e14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e18:	3a30      	subs	r2, #48	; 0x30
 8008e1a:	2a09      	cmp	r2, #9
 8008e1c:	d903      	bls.n	8008e26 <_vfiprintf_r+0x1ee>
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d0c5      	beq.n	8008dae <_vfiprintf_r+0x176>
 8008e22:	9105      	str	r1, [sp, #20]
 8008e24:	e7c3      	b.n	8008dae <_vfiprintf_r+0x176>
 8008e26:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e2a:	4604      	mov	r4, r0
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e7f0      	b.n	8008e12 <_vfiprintf_r+0x1da>
 8008e30:	ab03      	add	r3, sp, #12
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	462a      	mov	r2, r5
 8008e36:	4b16      	ldr	r3, [pc, #88]	; (8008e90 <_vfiprintf_r+0x258>)
 8008e38:	a904      	add	r1, sp, #16
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	f7fc f83a 	bl	8004eb4 <_printf_float>
 8008e40:	4607      	mov	r7, r0
 8008e42:	1c78      	adds	r0, r7, #1
 8008e44:	d1d6      	bne.n	8008df4 <_vfiprintf_r+0x1bc>
 8008e46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e48:	07d9      	lsls	r1, r3, #31
 8008e4a:	d405      	bmi.n	8008e58 <_vfiprintf_r+0x220>
 8008e4c:	89ab      	ldrh	r3, [r5, #12]
 8008e4e:	059a      	lsls	r2, r3, #22
 8008e50:	d402      	bmi.n	8008e58 <_vfiprintf_r+0x220>
 8008e52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e54:	f000 faa1 	bl	800939a <__retarget_lock_release_recursive>
 8008e58:	89ab      	ldrh	r3, [r5, #12]
 8008e5a:	065b      	lsls	r3, r3, #25
 8008e5c:	f53f af12 	bmi.w	8008c84 <_vfiprintf_r+0x4c>
 8008e60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e62:	e711      	b.n	8008c88 <_vfiprintf_r+0x50>
 8008e64:	ab03      	add	r3, sp, #12
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	462a      	mov	r2, r5
 8008e6a:	4b09      	ldr	r3, [pc, #36]	; (8008e90 <_vfiprintf_r+0x258>)
 8008e6c:	a904      	add	r1, sp, #16
 8008e6e:	4630      	mov	r0, r6
 8008e70:	f7fc fac4 	bl	80053fc <_printf_i>
 8008e74:	e7e4      	b.n	8008e40 <_vfiprintf_r+0x208>
 8008e76:	bf00      	nop
 8008e78:	0800a85c 	.word	0x0800a85c
 8008e7c:	0800a87c 	.word	0x0800a87c
 8008e80:	0800a83c 	.word	0x0800a83c
 8008e84:	0800a7ec 	.word	0x0800a7ec
 8008e88:	0800a7f6 	.word	0x0800a7f6
 8008e8c:	08004eb5 	.word	0x08004eb5
 8008e90:	08008c15 	.word	0x08008c15
 8008e94:	0800a7f2 	.word	0x0800a7f2

08008e98 <__swbuf_r>:
 8008e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9a:	460e      	mov	r6, r1
 8008e9c:	4614      	mov	r4, r2
 8008e9e:	4605      	mov	r5, r0
 8008ea0:	b118      	cbz	r0, 8008eaa <__swbuf_r+0x12>
 8008ea2:	6983      	ldr	r3, [r0, #24]
 8008ea4:	b90b      	cbnz	r3, 8008eaa <__swbuf_r+0x12>
 8008ea6:	f000 f9d9 	bl	800925c <__sinit>
 8008eaa:	4b21      	ldr	r3, [pc, #132]	; (8008f30 <__swbuf_r+0x98>)
 8008eac:	429c      	cmp	r4, r3
 8008eae:	d12b      	bne.n	8008f08 <__swbuf_r+0x70>
 8008eb0:	686c      	ldr	r4, [r5, #4]
 8008eb2:	69a3      	ldr	r3, [r4, #24]
 8008eb4:	60a3      	str	r3, [r4, #8]
 8008eb6:	89a3      	ldrh	r3, [r4, #12]
 8008eb8:	071a      	lsls	r2, r3, #28
 8008eba:	d52f      	bpl.n	8008f1c <__swbuf_r+0x84>
 8008ebc:	6923      	ldr	r3, [r4, #16]
 8008ebe:	b36b      	cbz	r3, 8008f1c <__swbuf_r+0x84>
 8008ec0:	6923      	ldr	r3, [r4, #16]
 8008ec2:	6820      	ldr	r0, [r4, #0]
 8008ec4:	1ac0      	subs	r0, r0, r3
 8008ec6:	6963      	ldr	r3, [r4, #20]
 8008ec8:	b2f6      	uxtb	r6, r6
 8008eca:	4283      	cmp	r3, r0
 8008ecc:	4637      	mov	r7, r6
 8008ece:	dc04      	bgt.n	8008eda <__swbuf_r+0x42>
 8008ed0:	4621      	mov	r1, r4
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	f000 f92e 	bl	8009134 <_fflush_r>
 8008ed8:	bb30      	cbnz	r0, 8008f28 <__swbuf_r+0x90>
 8008eda:	68a3      	ldr	r3, [r4, #8]
 8008edc:	3b01      	subs	r3, #1
 8008ede:	60a3      	str	r3, [r4, #8]
 8008ee0:	6823      	ldr	r3, [r4, #0]
 8008ee2:	1c5a      	adds	r2, r3, #1
 8008ee4:	6022      	str	r2, [r4, #0]
 8008ee6:	701e      	strb	r6, [r3, #0]
 8008ee8:	6963      	ldr	r3, [r4, #20]
 8008eea:	3001      	adds	r0, #1
 8008eec:	4283      	cmp	r3, r0
 8008eee:	d004      	beq.n	8008efa <__swbuf_r+0x62>
 8008ef0:	89a3      	ldrh	r3, [r4, #12]
 8008ef2:	07db      	lsls	r3, r3, #31
 8008ef4:	d506      	bpl.n	8008f04 <__swbuf_r+0x6c>
 8008ef6:	2e0a      	cmp	r6, #10
 8008ef8:	d104      	bne.n	8008f04 <__swbuf_r+0x6c>
 8008efa:	4621      	mov	r1, r4
 8008efc:	4628      	mov	r0, r5
 8008efe:	f000 f919 	bl	8009134 <_fflush_r>
 8008f02:	b988      	cbnz	r0, 8008f28 <__swbuf_r+0x90>
 8008f04:	4638      	mov	r0, r7
 8008f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f08:	4b0a      	ldr	r3, [pc, #40]	; (8008f34 <__swbuf_r+0x9c>)
 8008f0a:	429c      	cmp	r4, r3
 8008f0c:	d101      	bne.n	8008f12 <__swbuf_r+0x7a>
 8008f0e:	68ac      	ldr	r4, [r5, #8]
 8008f10:	e7cf      	b.n	8008eb2 <__swbuf_r+0x1a>
 8008f12:	4b09      	ldr	r3, [pc, #36]	; (8008f38 <__swbuf_r+0xa0>)
 8008f14:	429c      	cmp	r4, r3
 8008f16:	bf08      	it	eq
 8008f18:	68ec      	ldreq	r4, [r5, #12]
 8008f1a:	e7ca      	b.n	8008eb2 <__swbuf_r+0x1a>
 8008f1c:	4621      	mov	r1, r4
 8008f1e:	4628      	mov	r0, r5
 8008f20:	f000 f80c 	bl	8008f3c <__swsetup_r>
 8008f24:	2800      	cmp	r0, #0
 8008f26:	d0cb      	beq.n	8008ec0 <__swbuf_r+0x28>
 8008f28:	f04f 37ff 	mov.w	r7, #4294967295
 8008f2c:	e7ea      	b.n	8008f04 <__swbuf_r+0x6c>
 8008f2e:	bf00      	nop
 8008f30:	0800a85c 	.word	0x0800a85c
 8008f34:	0800a87c 	.word	0x0800a87c
 8008f38:	0800a83c 	.word	0x0800a83c

08008f3c <__swsetup_r>:
 8008f3c:	4b32      	ldr	r3, [pc, #200]	; (8009008 <__swsetup_r+0xcc>)
 8008f3e:	b570      	push	{r4, r5, r6, lr}
 8008f40:	681d      	ldr	r5, [r3, #0]
 8008f42:	4606      	mov	r6, r0
 8008f44:	460c      	mov	r4, r1
 8008f46:	b125      	cbz	r5, 8008f52 <__swsetup_r+0x16>
 8008f48:	69ab      	ldr	r3, [r5, #24]
 8008f4a:	b913      	cbnz	r3, 8008f52 <__swsetup_r+0x16>
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	f000 f985 	bl	800925c <__sinit>
 8008f52:	4b2e      	ldr	r3, [pc, #184]	; (800900c <__swsetup_r+0xd0>)
 8008f54:	429c      	cmp	r4, r3
 8008f56:	d10f      	bne.n	8008f78 <__swsetup_r+0x3c>
 8008f58:	686c      	ldr	r4, [r5, #4]
 8008f5a:	89a3      	ldrh	r3, [r4, #12]
 8008f5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f60:	0719      	lsls	r1, r3, #28
 8008f62:	d42c      	bmi.n	8008fbe <__swsetup_r+0x82>
 8008f64:	06dd      	lsls	r5, r3, #27
 8008f66:	d411      	bmi.n	8008f8c <__swsetup_r+0x50>
 8008f68:	2309      	movs	r3, #9
 8008f6a:	6033      	str	r3, [r6, #0]
 8008f6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f70:	81a3      	strh	r3, [r4, #12]
 8008f72:	f04f 30ff 	mov.w	r0, #4294967295
 8008f76:	e03e      	b.n	8008ff6 <__swsetup_r+0xba>
 8008f78:	4b25      	ldr	r3, [pc, #148]	; (8009010 <__swsetup_r+0xd4>)
 8008f7a:	429c      	cmp	r4, r3
 8008f7c:	d101      	bne.n	8008f82 <__swsetup_r+0x46>
 8008f7e:	68ac      	ldr	r4, [r5, #8]
 8008f80:	e7eb      	b.n	8008f5a <__swsetup_r+0x1e>
 8008f82:	4b24      	ldr	r3, [pc, #144]	; (8009014 <__swsetup_r+0xd8>)
 8008f84:	429c      	cmp	r4, r3
 8008f86:	bf08      	it	eq
 8008f88:	68ec      	ldreq	r4, [r5, #12]
 8008f8a:	e7e6      	b.n	8008f5a <__swsetup_r+0x1e>
 8008f8c:	0758      	lsls	r0, r3, #29
 8008f8e:	d512      	bpl.n	8008fb6 <__swsetup_r+0x7a>
 8008f90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f92:	b141      	cbz	r1, 8008fa6 <__swsetup_r+0x6a>
 8008f94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f98:	4299      	cmp	r1, r3
 8008f9a:	d002      	beq.n	8008fa2 <__swsetup_r+0x66>
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	f7ff fb25 	bl	80085ec <_free_r>
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	6363      	str	r3, [r4, #52]	; 0x34
 8008fa6:	89a3      	ldrh	r3, [r4, #12]
 8008fa8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008fac:	81a3      	strh	r3, [r4, #12]
 8008fae:	2300      	movs	r3, #0
 8008fb0:	6063      	str	r3, [r4, #4]
 8008fb2:	6923      	ldr	r3, [r4, #16]
 8008fb4:	6023      	str	r3, [r4, #0]
 8008fb6:	89a3      	ldrh	r3, [r4, #12]
 8008fb8:	f043 0308 	orr.w	r3, r3, #8
 8008fbc:	81a3      	strh	r3, [r4, #12]
 8008fbe:	6923      	ldr	r3, [r4, #16]
 8008fc0:	b94b      	cbnz	r3, 8008fd6 <__swsetup_r+0x9a>
 8008fc2:	89a3      	ldrh	r3, [r4, #12]
 8008fc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fcc:	d003      	beq.n	8008fd6 <__swsetup_r+0x9a>
 8008fce:	4621      	mov	r1, r4
 8008fd0:	4630      	mov	r0, r6
 8008fd2:	f000 fa09 	bl	80093e8 <__smakebuf_r>
 8008fd6:	89a0      	ldrh	r0, [r4, #12]
 8008fd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fdc:	f010 0301 	ands.w	r3, r0, #1
 8008fe0:	d00a      	beq.n	8008ff8 <__swsetup_r+0xbc>
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	60a3      	str	r3, [r4, #8]
 8008fe6:	6963      	ldr	r3, [r4, #20]
 8008fe8:	425b      	negs	r3, r3
 8008fea:	61a3      	str	r3, [r4, #24]
 8008fec:	6923      	ldr	r3, [r4, #16]
 8008fee:	b943      	cbnz	r3, 8009002 <__swsetup_r+0xc6>
 8008ff0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ff4:	d1ba      	bne.n	8008f6c <__swsetup_r+0x30>
 8008ff6:	bd70      	pop	{r4, r5, r6, pc}
 8008ff8:	0781      	lsls	r1, r0, #30
 8008ffa:	bf58      	it	pl
 8008ffc:	6963      	ldrpl	r3, [r4, #20]
 8008ffe:	60a3      	str	r3, [r4, #8]
 8009000:	e7f4      	b.n	8008fec <__swsetup_r+0xb0>
 8009002:	2000      	movs	r0, #0
 8009004:	e7f7      	b.n	8008ff6 <__swsetup_r+0xba>
 8009006:	bf00      	nop
 8009008:	20000080 	.word	0x20000080
 800900c:	0800a85c 	.word	0x0800a85c
 8009010:	0800a87c 	.word	0x0800a87c
 8009014:	0800a83c 	.word	0x0800a83c

08009018 <abort>:
 8009018:	b508      	push	{r3, lr}
 800901a:	2006      	movs	r0, #6
 800901c:	f000 fa54 	bl	80094c8 <raise>
 8009020:	2001      	movs	r0, #1
 8009022:	f7f8 fe5f 	bl	8001ce4 <_exit>
	...

08009028 <__sflush_r>:
 8009028:	898a      	ldrh	r2, [r1, #12]
 800902a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800902e:	4605      	mov	r5, r0
 8009030:	0710      	lsls	r0, r2, #28
 8009032:	460c      	mov	r4, r1
 8009034:	d458      	bmi.n	80090e8 <__sflush_r+0xc0>
 8009036:	684b      	ldr	r3, [r1, #4]
 8009038:	2b00      	cmp	r3, #0
 800903a:	dc05      	bgt.n	8009048 <__sflush_r+0x20>
 800903c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800903e:	2b00      	cmp	r3, #0
 8009040:	dc02      	bgt.n	8009048 <__sflush_r+0x20>
 8009042:	2000      	movs	r0, #0
 8009044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009048:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800904a:	2e00      	cmp	r6, #0
 800904c:	d0f9      	beq.n	8009042 <__sflush_r+0x1a>
 800904e:	2300      	movs	r3, #0
 8009050:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009054:	682f      	ldr	r7, [r5, #0]
 8009056:	602b      	str	r3, [r5, #0]
 8009058:	d032      	beq.n	80090c0 <__sflush_r+0x98>
 800905a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800905c:	89a3      	ldrh	r3, [r4, #12]
 800905e:	075a      	lsls	r2, r3, #29
 8009060:	d505      	bpl.n	800906e <__sflush_r+0x46>
 8009062:	6863      	ldr	r3, [r4, #4]
 8009064:	1ac0      	subs	r0, r0, r3
 8009066:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009068:	b10b      	cbz	r3, 800906e <__sflush_r+0x46>
 800906a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800906c:	1ac0      	subs	r0, r0, r3
 800906e:	2300      	movs	r3, #0
 8009070:	4602      	mov	r2, r0
 8009072:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009074:	6a21      	ldr	r1, [r4, #32]
 8009076:	4628      	mov	r0, r5
 8009078:	47b0      	blx	r6
 800907a:	1c43      	adds	r3, r0, #1
 800907c:	89a3      	ldrh	r3, [r4, #12]
 800907e:	d106      	bne.n	800908e <__sflush_r+0x66>
 8009080:	6829      	ldr	r1, [r5, #0]
 8009082:	291d      	cmp	r1, #29
 8009084:	d82c      	bhi.n	80090e0 <__sflush_r+0xb8>
 8009086:	4a2a      	ldr	r2, [pc, #168]	; (8009130 <__sflush_r+0x108>)
 8009088:	40ca      	lsrs	r2, r1
 800908a:	07d6      	lsls	r6, r2, #31
 800908c:	d528      	bpl.n	80090e0 <__sflush_r+0xb8>
 800908e:	2200      	movs	r2, #0
 8009090:	6062      	str	r2, [r4, #4]
 8009092:	04d9      	lsls	r1, r3, #19
 8009094:	6922      	ldr	r2, [r4, #16]
 8009096:	6022      	str	r2, [r4, #0]
 8009098:	d504      	bpl.n	80090a4 <__sflush_r+0x7c>
 800909a:	1c42      	adds	r2, r0, #1
 800909c:	d101      	bne.n	80090a2 <__sflush_r+0x7a>
 800909e:	682b      	ldr	r3, [r5, #0]
 80090a0:	b903      	cbnz	r3, 80090a4 <__sflush_r+0x7c>
 80090a2:	6560      	str	r0, [r4, #84]	; 0x54
 80090a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090a6:	602f      	str	r7, [r5, #0]
 80090a8:	2900      	cmp	r1, #0
 80090aa:	d0ca      	beq.n	8009042 <__sflush_r+0x1a>
 80090ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090b0:	4299      	cmp	r1, r3
 80090b2:	d002      	beq.n	80090ba <__sflush_r+0x92>
 80090b4:	4628      	mov	r0, r5
 80090b6:	f7ff fa99 	bl	80085ec <_free_r>
 80090ba:	2000      	movs	r0, #0
 80090bc:	6360      	str	r0, [r4, #52]	; 0x34
 80090be:	e7c1      	b.n	8009044 <__sflush_r+0x1c>
 80090c0:	6a21      	ldr	r1, [r4, #32]
 80090c2:	2301      	movs	r3, #1
 80090c4:	4628      	mov	r0, r5
 80090c6:	47b0      	blx	r6
 80090c8:	1c41      	adds	r1, r0, #1
 80090ca:	d1c7      	bne.n	800905c <__sflush_r+0x34>
 80090cc:	682b      	ldr	r3, [r5, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d0c4      	beq.n	800905c <__sflush_r+0x34>
 80090d2:	2b1d      	cmp	r3, #29
 80090d4:	d001      	beq.n	80090da <__sflush_r+0xb2>
 80090d6:	2b16      	cmp	r3, #22
 80090d8:	d101      	bne.n	80090de <__sflush_r+0xb6>
 80090da:	602f      	str	r7, [r5, #0]
 80090dc:	e7b1      	b.n	8009042 <__sflush_r+0x1a>
 80090de:	89a3      	ldrh	r3, [r4, #12]
 80090e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090e4:	81a3      	strh	r3, [r4, #12]
 80090e6:	e7ad      	b.n	8009044 <__sflush_r+0x1c>
 80090e8:	690f      	ldr	r7, [r1, #16]
 80090ea:	2f00      	cmp	r7, #0
 80090ec:	d0a9      	beq.n	8009042 <__sflush_r+0x1a>
 80090ee:	0793      	lsls	r3, r2, #30
 80090f0:	680e      	ldr	r6, [r1, #0]
 80090f2:	bf08      	it	eq
 80090f4:	694b      	ldreq	r3, [r1, #20]
 80090f6:	600f      	str	r7, [r1, #0]
 80090f8:	bf18      	it	ne
 80090fa:	2300      	movne	r3, #0
 80090fc:	eba6 0807 	sub.w	r8, r6, r7
 8009100:	608b      	str	r3, [r1, #8]
 8009102:	f1b8 0f00 	cmp.w	r8, #0
 8009106:	dd9c      	ble.n	8009042 <__sflush_r+0x1a>
 8009108:	6a21      	ldr	r1, [r4, #32]
 800910a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800910c:	4643      	mov	r3, r8
 800910e:	463a      	mov	r2, r7
 8009110:	4628      	mov	r0, r5
 8009112:	47b0      	blx	r6
 8009114:	2800      	cmp	r0, #0
 8009116:	dc06      	bgt.n	8009126 <__sflush_r+0xfe>
 8009118:	89a3      	ldrh	r3, [r4, #12]
 800911a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800911e:	81a3      	strh	r3, [r4, #12]
 8009120:	f04f 30ff 	mov.w	r0, #4294967295
 8009124:	e78e      	b.n	8009044 <__sflush_r+0x1c>
 8009126:	4407      	add	r7, r0
 8009128:	eba8 0800 	sub.w	r8, r8, r0
 800912c:	e7e9      	b.n	8009102 <__sflush_r+0xda>
 800912e:	bf00      	nop
 8009130:	20400001 	.word	0x20400001

08009134 <_fflush_r>:
 8009134:	b538      	push	{r3, r4, r5, lr}
 8009136:	690b      	ldr	r3, [r1, #16]
 8009138:	4605      	mov	r5, r0
 800913a:	460c      	mov	r4, r1
 800913c:	b913      	cbnz	r3, 8009144 <_fflush_r+0x10>
 800913e:	2500      	movs	r5, #0
 8009140:	4628      	mov	r0, r5
 8009142:	bd38      	pop	{r3, r4, r5, pc}
 8009144:	b118      	cbz	r0, 800914e <_fflush_r+0x1a>
 8009146:	6983      	ldr	r3, [r0, #24]
 8009148:	b90b      	cbnz	r3, 800914e <_fflush_r+0x1a>
 800914a:	f000 f887 	bl	800925c <__sinit>
 800914e:	4b14      	ldr	r3, [pc, #80]	; (80091a0 <_fflush_r+0x6c>)
 8009150:	429c      	cmp	r4, r3
 8009152:	d11b      	bne.n	800918c <_fflush_r+0x58>
 8009154:	686c      	ldr	r4, [r5, #4]
 8009156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d0ef      	beq.n	800913e <_fflush_r+0xa>
 800915e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009160:	07d0      	lsls	r0, r2, #31
 8009162:	d404      	bmi.n	800916e <_fflush_r+0x3a>
 8009164:	0599      	lsls	r1, r3, #22
 8009166:	d402      	bmi.n	800916e <_fflush_r+0x3a>
 8009168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800916a:	f000 f915 	bl	8009398 <__retarget_lock_acquire_recursive>
 800916e:	4628      	mov	r0, r5
 8009170:	4621      	mov	r1, r4
 8009172:	f7ff ff59 	bl	8009028 <__sflush_r>
 8009176:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009178:	07da      	lsls	r2, r3, #31
 800917a:	4605      	mov	r5, r0
 800917c:	d4e0      	bmi.n	8009140 <_fflush_r+0xc>
 800917e:	89a3      	ldrh	r3, [r4, #12]
 8009180:	059b      	lsls	r3, r3, #22
 8009182:	d4dd      	bmi.n	8009140 <_fflush_r+0xc>
 8009184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009186:	f000 f908 	bl	800939a <__retarget_lock_release_recursive>
 800918a:	e7d9      	b.n	8009140 <_fflush_r+0xc>
 800918c:	4b05      	ldr	r3, [pc, #20]	; (80091a4 <_fflush_r+0x70>)
 800918e:	429c      	cmp	r4, r3
 8009190:	d101      	bne.n	8009196 <_fflush_r+0x62>
 8009192:	68ac      	ldr	r4, [r5, #8]
 8009194:	e7df      	b.n	8009156 <_fflush_r+0x22>
 8009196:	4b04      	ldr	r3, [pc, #16]	; (80091a8 <_fflush_r+0x74>)
 8009198:	429c      	cmp	r4, r3
 800919a:	bf08      	it	eq
 800919c:	68ec      	ldreq	r4, [r5, #12]
 800919e:	e7da      	b.n	8009156 <_fflush_r+0x22>
 80091a0:	0800a85c 	.word	0x0800a85c
 80091a4:	0800a87c 	.word	0x0800a87c
 80091a8:	0800a83c 	.word	0x0800a83c

080091ac <std>:
 80091ac:	2300      	movs	r3, #0
 80091ae:	b510      	push	{r4, lr}
 80091b0:	4604      	mov	r4, r0
 80091b2:	e9c0 3300 	strd	r3, r3, [r0]
 80091b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091ba:	6083      	str	r3, [r0, #8]
 80091bc:	8181      	strh	r1, [r0, #12]
 80091be:	6643      	str	r3, [r0, #100]	; 0x64
 80091c0:	81c2      	strh	r2, [r0, #14]
 80091c2:	6183      	str	r3, [r0, #24]
 80091c4:	4619      	mov	r1, r3
 80091c6:	2208      	movs	r2, #8
 80091c8:	305c      	adds	r0, #92	; 0x5c
 80091ca:	f7fb fdcb 	bl	8004d64 <memset>
 80091ce:	4b05      	ldr	r3, [pc, #20]	; (80091e4 <std+0x38>)
 80091d0:	6263      	str	r3, [r4, #36]	; 0x24
 80091d2:	4b05      	ldr	r3, [pc, #20]	; (80091e8 <std+0x3c>)
 80091d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80091d6:	4b05      	ldr	r3, [pc, #20]	; (80091ec <std+0x40>)
 80091d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80091da:	4b05      	ldr	r3, [pc, #20]	; (80091f0 <std+0x44>)
 80091dc:	6224      	str	r4, [r4, #32]
 80091de:	6323      	str	r3, [r4, #48]	; 0x30
 80091e0:	bd10      	pop	{r4, pc}
 80091e2:	bf00      	nop
 80091e4:	08009501 	.word	0x08009501
 80091e8:	08009523 	.word	0x08009523
 80091ec:	0800955b 	.word	0x0800955b
 80091f0:	0800957f 	.word	0x0800957f

080091f4 <_cleanup_r>:
 80091f4:	4901      	ldr	r1, [pc, #4]	; (80091fc <_cleanup_r+0x8>)
 80091f6:	f000 b8af 	b.w	8009358 <_fwalk_reent>
 80091fa:	bf00      	nop
 80091fc:	08009135 	.word	0x08009135

08009200 <__sfmoreglue>:
 8009200:	b570      	push	{r4, r5, r6, lr}
 8009202:	2268      	movs	r2, #104	; 0x68
 8009204:	1e4d      	subs	r5, r1, #1
 8009206:	4355      	muls	r5, r2
 8009208:	460e      	mov	r6, r1
 800920a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800920e:	f7ff fa59 	bl	80086c4 <_malloc_r>
 8009212:	4604      	mov	r4, r0
 8009214:	b140      	cbz	r0, 8009228 <__sfmoreglue+0x28>
 8009216:	2100      	movs	r1, #0
 8009218:	e9c0 1600 	strd	r1, r6, [r0]
 800921c:	300c      	adds	r0, #12
 800921e:	60a0      	str	r0, [r4, #8]
 8009220:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009224:	f7fb fd9e 	bl	8004d64 <memset>
 8009228:	4620      	mov	r0, r4
 800922a:	bd70      	pop	{r4, r5, r6, pc}

0800922c <__sfp_lock_acquire>:
 800922c:	4801      	ldr	r0, [pc, #4]	; (8009234 <__sfp_lock_acquire+0x8>)
 800922e:	f000 b8b3 	b.w	8009398 <__retarget_lock_acquire_recursive>
 8009232:	bf00      	nop
 8009234:	200007e5 	.word	0x200007e5

08009238 <__sfp_lock_release>:
 8009238:	4801      	ldr	r0, [pc, #4]	; (8009240 <__sfp_lock_release+0x8>)
 800923a:	f000 b8ae 	b.w	800939a <__retarget_lock_release_recursive>
 800923e:	bf00      	nop
 8009240:	200007e5 	.word	0x200007e5

08009244 <__sinit_lock_acquire>:
 8009244:	4801      	ldr	r0, [pc, #4]	; (800924c <__sinit_lock_acquire+0x8>)
 8009246:	f000 b8a7 	b.w	8009398 <__retarget_lock_acquire_recursive>
 800924a:	bf00      	nop
 800924c:	200007e6 	.word	0x200007e6

08009250 <__sinit_lock_release>:
 8009250:	4801      	ldr	r0, [pc, #4]	; (8009258 <__sinit_lock_release+0x8>)
 8009252:	f000 b8a2 	b.w	800939a <__retarget_lock_release_recursive>
 8009256:	bf00      	nop
 8009258:	200007e6 	.word	0x200007e6

0800925c <__sinit>:
 800925c:	b510      	push	{r4, lr}
 800925e:	4604      	mov	r4, r0
 8009260:	f7ff fff0 	bl	8009244 <__sinit_lock_acquire>
 8009264:	69a3      	ldr	r3, [r4, #24]
 8009266:	b11b      	cbz	r3, 8009270 <__sinit+0x14>
 8009268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800926c:	f7ff bff0 	b.w	8009250 <__sinit_lock_release>
 8009270:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009274:	6523      	str	r3, [r4, #80]	; 0x50
 8009276:	4b13      	ldr	r3, [pc, #76]	; (80092c4 <__sinit+0x68>)
 8009278:	4a13      	ldr	r2, [pc, #76]	; (80092c8 <__sinit+0x6c>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	62a2      	str	r2, [r4, #40]	; 0x28
 800927e:	42a3      	cmp	r3, r4
 8009280:	bf04      	itt	eq
 8009282:	2301      	moveq	r3, #1
 8009284:	61a3      	streq	r3, [r4, #24]
 8009286:	4620      	mov	r0, r4
 8009288:	f000 f820 	bl	80092cc <__sfp>
 800928c:	6060      	str	r0, [r4, #4]
 800928e:	4620      	mov	r0, r4
 8009290:	f000 f81c 	bl	80092cc <__sfp>
 8009294:	60a0      	str	r0, [r4, #8]
 8009296:	4620      	mov	r0, r4
 8009298:	f000 f818 	bl	80092cc <__sfp>
 800929c:	2200      	movs	r2, #0
 800929e:	60e0      	str	r0, [r4, #12]
 80092a0:	2104      	movs	r1, #4
 80092a2:	6860      	ldr	r0, [r4, #4]
 80092a4:	f7ff ff82 	bl	80091ac <std>
 80092a8:	68a0      	ldr	r0, [r4, #8]
 80092aa:	2201      	movs	r2, #1
 80092ac:	2109      	movs	r1, #9
 80092ae:	f7ff ff7d 	bl	80091ac <std>
 80092b2:	68e0      	ldr	r0, [r4, #12]
 80092b4:	2202      	movs	r2, #2
 80092b6:	2112      	movs	r1, #18
 80092b8:	f7ff ff78 	bl	80091ac <std>
 80092bc:	2301      	movs	r3, #1
 80092be:	61a3      	str	r3, [r4, #24]
 80092c0:	e7d2      	b.n	8009268 <__sinit+0xc>
 80092c2:	bf00      	nop
 80092c4:	0800a3f4 	.word	0x0800a3f4
 80092c8:	080091f5 	.word	0x080091f5

080092cc <__sfp>:
 80092cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ce:	4607      	mov	r7, r0
 80092d0:	f7ff ffac 	bl	800922c <__sfp_lock_acquire>
 80092d4:	4b1e      	ldr	r3, [pc, #120]	; (8009350 <__sfp+0x84>)
 80092d6:	681e      	ldr	r6, [r3, #0]
 80092d8:	69b3      	ldr	r3, [r6, #24]
 80092da:	b913      	cbnz	r3, 80092e2 <__sfp+0x16>
 80092dc:	4630      	mov	r0, r6
 80092de:	f7ff ffbd 	bl	800925c <__sinit>
 80092e2:	3648      	adds	r6, #72	; 0x48
 80092e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80092e8:	3b01      	subs	r3, #1
 80092ea:	d503      	bpl.n	80092f4 <__sfp+0x28>
 80092ec:	6833      	ldr	r3, [r6, #0]
 80092ee:	b30b      	cbz	r3, 8009334 <__sfp+0x68>
 80092f0:	6836      	ldr	r6, [r6, #0]
 80092f2:	e7f7      	b.n	80092e4 <__sfp+0x18>
 80092f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80092f8:	b9d5      	cbnz	r5, 8009330 <__sfp+0x64>
 80092fa:	4b16      	ldr	r3, [pc, #88]	; (8009354 <__sfp+0x88>)
 80092fc:	60e3      	str	r3, [r4, #12]
 80092fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009302:	6665      	str	r5, [r4, #100]	; 0x64
 8009304:	f000 f847 	bl	8009396 <__retarget_lock_init_recursive>
 8009308:	f7ff ff96 	bl	8009238 <__sfp_lock_release>
 800930c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009310:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009314:	6025      	str	r5, [r4, #0]
 8009316:	61a5      	str	r5, [r4, #24]
 8009318:	2208      	movs	r2, #8
 800931a:	4629      	mov	r1, r5
 800931c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009320:	f7fb fd20 	bl	8004d64 <memset>
 8009324:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009328:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800932c:	4620      	mov	r0, r4
 800932e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009330:	3468      	adds	r4, #104	; 0x68
 8009332:	e7d9      	b.n	80092e8 <__sfp+0x1c>
 8009334:	2104      	movs	r1, #4
 8009336:	4638      	mov	r0, r7
 8009338:	f7ff ff62 	bl	8009200 <__sfmoreglue>
 800933c:	4604      	mov	r4, r0
 800933e:	6030      	str	r0, [r6, #0]
 8009340:	2800      	cmp	r0, #0
 8009342:	d1d5      	bne.n	80092f0 <__sfp+0x24>
 8009344:	f7ff ff78 	bl	8009238 <__sfp_lock_release>
 8009348:	230c      	movs	r3, #12
 800934a:	603b      	str	r3, [r7, #0]
 800934c:	e7ee      	b.n	800932c <__sfp+0x60>
 800934e:	bf00      	nop
 8009350:	0800a3f4 	.word	0x0800a3f4
 8009354:	ffff0001 	.word	0xffff0001

08009358 <_fwalk_reent>:
 8009358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800935c:	4606      	mov	r6, r0
 800935e:	4688      	mov	r8, r1
 8009360:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009364:	2700      	movs	r7, #0
 8009366:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800936a:	f1b9 0901 	subs.w	r9, r9, #1
 800936e:	d505      	bpl.n	800937c <_fwalk_reent+0x24>
 8009370:	6824      	ldr	r4, [r4, #0]
 8009372:	2c00      	cmp	r4, #0
 8009374:	d1f7      	bne.n	8009366 <_fwalk_reent+0xe>
 8009376:	4638      	mov	r0, r7
 8009378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800937c:	89ab      	ldrh	r3, [r5, #12]
 800937e:	2b01      	cmp	r3, #1
 8009380:	d907      	bls.n	8009392 <_fwalk_reent+0x3a>
 8009382:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009386:	3301      	adds	r3, #1
 8009388:	d003      	beq.n	8009392 <_fwalk_reent+0x3a>
 800938a:	4629      	mov	r1, r5
 800938c:	4630      	mov	r0, r6
 800938e:	47c0      	blx	r8
 8009390:	4307      	orrs	r7, r0
 8009392:	3568      	adds	r5, #104	; 0x68
 8009394:	e7e9      	b.n	800936a <_fwalk_reent+0x12>

08009396 <__retarget_lock_init_recursive>:
 8009396:	4770      	bx	lr

08009398 <__retarget_lock_acquire_recursive>:
 8009398:	4770      	bx	lr

0800939a <__retarget_lock_release_recursive>:
 800939a:	4770      	bx	lr

0800939c <__swhatbuf_r>:
 800939c:	b570      	push	{r4, r5, r6, lr}
 800939e:	460e      	mov	r6, r1
 80093a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093a4:	2900      	cmp	r1, #0
 80093a6:	b096      	sub	sp, #88	; 0x58
 80093a8:	4614      	mov	r4, r2
 80093aa:	461d      	mov	r5, r3
 80093ac:	da08      	bge.n	80093c0 <__swhatbuf_r+0x24>
 80093ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80093b2:	2200      	movs	r2, #0
 80093b4:	602a      	str	r2, [r5, #0]
 80093b6:	061a      	lsls	r2, r3, #24
 80093b8:	d410      	bmi.n	80093dc <__swhatbuf_r+0x40>
 80093ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093be:	e00e      	b.n	80093de <__swhatbuf_r+0x42>
 80093c0:	466a      	mov	r2, sp
 80093c2:	f000 f903 	bl	80095cc <_fstat_r>
 80093c6:	2800      	cmp	r0, #0
 80093c8:	dbf1      	blt.n	80093ae <__swhatbuf_r+0x12>
 80093ca:	9a01      	ldr	r2, [sp, #4]
 80093cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80093d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80093d4:	425a      	negs	r2, r3
 80093d6:	415a      	adcs	r2, r3
 80093d8:	602a      	str	r2, [r5, #0]
 80093da:	e7ee      	b.n	80093ba <__swhatbuf_r+0x1e>
 80093dc:	2340      	movs	r3, #64	; 0x40
 80093de:	2000      	movs	r0, #0
 80093e0:	6023      	str	r3, [r4, #0]
 80093e2:	b016      	add	sp, #88	; 0x58
 80093e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080093e8 <__smakebuf_r>:
 80093e8:	898b      	ldrh	r3, [r1, #12]
 80093ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093ec:	079d      	lsls	r5, r3, #30
 80093ee:	4606      	mov	r6, r0
 80093f0:	460c      	mov	r4, r1
 80093f2:	d507      	bpl.n	8009404 <__smakebuf_r+0x1c>
 80093f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80093f8:	6023      	str	r3, [r4, #0]
 80093fa:	6123      	str	r3, [r4, #16]
 80093fc:	2301      	movs	r3, #1
 80093fe:	6163      	str	r3, [r4, #20]
 8009400:	b002      	add	sp, #8
 8009402:	bd70      	pop	{r4, r5, r6, pc}
 8009404:	ab01      	add	r3, sp, #4
 8009406:	466a      	mov	r2, sp
 8009408:	f7ff ffc8 	bl	800939c <__swhatbuf_r>
 800940c:	9900      	ldr	r1, [sp, #0]
 800940e:	4605      	mov	r5, r0
 8009410:	4630      	mov	r0, r6
 8009412:	f7ff f957 	bl	80086c4 <_malloc_r>
 8009416:	b948      	cbnz	r0, 800942c <__smakebuf_r+0x44>
 8009418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800941c:	059a      	lsls	r2, r3, #22
 800941e:	d4ef      	bmi.n	8009400 <__smakebuf_r+0x18>
 8009420:	f023 0303 	bic.w	r3, r3, #3
 8009424:	f043 0302 	orr.w	r3, r3, #2
 8009428:	81a3      	strh	r3, [r4, #12]
 800942a:	e7e3      	b.n	80093f4 <__smakebuf_r+0xc>
 800942c:	4b0d      	ldr	r3, [pc, #52]	; (8009464 <__smakebuf_r+0x7c>)
 800942e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009430:	89a3      	ldrh	r3, [r4, #12]
 8009432:	6020      	str	r0, [r4, #0]
 8009434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009438:	81a3      	strh	r3, [r4, #12]
 800943a:	9b00      	ldr	r3, [sp, #0]
 800943c:	6163      	str	r3, [r4, #20]
 800943e:	9b01      	ldr	r3, [sp, #4]
 8009440:	6120      	str	r0, [r4, #16]
 8009442:	b15b      	cbz	r3, 800945c <__smakebuf_r+0x74>
 8009444:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009448:	4630      	mov	r0, r6
 800944a:	f000 f8d1 	bl	80095f0 <_isatty_r>
 800944e:	b128      	cbz	r0, 800945c <__smakebuf_r+0x74>
 8009450:	89a3      	ldrh	r3, [r4, #12]
 8009452:	f023 0303 	bic.w	r3, r3, #3
 8009456:	f043 0301 	orr.w	r3, r3, #1
 800945a:	81a3      	strh	r3, [r4, #12]
 800945c:	89a0      	ldrh	r0, [r4, #12]
 800945e:	4305      	orrs	r5, r0
 8009460:	81a5      	strh	r5, [r4, #12]
 8009462:	e7cd      	b.n	8009400 <__smakebuf_r+0x18>
 8009464:	080091f5 	.word	0x080091f5

08009468 <_malloc_usable_size_r>:
 8009468:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800946c:	1f18      	subs	r0, r3, #4
 800946e:	2b00      	cmp	r3, #0
 8009470:	bfbc      	itt	lt
 8009472:	580b      	ldrlt	r3, [r1, r0]
 8009474:	18c0      	addlt	r0, r0, r3
 8009476:	4770      	bx	lr

08009478 <_raise_r>:
 8009478:	291f      	cmp	r1, #31
 800947a:	b538      	push	{r3, r4, r5, lr}
 800947c:	4604      	mov	r4, r0
 800947e:	460d      	mov	r5, r1
 8009480:	d904      	bls.n	800948c <_raise_r+0x14>
 8009482:	2316      	movs	r3, #22
 8009484:	6003      	str	r3, [r0, #0]
 8009486:	f04f 30ff 	mov.w	r0, #4294967295
 800948a:	bd38      	pop	{r3, r4, r5, pc}
 800948c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800948e:	b112      	cbz	r2, 8009496 <_raise_r+0x1e>
 8009490:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009494:	b94b      	cbnz	r3, 80094aa <_raise_r+0x32>
 8009496:	4620      	mov	r0, r4
 8009498:	f000 f830 	bl	80094fc <_getpid_r>
 800949c:	462a      	mov	r2, r5
 800949e:	4601      	mov	r1, r0
 80094a0:	4620      	mov	r0, r4
 80094a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094a6:	f000 b817 	b.w	80094d8 <_kill_r>
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d00a      	beq.n	80094c4 <_raise_r+0x4c>
 80094ae:	1c59      	adds	r1, r3, #1
 80094b0:	d103      	bne.n	80094ba <_raise_r+0x42>
 80094b2:	2316      	movs	r3, #22
 80094b4:	6003      	str	r3, [r0, #0]
 80094b6:	2001      	movs	r0, #1
 80094b8:	e7e7      	b.n	800948a <_raise_r+0x12>
 80094ba:	2400      	movs	r4, #0
 80094bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80094c0:	4628      	mov	r0, r5
 80094c2:	4798      	blx	r3
 80094c4:	2000      	movs	r0, #0
 80094c6:	e7e0      	b.n	800948a <_raise_r+0x12>

080094c8 <raise>:
 80094c8:	4b02      	ldr	r3, [pc, #8]	; (80094d4 <raise+0xc>)
 80094ca:	4601      	mov	r1, r0
 80094cc:	6818      	ldr	r0, [r3, #0]
 80094ce:	f7ff bfd3 	b.w	8009478 <_raise_r>
 80094d2:	bf00      	nop
 80094d4:	20000080 	.word	0x20000080

080094d8 <_kill_r>:
 80094d8:	b538      	push	{r3, r4, r5, lr}
 80094da:	4d07      	ldr	r5, [pc, #28]	; (80094f8 <_kill_r+0x20>)
 80094dc:	2300      	movs	r3, #0
 80094de:	4604      	mov	r4, r0
 80094e0:	4608      	mov	r0, r1
 80094e2:	4611      	mov	r1, r2
 80094e4:	602b      	str	r3, [r5, #0]
 80094e6:	f7f8 fbed 	bl	8001cc4 <_kill>
 80094ea:	1c43      	adds	r3, r0, #1
 80094ec:	d102      	bne.n	80094f4 <_kill_r+0x1c>
 80094ee:	682b      	ldr	r3, [r5, #0]
 80094f0:	b103      	cbz	r3, 80094f4 <_kill_r+0x1c>
 80094f2:	6023      	str	r3, [r4, #0]
 80094f4:	bd38      	pop	{r3, r4, r5, pc}
 80094f6:	bf00      	nop
 80094f8:	200007e0 	.word	0x200007e0

080094fc <_getpid_r>:
 80094fc:	f7f8 bbda 	b.w	8001cb4 <_getpid>

08009500 <__sread>:
 8009500:	b510      	push	{r4, lr}
 8009502:	460c      	mov	r4, r1
 8009504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009508:	f000 f894 	bl	8009634 <_read_r>
 800950c:	2800      	cmp	r0, #0
 800950e:	bfab      	itete	ge
 8009510:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009512:	89a3      	ldrhlt	r3, [r4, #12]
 8009514:	181b      	addge	r3, r3, r0
 8009516:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800951a:	bfac      	ite	ge
 800951c:	6563      	strge	r3, [r4, #84]	; 0x54
 800951e:	81a3      	strhlt	r3, [r4, #12]
 8009520:	bd10      	pop	{r4, pc}

08009522 <__swrite>:
 8009522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009526:	461f      	mov	r7, r3
 8009528:	898b      	ldrh	r3, [r1, #12]
 800952a:	05db      	lsls	r3, r3, #23
 800952c:	4605      	mov	r5, r0
 800952e:	460c      	mov	r4, r1
 8009530:	4616      	mov	r6, r2
 8009532:	d505      	bpl.n	8009540 <__swrite+0x1e>
 8009534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009538:	2302      	movs	r3, #2
 800953a:	2200      	movs	r2, #0
 800953c:	f000 f868 	bl	8009610 <_lseek_r>
 8009540:	89a3      	ldrh	r3, [r4, #12]
 8009542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009546:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800954a:	81a3      	strh	r3, [r4, #12]
 800954c:	4632      	mov	r2, r6
 800954e:	463b      	mov	r3, r7
 8009550:	4628      	mov	r0, r5
 8009552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009556:	f000 b817 	b.w	8009588 <_write_r>

0800955a <__sseek>:
 800955a:	b510      	push	{r4, lr}
 800955c:	460c      	mov	r4, r1
 800955e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009562:	f000 f855 	bl	8009610 <_lseek_r>
 8009566:	1c43      	adds	r3, r0, #1
 8009568:	89a3      	ldrh	r3, [r4, #12]
 800956a:	bf15      	itete	ne
 800956c:	6560      	strne	r0, [r4, #84]	; 0x54
 800956e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009572:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009576:	81a3      	strheq	r3, [r4, #12]
 8009578:	bf18      	it	ne
 800957a:	81a3      	strhne	r3, [r4, #12]
 800957c:	bd10      	pop	{r4, pc}

0800957e <__sclose>:
 800957e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009582:	f000 b813 	b.w	80095ac <_close_r>
	...

08009588 <_write_r>:
 8009588:	b538      	push	{r3, r4, r5, lr}
 800958a:	4d07      	ldr	r5, [pc, #28]	; (80095a8 <_write_r+0x20>)
 800958c:	4604      	mov	r4, r0
 800958e:	4608      	mov	r0, r1
 8009590:	4611      	mov	r1, r2
 8009592:	2200      	movs	r2, #0
 8009594:	602a      	str	r2, [r5, #0]
 8009596:	461a      	mov	r2, r3
 8009598:	f7f8 fbcb 	bl	8001d32 <_write>
 800959c:	1c43      	adds	r3, r0, #1
 800959e:	d102      	bne.n	80095a6 <_write_r+0x1e>
 80095a0:	682b      	ldr	r3, [r5, #0]
 80095a2:	b103      	cbz	r3, 80095a6 <_write_r+0x1e>
 80095a4:	6023      	str	r3, [r4, #0]
 80095a6:	bd38      	pop	{r3, r4, r5, pc}
 80095a8:	200007e0 	.word	0x200007e0

080095ac <_close_r>:
 80095ac:	b538      	push	{r3, r4, r5, lr}
 80095ae:	4d06      	ldr	r5, [pc, #24]	; (80095c8 <_close_r+0x1c>)
 80095b0:	2300      	movs	r3, #0
 80095b2:	4604      	mov	r4, r0
 80095b4:	4608      	mov	r0, r1
 80095b6:	602b      	str	r3, [r5, #0]
 80095b8:	f7f8 fbd7 	bl	8001d6a <_close>
 80095bc:	1c43      	adds	r3, r0, #1
 80095be:	d102      	bne.n	80095c6 <_close_r+0x1a>
 80095c0:	682b      	ldr	r3, [r5, #0]
 80095c2:	b103      	cbz	r3, 80095c6 <_close_r+0x1a>
 80095c4:	6023      	str	r3, [r4, #0]
 80095c6:	bd38      	pop	{r3, r4, r5, pc}
 80095c8:	200007e0 	.word	0x200007e0

080095cc <_fstat_r>:
 80095cc:	b538      	push	{r3, r4, r5, lr}
 80095ce:	4d07      	ldr	r5, [pc, #28]	; (80095ec <_fstat_r+0x20>)
 80095d0:	2300      	movs	r3, #0
 80095d2:	4604      	mov	r4, r0
 80095d4:	4608      	mov	r0, r1
 80095d6:	4611      	mov	r1, r2
 80095d8:	602b      	str	r3, [r5, #0]
 80095da:	f7f8 fbd2 	bl	8001d82 <_fstat>
 80095de:	1c43      	adds	r3, r0, #1
 80095e0:	d102      	bne.n	80095e8 <_fstat_r+0x1c>
 80095e2:	682b      	ldr	r3, [r5, #0]
 80095e4:	b103      	cbz	r3, 80095e8 <_fstat_r+0x1c>
 80095e6:	6023      	str	r3, [r4, #0]
 80095e8:	bd38      	pop	{r3, r4, r5, pc}
 80095ea:	bf00      	nop
 80095ec:	200007e0 	.word	0x200007e0

080095f0 <_isatty_r>:
 80095f0:	b538      	push	{r3, r4, r5, lr}
 80095f2:	4d06      	ldr	r5, [pc, #24]	; (800960c <_isatty_r+0x1c>)
 80095f4:	2300      	movs	r3, #0
 80095f6:	4604      	mov	r4, r0
 80095f8:	4608      	mov	r0, r1
 80095fa:	602b      	str	r3, [r5, #0]
 80095fc:	f7f8 fbd1 	bl	8001da2 <_isatty>
 8009600:	1c43      	adds	r3, r0, #1
 8009602:	d102      	bne.n	800960a <_isatty_r+0x1a>
 8009604:	682b      	ldr	r3, [r5, #0]
 8009606:	b103      	cbz	r3, 800960a <_isatty_r+0x1a>
 8009608:	6023      	str	r3, [r4, #0]
 800960a:	bd38      	pop	{r3, r4, r5, pc}
 800960c:	200007e0 	.word	0x200007e0

08009610 <_lseek_r>:
 8009610:	b538      	push	{r3, r4, r5, lr}
 8009612:	4d07      	ldr	r5, [pc, #28]	; (8009630 <_lseek_r+0x20>)
 8009614:	4604      	mov	r4, r0
 8009616:	4608      	mov	r0, r1
 8009618:	4611      	mov	r1, r2
 800961a:	2200      	movs	r2, #0
 800961c:	602a      	str	r2, [r5, #0]
 800961e:	461a      	mov	r2, r3
 8009620:	f7f8 fbca 	bl	8001db8 <_lseek>
 8009624:	1c43      	adds	r3, r0, #1
 8009626:	d102      	bne.n	800962e <_lseek_r+0x1e>
 8009628:	682b      	ldr	r3, [r5, #0]
 800962a:	b103      	cbz	r3, 800962e <_lseek_r+0x1e>
 800962c:	6023      	str	r3, [r4, #0]
 800962e:	bd38      	pop	{r3, r4, r5, pc}
 8009630:	200007e0 	.word	0x200007e0

08009634 <_read_r>:
 8009634:	b538      	push	{r3, r4, r5, lr}
 8009636:	4d07      	ldr	r5, [pc, #28]	; (8009654 <_read_r+0x20>)
 8009638:	4604      	mov	r4, r0
 800963a:	4608      	mov	r0, r1
 800963c:	4611      	mov	r1, r2
 800963e:	2200      	movs	r2, #0
 8009640:	602a      	str	r2, [r5, #0]
 8009642:	461a      	mov	r2, r3
 8009644:	f7f8 fb58 	bl	8001cf8 <_read>
 8009648:	1c43      	adds	r3, r0, #1
 800964a:	d102      	bne.n	8009652 <_read_r+0x1e>
 800964c:	682b      	ldr	r3, [r5, #0]
 800964e:	b103      	cbz	r3, 8009652 <_read_r+0x1e>
 8009650:	6023      	str	r3, [r4, #0]
 8009652:	bd38      	pop	{r3, r4, r5, pc}
 8009654:	200007e0 	.word	0x200007e0

08009658 <_init>:
 8009658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800965a:	bf00      	nop
 800965c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800965e:	bc08      	pop	{r3}
 8009660:	469e      	mov	lr, r3
 8009662:	4770      	bx	lr

08009664 <_fini>:
 8009664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009666:	bf00      	nop
 8009668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800966a:	bc08      	pop	{r3}
 800966c:	469e      	mov	lr, r3
 800966e:	4770      	bx	lr
